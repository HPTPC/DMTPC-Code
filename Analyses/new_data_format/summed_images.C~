int cam=1; // BL quadrant                                                                                                               
unsigned int ev_counter;
unsigned int bias_counter;

void sum(TH2D* sum, int run=5002, unsigned int& counter)
{
  dmtpc::core::Dataset *d = new dmtpc::core::Dataset;
  TString filename = TString::Format("/scratch3/darkmatter/dmtpc/data/m3/2016/02/raw/m3_gain_R%d.raw.root",run);
  //if (run>=1032000) file="../../02/raw/"+filename;
  d->open(filename);

  for (int i=0; i<d->nevents();i++){
    d->getEvent(i);
    TH2I* myImage = d->event()->getImage(cam)->getHist();
    sum->Add(myImage);
    counter++;
  }
}


void summed_images()
{
  // gSystem->Load("$DMTPC_HOME/DmtpcCore/lib/libDmtpcCore.so");
  ev_counter=0;
  bias_counter=0;

  // open a data file just to get histo clones                                                                                          
  dmtpc::core::Dataset *d = new dmtpc::core::Dataset;
  d->open("/scratch3/darkmatter/dmtpc/data/m3/2016/02/raw/m3_gain_R1032036.raw.root");
  d->getEvent(0);
  TH2I* myImage = d->event()->getImage(cam)->getHist();
  TH2D* sumImage = (TH2D*)myImage->Clone("sumImage");
  sumImage->Reset();
  TH2D* biasImage = (TH2D*)myImage->Clone("biasImage");
  biasImage->Reset();

  // exposure                                                                                                                           
  // for (int r=1029052; r<=1029057; r++) sum(sumImage,r,ev_counter);
  //for (int r=1030009; r<=1030023; r++) sum(sumImage,r,ev_counter);
  //for (int r=1031005; r<=1031013; r++) sum(sumImage,r,ev_counter);
  for (int r=1032036; r<=1032048; r++) sum(sumImage,r,ev_counter);
  for (int r=1033001; r<=1033024; r++) sum(sumImage,r,ev_counter);
  for (int r=1034001; r<=1034017; r++) sum(sumImage,r,ev_counter);
  for (int r=1035047; r<=1035053; r++) sum(sumImage,r,ev_counter);
  for (int r=1036001; r<=1036012; r++) sum(sumImage,r,ev_counter);
  for (int r=1036018; r<=1036029; r++) sum(sumImage,r,ev_counter);
  for (int r=1037001; r<=1037024; r++) sum(sumImage,r,ev_counter);
  for (int r=1038001; r<=1038003; r++) sum(sumImage,r,ev_counter);
  for (int r=1038009; r<=1038010; r++) sum(sumImage,r,ev_counter);
  for (int r=1038014; r<=1038029; r++) sum(sumImage,r,ev_counter);
  for (int r=1039001; r<=1039023; r++) sum(sumImage,r,ev_counter);
  for (int r=1040002; r<=1040003; r++) sum(sumImage,r,ev_counter);
  for (int r=1040011; r<=1040014; r++) sum(sumImage,r,ev_counter);
  for (int r=1040018; r<=1040019; r++) sum(sumImage,r,ev_counter);
  for (int r=1040022; r<=1040022; r++) sum(sumImage,r,ev_counter);
  for (int r=1040024; r<=1040024; r++) sum(sumImage,r,ev_counter);
  for (int r=1040027; r<=1040029; r++) sum(sumImage,r,ev_counter);
  for (int r=1041001; r<=1041021; r++) sum(sumImage,r,ev_counter);
  for (int r=1042001; r<=1042010; r++) sum(sumImage,r,ev_counter);
  for (int r=1042012; r<=1042024; r++) sum(sumImage,r,ev_counter);
  for (int r=1043001; r<=1043005; r++) sum(sumImage,r,ev_counter);
  // voltage-off, shutter closed                                                                                                        
  /*for (int b=1030025; b<=1030026; b++) sum(biasImage,b,bias_counter);
  for (int b=1031001; b<=1031003; b++) sum(biasImage,b,bias_counter);
  for (int b=1031014; b<=1031019; b++) sum(biasImage,b,bias_counter);*/
  for (int b=1032001; b<=1032008; b++) sum(biasImage,b,bias_counter);
  for (int b=1034039; b<=1034041; b++) sum(biasImage,b,bias_counter);
  for (int b=1034045; b<=1034046; b++) sum(biasImage,b,bias_counter);
  for (int b=1035001; b<=1035013; b++) sum(biasImage,b,bias_counter);

  // average                                                                                                                            
  sumImage->Scale(1./(double)ev_counter);
  biasImage->Scale(1./(double)bias_counter);

  int bin = sumImage->FindBin(1500,1500);
  cout << "sumImage bin = " << sumImage->GetBinContent(bin) << endl;
  cout << "total summed events = " << ev_counter << endl;
  cout << "biasImage bin = " << biasImage->GetBinContent(bin) << endl;
  cout << "total summed bias = " << bias_counter << endl;

  TFile *file=new TFile("sums_feb.root","recreate");
  sumImage->Write();
  biasImage->Write();
  file->Close();
}

