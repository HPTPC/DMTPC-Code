{

  //  noise_in_ADU = sqrt[ (read_noise_in_e*ADU_per_e_for_this_camera)**2 + (dark_rate_in_e_per_pixel_per_s xposure_length_in_s * pixels * ADU_per_e_for_this_camera)**2 ]                                                  

  // const int ncam = 3;
  const int ncam = 1;
  /* std::map<TString, int> camera;
    cameras["PL0141514"] = 0;
    cameras["PL0251514"] = 1;    
    cameras["PL0261514"] = 2;*/

  double pixels = 4096*4096;
  
  
  double read_noise[ncam];
  double adu_pe[ncam];
  double dark[ncam];
  
  //read_noise[0] = 11.2;
  //read_noise[1] = 10.2;
  read_noise[0] = 7.0; //9.6;                                                                                  
  
  //adu_pe[0] = 1.55;
  //adu_pe[1] = 1.52;
  adu_pe[0] = 1.27; //1.52;                                                                                     
  
  
  //dark should be:  dark[0] = 0.6/(100*adu_pe[1]*pixels); but going to multiply by pixels and gain in calculation, so just omitting here
  //dark[0] = 2.5/(100);
  //dark[1] = 0.6/(100);
  dark[0] = 60.8/(100); //0.7/(100);                                                                            
  
  double exp[10] = {1.0,2.0,3.0,5.0,10.0,15.0,20.0,30.0,60.0,120.0};
 
  double noise[10];
  //TGraph * graphs[ncam];
  //TCanvas * c1[ncam];
  
  TCanvas *c1 = new TCanvas("c1","c1",600,400);
  TMultiGraph *mg = new TMultiGraph();
  //TGraph *gr1[ncam]; //= new TGraph(); 
  //gr1->SetLineColor(kBlue);
  //TGraph *gr2 = new TGraph(); 
 //gr2->SetLineColor(kRed);
  
 //for(int c = 0; c < ncam; c++){
  for(int i = 0; i < 10; i++){
    noise[i] = (TMath::Sqrt(read_noise[0]*adu_pe[0]*read_noise[0]*adu_pe[0] + dark[0]*exp[i]*dark[0]*exp[i]))*1.241;
    //}
   
    gr1 = new TGraph(10,exp,noise);
    gr1->SetLineColor(kRed);
    /*graphs[c] = new TGraph(5,exp,noise);
      c1[c] = new TCanvas();
      c1[c]->cd();
      graphs[c]->SetTitle(Form("Predicted Noise vs. Exposure Cam %d",c));
      graphs[c]->GetXaxis()->SetTitle("Exposure Time (s)");
      graphs[c]->GetYaxis()->SetTitle("Predicted Noise (ADU)");
      graphs[c]->Draw("alp");*/
    gr1->SetLineWidth(4);

   }

  Double_t exp_time[8] = {1.0,2.0,3.0,5.0,10.0,15.0,20.0,30.0};
  Double_t noise_meassured[8] = {10.87,11.06,11.61,12.14,13.71,16.3,19.08,25.417};
  Double_t ex[8] = {.15,.81,.1,1,.9,.5,.7,.1};
  Double_t ey[8] = {.2,.7,2.,.1,1.,2.,1.5,1.91};
  
  TGraphErrors *gr2 = new TGraphErrors(8,exp_time,noise_meassured,ex,ey);
  // gr2->SetLineColor(kRed);
  gr2->SetMarkerStyle(21);
  gr2->SetMarkerColor(kBlue);
  
  mg->Add(gr1);
  mg->Add(gr2);
  
  c1->cd(); 
  mg->Draw("alp");
  mg->SetTitle(Form("Predicted Noise vs. Exposure Time"));                                          
  mg->GetXaxis()->SetTitle("Exposure Time (s)");                                                        
  mg->GetYaxis()->SetTitle("Per Pixel Predicted Noise (ADU)");                 

  TLegend *leg = new TLegend(0.1, 0.7, 0.48, 0.9);
  leg->AddEntry(gr1,"Predicted Noise","lep");
  leg->AddEntry(gr2,"Measured Noise","lep");
  leg->Draw();
                                   
  //  mg->Draw("alp");
  c1->Update();

  
}
