//
// File generated by rootcint at Sat Jun 17 00:27:24 2017

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME builddIDmtpcImageCint
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "DmtpcImageCint.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace dmtpc {
namespace image {
   namespace ROOTDict {
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance();
      static void dmtpccLcLimage_Dictionary();

      // Function generating the singleton type initializer
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance()
      {
         static ::ROOT::TGenericClassInfo 
            instance("dmtpc::image", 0 /*version*/, "./include/StitchInfo.hh", 15,
                     ::ROOT::DefineBehavior((void*)0,(void*)0),
                     &dmtpccLcLimage_Dictionary, 0);
         return &instance;
      }
      // Insure that the inline function is _not_ optimized away by the compiler
      ::ROOT::TGenericClassInfo *(*_R__UNIQUE_(InitFunctionKeeper))() = &GenerateInitInstance;  
      // Static variable to force the class initialization
      static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance(); R__UseDummy(_R__UNIQUE_(Init));

      // Dictionary for non-ClassDef classes
      static void dmtpccLcLimage_Dictionary() {
         GenerateInitInstance()->GetClass();
      }

   }
}
}

namespace dmtpc {
namespace image {
namespace calculations {
   namespace ROOTDict {
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance();
      static void dmtpccLcLimagecLcLcalculations_Dictionary();

      // Function generating the singleton type initializer
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance()
      {
         static ::ROOT::TGenericClassInfo 
            instance("dmtpc::image::calculations", 0 /*version*/, "./include/ImageCalculations.hh", 18,
                     ::ROOT::DefineBehavior((void*)0,(void*)0),
                     &dmtpccLcLimagecLcLcalculations_Dictionary, 0);
         return &instance;
      }
      // Insure that the inline function is _not_ optimized away by the compiler
      ::ROOT::TGenericClassInfo *(*_R__UNIQUE_(InitFunctionKeeper))() = &GenerateInitInstance;  
      // Static variable to force the class initialization
      static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance(); R__UseDummy(_R__UNIQUE_(Init));

      // Dictionary for non-ClassDef classes
      static void dmtpccLcLimagecLcLcalculations_Dictionary() {
         GenerateInitInstance()->GetClass();
      }

   }
}
}
}

namespace dmtpc {
namespace image {
namespace io {
   namespace ROOTDict {
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance();
      static void dmtpccLcLimagecLcLio_Dictionary();

      // Function generating the singleton type initializer
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance()
      {
         static ::ROOT::TGenericClassInfo 
            instance("dmtpc::image::io", 0 /*version*/, "./include/ImageIO.hh", 12,
                     ::ROOT::DefineBehavior((void*)0,(void*)0),
                     &dmtpccLcLimagecLcLio_Dictionary, 0);
         return &instance;
      }
      // Insure that the inline function is _not_ optimized away by the compiler
      ::ROOT::TGenericClassInfo *(*_R__UNIQUE_(InitFunctionKeeper))() = &GenerateInitInstance;  
      // Static variable to force the class initialization
      static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance(); R__UseDummy(_R__UNIQUE_(Init));

      // Dictionary for non-ClassDef classes
      static void dmtpccLcLimagecLcLio_Dictionary() {
         GenerateInitInstance()->GetClass();
      }

   }
}
}
}

namespace dmtpc {
namespace image {
namespace palette {
   namespace ROOTDict {
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance();
      static void dmtpccLcLimagecLcLpalette_Dictionary();

      // Function generating the singleton type initializer
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance()
      {
         static ::ROOT::TGenericClassInfo 
            instance("dmtpc::image::palette", 0 /*version*/, "./include/ImagePalettes.hh", 10,
                     ::ROOT::DefineBehavior((void*)0,(void*)0),
                     &dmtpccLcLimagecLcLpalette_Dictionary, 0);
         return &instance;
      }
      // Insure that the inline function is _not_ optimized away by the compiler
      ::ROOT::TGenericClassInfo *(*_R__UNIQUE_(InitFunctionKeeper))() = &GenerateInitInstance;  
      // Static variable to force the class initialization
      static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance(); R__UseDummy(_R__UNIQUE_(Init));

      // Dictionary for non-ClassDef classes
      static void dmtpccLcLimagecLcLpalette_Dictionary() {
         GenerateInitInstance()->GetClass();
      }

   }
}
}
}

namespace dmtpc {
namespace image {
namespace processing {
   namespace ROOTDict {
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance();
      static void dmtpccLcLimagecLcLprocessing_Dictionary();

      // Function generating the singleton type initializer
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance()
      {
         static ::ROOT::TGenericClassInfo 
            instance("dmtpc::image::processing", 0 /*version*/, "./include/ImageProcessing.hh", 17,
                     ::ROOT::DefineBehavior((void*)0,(void*)0),
                     &dmtpccLcLimagecLcLprocessing_Dictionary, 0);
         return &instance;
      }
      // Insure that the inline function is _not_ optimized away by the compiler
      ::ROOT::TGenericClassInfo *(*_R__UNIQUE_(InitFunctionKeeper))() = &GenerateInitInstance;  
      // Static variable to force the class initialization
      static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance(); R__UseDummy(_R__UNIQUE_(Init));

      // Dictionary for non-ClassDef classes
      static void dmtpccLcLimagecLcLprocessing_Dictionary() {
         GenerateInitInstance()->GetClass();
      }

   }
}
}
}

namespace dmtpc {
namespace image {
namespace tools {
   namespace ROOTDict {
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance();
      static void dmtpccLcLimagecLcLtools_Dictionary();

      // Function generating the singleton type initializer
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance()
      {
         static ::ROOT::TGenericClassInfo 
            instance("dmtpc::image::tools", 0 /*version*/, "./include/ImageTools.hh", 12,
                     ::ROOT::DefineBehavior((void*)0,(void*)0),
                     &dmtpccLcLimagecLcLtools_Dictionary, 0);
         return &instance;
      }
      // Insure that the inline function is _not_ optimized away by the compiler
      ::ROOT::TGenericClassInfo *(*_R__UNIQUE_(InitFunctionKeeper))() = &GenerateInitInstance;  
      // Static variable to force the class initialization
      static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance(); R__UseDummy(_R__UNIQUE_(Init));

      // Dictionary for non-ClassDef classes
      static void dmtpccLcLimagecLcLtools_Dictionary() {
         GenerateInitInstance()->GetClass();
      }

   }
}
}
}

namespace ROOTDict {
   void dmtpccLcLimagecLcLStitchInfo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_dmtpccLcLimagecLcLStitchInfo(void *p = 0);
   static void *newArray_dmtpccLcLimagecLcLStitchInfo(Long_t size, void *p);
   static void delete_dmtpccLcLimagecLcLStitchInfo(void *p);
   static void deleteArray_dmtpccLcLimagecLcLStitchInfo(void *p);
   static void destruct_dmtpccLcLimagecLcLStitchInfo(void *p);
   static void streamer_dmtpccLcLimagecLcLStitchInfo(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::dmtpc::image::StitchInfo*)
   {
      ::dmtpc::image::StitchInfo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::dmtpc::image::StitchInfo >(0);
      static ::ROOT::TGenericClassInfo 
         instance("dmtpc::image::StitchInfo", ::dmtpc::image::StitchInfo::Class_Version(), "./include/StitchInfo.hh", 19,
                  typeid(::dmtpc::image::StitchInfo), ::ROOT::DefineBehavior(ptr, ptr),
                  &::dmtpc::image::StitchInfo::Dictionary, isa_proxy, 0,
                  sizeof(::dmtpc::image::StitchInfo) );
      instance.SetNew(&new_dmtpccLcLimagecLcLStitchInfo);
      instance.SetNewArray(&newArray_dmtpccLcLimagecLcLStitchInfo);
      instance.SetDelete(&delete_dmtpccLcLimagecLcLStitchInfo);
      instance.SetDeleteArray(&deleteArray_dmtpccLcLimagecLcLStitchInfo);
      instance.SetDestructor(&destruct_dmtpccLcLimagecLcLStitchInfo);
      instance.SetStreamerFunc(&streamer_dmtpccLcLimagecLcLStitchInfo);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::dmtpc::image::StitchInfo*)
   {
      return GenerateInitInstanceLocal((::dmtpc::image::StitchInfo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::dmtpc::image::StitchInfo*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace dmtpc {
namespace image {
namespace transform {
   namespace ROOTDict {
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance();
      static void dmtpccLcLimagecLcLtransform_Dictionary();

      // Function generating the singleton type initializer
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance()
      {
         static ::ROOT::TGenericClassInfo 
            instance("dmtpc::image::transform", 0 /*version*/, "./include/ImageTransforms.hh", 20,
                     ::ROOT::DefineBehavior((void*)0,(void*)0),
                     &dmtpccLcLimagecLcLtransform_Dictionary, 0);
         return &instance;
      }
      // Insure that the inline function is _not_ optimized away by the compiler
      ::ROOT::TGenericClassInfo *(*_R__UNIQUE_(InitFunctionKeeper))() = &GenerateInitInstance;  
      // Static variable to force the class initialization
      static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance(); R__UseDummy(_R__UNIQUE_(Init));

      // Dictionary for non-ClassDef classes
      static void dmtpccLcLimagecLcLtransform_Dictionary() {
         GenerateInitInstance()->GetClass();
      }

   }
}
}
}

namespace dmtpc {
namespace image {
namespace interpolation {
   namespace ROOTDict {
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance();
      static void dmtpccLcLimagecLcLinterpolation_Dictionary();

      // Function generating the singleton type initializer
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance()
      {
         static ::ROOT::TGenericClassInfo 
            instance("dmtpc::image::interpolation", 0 /*version*/, "./include/Interpolation.hh", 11,
                     ::ROOT::DefineBehavior((void*)0,(void*)0),
                     &dmtpccLcLimagecLcLinterpolation_Dictionary, 0);
         return &instance;
      }
      // Insure that the inline function is _not_ optimized away by the compiler
      ::ROOT::TGenericClassInfo *(*_R__UNIQUE_(InitFunctionKeeper))() = &GenerateInitInstance;  
      // Static variable to force the class initialization
      static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance(); R__UseDummy(_R__UNIQUE_(Init));

      // Dictionary for non-ClassDef classes
      static void dmtpccLcLimagecLcLinterpolation_Dictionary() {
         GenerateInitInstance()->GetClass();
      }

   }
}
}
}

namespace ROOTDict {
   void dmtpccLcLimagecLcLLensCorrection_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_dmtpccLcLimagecLcLLensCorrection(void *p = 0);
   static void *newArray_dmtpccLcLimagecLcLLensCorrection(Long_t size, void *p);
   static void delete_dmtpccLcLimagecLcLLensCorrection(void *p);
   static void deleteArray_dmtpccLcLimagecLcLLensCorrection(void *p);
   static void destruct_dmtpccLcLimagecLcLLensCorrection(void *p);
   static void streamer_dmtpccLcLimagecLcLLensCorrection(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::dmtpc::image::LensCorrection*)
   {
      ::dmtpc::image::LensCorrection *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::dmtpc::image::LensCorrection >(0);
      static ::ROOT::TGenericClassInfo 
         instance("dmtpc::image::LensCorrection", ::dmtpc::image::LensCorrection::Class_Version(), "./include/LensCorrection.hh", 35,
                  typeid(::dmtpc::image::LensCorrection), ::ROOT::DefineBehavior(ptr, ptr),
                  &::dmtpc::image::LensCorrection::Dictionary, isa_proxy, 0,
                  sizeof(::dmtpc::image::LensCorrection) );
      instance.SetNew(&new_dmtpccLcLimagecLcLLensCorrection);
      instance.SetNewArray(&newArray_dmtpccLcLimagecLcLLensCorrection);
      instance.SetDelete(&delete_dmtpccLcLimagecLcLLensCorrection);
      instance.SetDeleteArray(&deleteArray_dmtpccLcLimagecLcLLensCorrection);
      instance.SetDestructor(&destruct_dmtpccLcLimagecLcLLensCorrection);
      instance.SetStreamerFunc(&streamer_dmtpccLcLimagecLcLLensCorrection);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::dmtpc::image::LensCorrection*)
   {
      return GenerateInitInstanceLocal((::dmtpc::image::LensCorrection*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::dmtpc::image::LensCorrection*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

      namespace dmtpc {
         namespace image {
//______________________________________________________________________________
atomic_TClass_ptr StitchInfo::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *StitchInfo::Class_Name()
{
   return "dmtpc::image::StitchInfo";
}

//______________________________________________________________________________
const char *StitchInfo::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::dmtpc::image::StitchInfo*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int StitchInfo::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::dmtpc::image::StitchInfo*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void StitchInfo::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::dmtpc::image::StitchInfo*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *StitchInfo::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::dmtpc::image::StitchInfo*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace dmtpc::image
} // namespace dmtpc::image
      namespace dmtpc {
         namespace image {
//______________________________________________________________________________
atomic_TClass_ptr LensCorrection::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *LensCorrection::Class_Name()
{
   return "dmtpc::image::LensCorrection";
}

//______________________________________________________________________________
const char *LensCorrection::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::dmtpc::image::LensCorrection*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int LensCorrection::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::dmtpc::image::LensCorrection*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void LensCorrection::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::dmtpc::image::LensCorrection*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *LensCorrection::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::dmtpc::image::LensCorrection*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace dmtpc::image
} // namespace dmtpc::image
      namespace dmtpc {
         namespace image {
//______________________________________________________________________________
void LensCorrection::Streamer(TBuffer &R__b)
{
   // Stream an object of class dmtpc::image::LensCorrection.

   //This works around a msvc bug and should be harmless on other platforms
   typedef ::dmtpc::image::LensCorrection thisClass;
   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      R__b >> _order;
      delete [] _coeffs;
      _coeffs = new double[_order+1];
      R__b.ReadFastArray(_coeffs,_order+1);
      R__b.CheckByteCount(R__s, R__c, thisClass::IsA());
   } else {
      R__c = R__b.WriteVersion(thisClass::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      R__b << _order;
      R__b.WriteFastArray(_coeffs,_order+1);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

} // namespace dmtpc::image
} // namespace dmtpc::image
//______________________________________________________________________________
      namespace dmtpc {
         namespace image {
void LensCorrection::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class dmtpc::image::LensCorrection.
      TClass *R__cl = ::dmtpc::image::LensCorrection::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_order", &_order);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_coeffs", &_coeffs);
      TNamed::ShowMembers(R__insp);
}

} // namespace dmtpc::image
} // namespace dmtpc::image
namespace ROOTDict {
   // Wrappers around operator new
   static void *new_dmtpccLcLimagecLcLLensCorrection(void *p) {
      return  p ? new(p) ::dmtpc::image::LensCorrection : new ::dmtpc::image::LensCorrection;
   }
   static void *newArray_dmtpccLcLimagecLcLLensCorrection(Long_t nElements, void *p) {
      return p ? new(p) ::dmtpc::image::LensCorrection[nElements] : new ::dmtpc::image::LensCorrection[nElements];
   }
   // Wrapper around operator delete
   static void delete_dmtpccLcLimagecLcLLensCorrection(void *p) {
      delete ((::dmtpc::image::LensCorrection*)p);
   }
   static void deleteArray_dmtpccLcLimagecLcLLensCorrection(void *p) {
      delete [] ((::dmtpc::image::LensCorrection*)p);
   }
   static void destruct_dmtpccLcLimagecLcLLensCorrection(void *p) {
      typedef ::dmtpc::image::LensCorrection current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_dmtpccLcLimagecLcLLensCorrection(TBuffer &buf, void *obj) {
      ((::dmtpc::image::LensCorrection*)obj)->::dmtpc::image::LensCorrection::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::dmtpc::image::LensCorrection

      namespace dmtpc {
         namespace image {
//______________________________________________________________________________
void StitchInfo::Streamer(TBuffer &R__b)
{
   // Stream an object of class dmtpc::image::StitchInfo.

   //This works around a msvc bug and should be harmless on other platforms
   typedef ::dmtpc::image::StitchInfo thisClass;
   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      R__b >> nimages;
      {
         vector<std::vector<std::vector<double> > > &R__stl =  corners;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >));
         if (R__tcl1==0) {
            Error("corners streamer","Missing the TClass object for vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  xmins;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  xmaxs;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  ymins;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  ymaxs;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<int> &R__stl =  nbinsx;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<int> &R__stl =  nbinsy;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  xorigin;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  yorigin;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  rotation;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  sintheta;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  costheta;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  scale;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  weight;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  xwidths;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  ywidths;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<TH2F*> &R__stl =  frac;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(TH2F));
         if (R__tcl1==0) {
            Error("frac streamer","Missing the TClass object for TH2F!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            TH2F* R__t;
            R__t = (TH2F*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      R__b >> stitched_xmax;
      R__b >> stitched_ymax;
      R__b >> stitched_xmin;
      R__b >> stitched_ymin;
      R__b >> stitched_nbinsx;
      R__b >> stitched_nbinsy;
      R__b >> weight_sum;
      R__b.CheckByteCount(R__s, R__c, thisClass::IsA());
   } else {
      R__c = R__b.WriteVersion(thisClass::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      R__b << nimages;
      {
         vector<std::vector<std::vector<double> > > &R__stl =  corners;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >));
         if (R__tcl1==0) {
            Error("corners streamer","Missing the TClass object for vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >!");
            return;
         }
            vector<std::vector<std::vector<double> > >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<double> &R__stl =  xmins;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  xmaxs;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  ymins;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  ymaxs;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<int> &R__stl =  nbinsx;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<int>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<int> &R__stl =  nbinsy;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<int>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  xorigin;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  yorigin;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  rotation;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  sintheta;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  costheta;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  scale;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  weight;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  xwidths;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  ywidths;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<TH2F*> &R__stl =  frac;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<TH2F*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b << stitched_xmax;
      R__b << stitched_ymax;
      R__b << stitched_xmin;
      R__b << stitched_ymin;
      R__b << stitched_nbinsx;
      R__b << stitched_nbinsy;
      R__b << (TObject*)weight_sum;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

} // namespace dmtpc::image
} // namespace dmtpc::image
//______________________________________________________________________________
      namespace dmtpc {
         namespace image {
void StitchInfo::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class dmtpc::image::StitchInfo.
      TClass *R__cl = ::dmtpc::image::StitchInfo::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nimages", &nimages);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "corners", (void*)&corners);
      R__insp.InspectMember("vector<std::vector<std::vector<double> > >", (void*)&corners, "corners.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xmins", (void*)&xmins);
      R__insp.InspectMember("vector<double>", (void*)&xmins, "xmins.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xmaxs", (void*)&xmaxs);
      R__insp.InspectMember("vector<double>", (void*)&xmaxs, "xmaxs.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ymins", (void*)&ymins);
      R__insp.InspectMember("vector<double>", (void*)&ymins, "ymins.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ymaxs", (void*)&ymaxs);
      R__insp.InspectMember("vector<double>", (void*)&ymaxs, "ymaxs.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nbinsx", (void*)&nbinsx);
      R__insp.InspectMember("vector<int>", (void*)&nbinsx, "nbinsx.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nbinsy", (void*)&nbinsy);
      R__insp.InspectMember("vector<int>", (void*)&nbinsy, "nbinsy.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xorigin", (void*)&xorigin);
      R__insp.InspectMember("vector<double>", (void*)&xorigin, "xorigin.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yorigin", (void*)&yorigin);
      R__insp.InspectMember("vector<double>", (void*)&yorigin, "yorigin.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rotation", (void*)&rotation);
      R__insp.InspectMember("vector<double>", (void*)&rotation, "rotation.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sintheta", (void*)&sintheta);
      R__insp.InspectMember("vector<double>", (void*)&sintheta, "sintheta.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "costheta", (void*)&costheta);
      R__insp.InspectMember("vector<double>", (void*)&costheta, "costheta.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "scale", (void*)&scale);
      R__insp.InspectMember("vector<double>", (void*)&scale, "scale.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "weight", (void*)&weight);
      R__insp.InspectMember("vector<double>", (void*)&weight, "weight.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xwidths", (void*)&xwidths);
      R__insp.InspectMember("vector<double>", (void*)&xwidths, "xwidths.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ywidths", (void*)&ywidths);
      R__insp.InspectMember("vector<double>", (void*)&ywidths, "ywidths.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "frac", (void*)&frac);
      R__insp.InspectMember("vector<TH2F*>", (void*)&frac, "frac.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "stitched_xmax", &stitched_xmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "stitched_ymax", &stitched_ymax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "stitched_xmin", &stitched_xmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "stitched_ymin", &stitched_ymin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "stitched_nbinsx", &stitched_nbinsx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "stitched_nbinsy", &stitched_nbinsy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*weight_sum", &weight_sum);
      TNamed::ShowMembers(R__insp);
}

} // namespace dmtpc::image
} // namespace dmtpc::image
namespace ROOTDict {
   // Wrappers around operator new
   static void *new_dmtpccLcLimagecLcLStitchInfo(void *p) {
      return  p ? new(p) ::dmtpc::image::StitchInfo : new ::dmtpc::image::StitchInfo;
   }
   static void *newArray_dmtpccLcLimagecLcLStitchInfo(Long_t nElements, void *p) {
      return p ? new(p) ::dmtpc::image::StitchInfo[nElements] : new ::dmtpc::image::StitchInfo[nElements];
   }
   // Wrapper around operator delete
   static void delete_dmtpccLcLimagecLcLStitchInfo(void *p) {
      delete ((::dmtpc::image::StitchInfo*)p);
   }
   static void deleteArray_dmtpccLcLimagecLcLStitchInfo(void *p) {
      delete [] ((::dmtpc::image::StitchInfo*)p);
   }
   static void destruct_dmtpccLcLimagecLcLStitchInfo(void *p) {
      typedef ::dmtpc::image::StitchInfo current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_dmtpccLcLimagecLcLStitchInfo(TBuffer &buf, void *obj) {
      ((::dmtpc::image::StitchInfo*)obj)->::dmtpc::image::StitchInfo::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::dmtpc::image::StitchInfo

namespace ROOTDict {
   void vectorlETH2FmUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlETH2FmUgR_Dictionary();
   static void *new_vectorlETH2FmUgR(void *p = 0);
   static void *newArray_vectorlETH2FmUgR(Long_t size, void *p);
   static void delete_vectorlETH2FmUgR(void *p);
   static void deleteArray_vectorlETH2FmUgR(void *p);
   static void destruct_vectorlETH2FmUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<TH2F*>*)
   {
      vector<TH2F*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<TH2F*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<TH2F*>", -2, "/usr/lib64/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<TH2F*>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlETH2FmUgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<TH2F*>) );
      instance.SetNew(&new_vectorlETH2FmUgR);
      instance.SetNewArray(&newArray_vectorlETH2FmUgR);
      instance.SetDelete(&delete_vectorlETH2FmUgR);
      instance.SetDeleteArray(&deleteArray_vectorlETH2FmUgR);
      instance.SetDestructor(&destruct_vectorlETH2FmUgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<TH2F*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<TH2F*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlETH2FmUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<TH2F*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlETH2FmUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TH2F*> : new vector<TH2F*>;
   }
   static void *newArray_vectorlETH2FmUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TH2F*>[nElements] : new vector<TH2F*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlETH2FmUgR(void *p) {
      delete ((vector<TH2F*>*)p);
   }
   static void deleteArray_vectorlETH2FmUgR(void *p) {
      delete [] ((vector<TH2F*>*)p);
   }
   static void destruct_vectorlETH2FmUgR(void *p) {
      typedef vector<TH2F*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<TH2F*>

namespace ROOTDict {
   void vectorlEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEdoublegR_Dictionary();
   static void *new_vectorlEdoublegR(void *p = 0);
   static void *newArray_vectorlEdoublegR(Long_t size, void *p);
   static void delete_vectorlEdoublegR(void *p);
   static void deleteArray_vectorlEdoublegR(void *p);
   static void destruct_vectorlEdoublegR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<double>*)
   {
      vector<double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<double>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<double>", -2, "vector.dll", 0,
                  typeid(vector<double>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEdoublegR_Dictionary, isa_proxy, 0,
                  sizeof(vector<double>) );
      instance.SetNew(&new_vectorlEdoublegR);
      instance.SetNewArray(&newArray_vectorlEdoublegR);
      instance.SetDelete(&delete_vectorlEdoublegR);
      instance.SetDeleteArray(&deleteArray_vectorlEdoublegR);
      instance.SetDestructor(&destruct_vectorlEdoublegR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<double> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEdoublegR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<double>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEdoublegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<double> : new vector<double>;
   }
   static void *newArray_vectorlEdoublegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<double>[nElements] : new vector<double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEdoublegR(void *p) {
      delete ((vector<double>*)p);
   }
   static void deleteArray_vectorlEdoublegR(void *p) {
      delete [] ((vector<double>*)p);
   }
   static void destruct_vectorlEdoublegR(void *p) {
      typedef vector<double> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<double>

namespace ROOTDict {
   void vectorlEintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEintgR_Dictionary();
   static void *new_vectorlEintgR(void *p = 0);
   static void *newArray_vectorlEintgR(Long_t size, void *p);
   static void delete_vectorlEintgR(void *p);
   static void deleteArray_vectorlEintgR(void *p);
   static void destruct_vectorlEintgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<int>*)
   {
      vector<int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<int>", -2, "/usr/lib64/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<int>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEintgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<int>) );
      instance.SetNew(&new_vectorlEintgR);
      instance.SetNewArray(&newArray_vectorlEintgR);
      instance.SetDelete(&delete_vectorlEintgR);
      instance.SetDeleteArray(&deleteArray_vectorlEintgR);
      instance.SetDestructor(&destruct_vectorlEintgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEintgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<int>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int> : new vector<int>;
   }
   static void *newArray_vectorlEintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int>[nElements] : new vector<int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEintgR(void *p) {
      delete ((vector<int>*)p);
   }
   static void deleteArray_vectorlEintgR(void *p) {
      delete [] ((vector<int>*)p);
   }
   static void destruct_vectorlEintgR(void *p) {
      typedef vector<int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<int>

namespace ROOTDict {
   void vectorlEvectorlEdoublegRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEvectorlEdoublegRsPgR_Dictionary();
   static void *new_vectorlEvectorlEdoublegRsPgR(void *p = 0);
   static void *newArray_vectorlEvectorlEdoublegRsPgR(Long_t size, void *p);
   static void delete_vectorlEvectorlEdoublegRsPgR(void *p);
   static void deleteArray_vectorlEvectorlEdoublegRsPgR(void *p);
   static void destruct_vectorlEvectorlEdoublegRsPgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<vector<double> >*)
   {
      vector<vector<double> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<vector<double> >),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<vector<double> >", -2, "/usr/lib64/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<vector<double> >), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEvectorlEdoublegRsPgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<vector<double> >) );
      instance.SetNew(&new_vectorlEvectorlEdoublegRsPgR);
      instance.SetNewArray(&newArray_vectorlEvectorlEdoublegRsPgR);
      instance.SetDelete(&delete_vectorlEvectorlEdoublegRsPgR);
      instance.SetDeleteArray(&deleteArray_vectorlEvectorlEdoublegRsPgR);
      instance.SetDestructor(&destruct_vectorlEvectorlEdoublegRsPgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<vector<double> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<vector<double> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEvectorlEdoublegRsPgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<vector<double> >*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEvectorlEdoublegRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<double> > : new vector<vector<double> >;
   }
   static void *newArray_vectorlEvectorlEdoublegRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<double> >[nElements] : new vector<vector<double> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEvectorlEdoublegRsPgR(void *p) {
      delete ((vector<vector<double> >*)p);
   }
   static void deleteArray_vectorlEvectorlEdoublegRsPgR(void *p) {
      delete [] ((vector<vector<double> >*)p);
   }
   static void destruct_vectorlEvectorlEdoublegRsPgR(void *p) {
      typedef vector<vector<double> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<vector<double> >

namespace ROOTDict {
   void vectorlEvectorlEvectorlEdoublegRsPgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEvectorlEvectorlEdoublegRsPgRsPgR_Dictionary();
   static void *new_vectorlEvectorlEvectorlEdoublegRsPgRsPgR(void *p = 0);
   static void *newArray_vectorlEvectorlEvectorlEdoublegRsPgRsPgR(Long_t size, void *p);
   static void delete_vectorlEvectorlEvectorlEdoublegRsPgRsPgR(void *p);
   static void deleteArray_vectorlEvectorlEvectorlEdoublegRsPgRsPgR(void *p);
   static void destruct_vectorlEvectorlEvectorlEdoublegRsPgRsPgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<vector<vector<double> > >*)
   {
      vector<vector<vector<double> > > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<vector<vector<double> > >),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<vector<vector<double> > >", -2, "/usr/lib64/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<vector<vector<double> > >), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEvectorlEvectorlEdoublegRsPgRsPgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<vector<vector<double> > >) );
      instance.SetNew(&new_vectorlEvectorlEvectorlEdoublegRsPgRsPgR);
      instance.SetNewArray(&newArray_vectorlEvectorlEvectorlEdoublegRsPgRsPgR);
      instance.SetDelete(&delete_vectorlEvectorlEvectorlEdoublegRsPgRsPgR);
      instance.SetDeleteArray(&deleteArray_vectorlEvectorlEvectorlEdoublegRsPgRsPgR);
      instance.SetDestructor(&destruct_vectorlEvectorlEvectorlEdoublegRsPgRsPgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<vector<vector<double> > > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<vector<vector<double> > >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEvectorlEvectorlEdoublegRsPgRsPgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<vector<vector<double> > >*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEvectorlEvectorlEdoublegRsPgRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<vector<double> > > : new vector<vector<vector<double> > >;
   }
   static void *newArray_vectorlEvectorlEvectorlEdoublegRsPgRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<vector<double> > >[nElements] : new vector<vector<vector<double> > >[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEvectorlEvectorlEdoublegRsPgRsPgR(void *p) {
      delete ((vector<vector<vector<double> > >*)p);
   }
   static void deleteArray_vectorlEvectorlEvectorlEdoublegRsPgRsPgR(void *p) {
      delete [] ((vector<vector<vector<double> > >*)p);
   }
   static void destruct_vectorlEvectorlEvectorlEdoublegRsPgRsPgR(void *p) {
      typedef vector<vector<vector<double> > > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<vector<vector<double> > >

/********************************************************
* build/DmtpcImageCint.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableDmtpcImageCint();

extern "C" void G__set_cpp_environmentDmtpcImageCint() {
  G__cpp_reset_tagtableDmtpcImageCint();
}
#include <new>
extern "C" int G__cpp_dllrevDmtpcImageCint() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* dmtpc::image */

/* dmtpc::image::calculations */
static int G__DmtpcImageCint_193_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 103, (long) dmtpc::image::calculations::hasNeighbor((TH1*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (float) G__double(libp->para[2]), (int) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) dmtpc::image::calculations::hasNeighbor((TH1*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (float) G__double(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_193_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 103, (long) dmtpc::image::calculations::hasNeighbor((TH2*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (float) G__double(libp->para[3])
, (int) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 103, (long) dmtpc::image::calculations::hasNeighbor((TH2*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (float) G__double(libp->para[3])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_193_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letdouble(result7, 100, (double) dmtpc::image::calculations::calcSkewness((TH1*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (double) G__double(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 100, (double) dmtpc::image::calculations::calcSkewness((TH1*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_193_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letdouble(result7, 100, (double) dmtpc::image::calculations::calcSkewness2D((TH2*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (double) G__double(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 100, (double) dmtpc::image::calculations::calcSkewness2D((TH2*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_193_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) dmtpc::image::calculations::calcPixelDistance((TH2*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_193_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) dmtpc::image::calculations::calcIntensity2D((TH2*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, *(float*) G__Floatref(&libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_193_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      dmtpc::image::calculations::countSegmentLength((TH1*) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (int) G__int(libp->para[2]), *(int*) G__Intref(&libp->para[3])
, *(int*) G__Intref(&libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_193_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      dmtpc::image::calculations::countSegmentLength2D((TH2*) G__int(libp->para[0]), (float) G__double(libp->para[1])
, *(int*) G__Intref(&libp->para[2]), *(int*) G__Intref(&libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_193_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) dmtpc::image::calculations::findMaximum((TH1*) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (int) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_193_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) dmtpc::image::calculations::findMaximum2D((TH2*) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (int) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_193_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      dmtpc::image::calculations::rotateTCutG((TCutG*) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (TPoints*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      dmtpc::image::calculations::rotateTCutG((TCutG*) G__int(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_193_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) dmtpc::image::calculations::getCenter((TH2*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_193_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) dmtpc::image::calculations::getCenter((TCutG*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_193_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      dmtpc::image::calculations::getExtent((TCutG*) G__int(libp->para[0]), (TPoints*) G__int(libp->para[1])
, (TPoints*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_193_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) dmtpc::image::calculations::countPix((TH2*) G__int(libp->para[0]), (TCutG*) G__int(libp->para[1])
, (bool) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) dmtpc::image::calculations::countPix((TH2*) G__int(libp->para[0]), (TCutG*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) dmtpc::image::calculations::countPix((TH2*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_193_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) dmtpc::image::calculations::makeTCutGRect(*((TString*) G__int(libp->para[0])), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_193_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) dmtpc::image::calculations::makeAnnulusSector(*((TString*) G__int(libp->para[0])), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (TH2*) G__int(libp->para[5])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_193_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) dmtpc::image::calculations::maxProjectedStep((TH2*) G__int(libp->para[0]), (char) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) dmtpc::image::calculations::maxProjectedStep((TH2*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_193_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      dmtpc::image::calculations::principalAxes((TH2*) G__int(libp->para[0]), (float) G__double(libp->para[1])
, *(float*) G__Floatref(&libp->para[2]), *(float*) G__Floatref(&libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_193_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) dmtpc::image::calculations::cosRecoil2D((TH2*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_193_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 7:
      G__letint(result7, 85, (long) dmtpc::image::calculations::makeProfile(
(TGraph*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])
, (TCanvas*) G__int(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 85, (long) dmtpc::image::calculations::makeProfile((TGraph*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_193_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) dmtpc::image::calculations::getMean((TH2*) G__int(libp->para[0]), (TCutG*) G__int(libp->para[1])
, (bool) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) dmtpc::image::calculations::getMean((TH2*) G__int(libp->para[0]), (TCutG*) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) dmtpc::image::calculations::getMean((TH2*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_193_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) dmtpc::image::calculations::getRMS((TH2*) G__int(libp->para[0]), (TCutG*) G__int(libp->para[1])
, (bool) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) dmtpc::image::calculations::getRMS((TH2*) G__int(libp->para[0]), (TCutG*) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) dmtpc::image::calculations::getRMS((TH2*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_193_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      dmtpc::image::calculations::meanRMSNoOutliers((TH2*) G__int(libp->para[0]), *(double*) G__Doubleref(&libp->para[1])
, *(double*) G__Doubleref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_193_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letint(result7, 85, (long) dmtpc::image::calculations::pixelHist((TH2*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (TCutG*) G__int(libp->para[4]), (bool) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 85, (long) dmtpc::image::calculations::pixelHist((TH2*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (TCutG*) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) dmtpc::image::calculations::pixelHist((TH2*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) dmtpc::image::calculations::pixelHist((TH2*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) dmtpc::image::calculations::pixelHist((TH2*) G__int(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) dmtpc::image::calculations::pixelHist((TH2*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_193_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) dmtpc::image::calculations::distanceToImageEdge((TH2*) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_193_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) dmtpc::image::calculations::rectIntersectionArea((double*) G__int(libp->para[0]), (double*) G__int(libp->para[1])
, (double*) G__int(libp->para[2]), (double*) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_193_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letdouble(result7, 100, (double) dmtpc::image::calculations::polygonArea((int) G__int(libp->para[0]), (double*) G__int(libp->para[1])
, (double*) G__int(libp->para[2]), (bool) G__int(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 100, (double) dmtpc::image::calculations::polygonArea((int) G__int(libp->para[0]), (double*) G__int(libp->para[1])
, (double*) G__int(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_193_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) dmtpc::image::calculations::median((TH2*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_193_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) dmtpc::image::calculations::countUniqueValues((TH1*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}


/* dmtpc::image::io */
static int G__DmtpcImageCint_194_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      dmtpc::image::io::setFriendlyRange((TH2*) G__int(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      dmtpc::image::io::setFriendlyRange((TH2*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_194_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 85, (long) dmtpc::image::io::convertFitsIntoROOT(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, (int) G__int(libp->para[2]), (char) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) dmtpc::image::io::convertFitsIntoROOT(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) dmtpc::image::io::convertFitsIntoROOT(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))));
      break;
   case 1:
      G__letint(result7, 85, (long) dmtpc::image::io::convertFitsIntoROOT(*((TString*) G__int(libp->para[0]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_194_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) dmtpc::image::io::getNumberOfImagesInFitsFile(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_194_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) dmtpc::image::io::getTimeStamp(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_194_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) dmtpc::image::io::getTimeStampUnix(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_194_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) dmtpc::image::io::getFitsHeaderValue(*((TString*) G__int(libp->para[0])), (char*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_194_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) dmtpc::image::io::getFitsHeaderValueIfExists(*((TString*) G__int(libp->para[0])), (char*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_194_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) dmtpc::image::io::convertIntoFits((TH2*) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))));
   return(1 || funcname || hash || result7 || libp) ;
}


/* dmtpc::image::palette */
static int G__DmtpcImageCint_195_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      dmtpc::image::palette::setGrayscale((double) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      dmtpc::image::palette::setGrayscale();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_195_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      dmtpc::image::palette::setGreen((double) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      dmtpc::image::palette::setGreen();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_195_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      dmtpc::image::palette::setBlue((double) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      dmtpc::image::palette::setBlue();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_195_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      dmtpc::image::palette::setRed((double) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      dmtpc::image::palette::setRed();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_195_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      dmtpc::image::palette::setCyan((double) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      dmtpc::image::palette::setCyan();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_195_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      dmtpc::image::palette::setMagenta((double) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      dmtpc::image::palette::setMagenta();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_195_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      dmtpc::image::palette::setYellow((double) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      dmtpc::image::palette::setYellow();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_195_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      dmtpc::image::palette::setStandard1();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_195_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      dmtpc::image::palette::setPalette1();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_195_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      dmtpc::image::palette::setPalette2();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_195_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      dmtpc::image::palette::setPalette3();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_195_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      dmtpc::image::palette::setHot();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_195_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      dmtpc::image::palette::setCool((double) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      dmtpc::image::palette::setCool();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_195_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      dmtpc::image::palette::setJet();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_195_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      dmtpc::image::palette::setCopper();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_195_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      dmtpc::image::palette::setBone();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_195_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      dmtpc::image::palette::setWinter((double) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      dmtpc::image::palette::setWinter();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_195_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      dmtpc::image::palette::setSpring((double) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      dmtpc::image::palette::setSpring();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_195_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      dmtpc::image::palette::setSummer((double) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      dmtpc::image::palette::setSummer();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_195_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      dmtpc::image::palette::setAutumn((double) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      dmtpc::image::palette::setAutumn();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_195_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      dmtpc::image::palette::setMIT((double) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      dmtpc::image::palette::setMIT();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_195_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      dmtpc::image::palette::setColumbia((double) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      dmtpc::image::palette::setColumbia();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_195_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      dmtpc::image::palette::setBU((double) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      dmtpc::image::palette::setBU();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_195_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      dmtpc::image::palette::setRandom((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      dmtpc::image::palette::setRandom();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}


/* dmtpc::image::processing */
static int G__DmtpcImageCint_198_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      dmtpc::image::processing::applyThreshold((TH2*) G__int(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_198_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      dmtpc::image::processing::applyCeiling((TH2*) G__int(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_198_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) dmtpc::image::processing::killPixels((TH2*) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (vector<int>*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) dmtpc::image::processing::killPixels((TH2*) G__int(libp->para[0]), (float) G__double(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_198_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) dmtpc::image::processing::killLonePixels((TH2*) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) dmtpc::image::processing::killLonePixels((TH2*) G__int(libp->para[0]), (float) G__double(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_198_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) dmtpc::image::processing::killLonePixelsMedianDifference((TH2*) G__int(libp->para[0]), (double) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_198_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) dmtpc::image::processing::killLonePixels2((TH2*) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (vector<int>*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) dmtpc::image::processing::killLonePixels2((TH2*) G__int(libp->para[0]), (float) G__double(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_198_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) dmtpc::image::processing::killPixelList((TH2*) G__int(libp->para[0]), *((vector<int>*) G__int(libp->para[1]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_198_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) dmtpc::image::processing::killUnusedPixels((TH2*) G__int(libp->para[0]), *(vector<int>*) libp->para[1].ref
, (int) G__int(libp->para[2]), *((TString*) G__int(libp->para[3]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_198_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) dmtpc::image::processing::killRow((TH2*) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_198_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) dmtpc::image::processing::killColumn((TH2*) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_198_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      dmtpc::image::processing::subtractPedestal((TH2*) G__int(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_198_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) dmtpc::image::processing::topHatBlur((TH2*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_198_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 85, (long) dmtpc::image::processing::gaussianBlur((TH2*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double**) G__int(libp->para[3])
, (dmtpc::image::processing::BLUR_EDGE_BEHAVIOR) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) dmtpc::image::processing::gaussianBlur((TH2*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double**) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) dmtpc::image::processing::gaussianBlur((TH2*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_198_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 85, (long) dmtpc::image::processing::bilateralFilter((TH2*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (dmtpc::image::processing::BILATERAL_VALUE_FN) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) dmtpc::image::processing::bilateralFilter((TH2*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) dmtpc::image::processing::bilateralFilter((TH2*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_198_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 7:
      G__letint(result7, 85, (long) dmtpc::image::processing::fastBilateralFilter(
(TH2*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (dmtpc::image::processing::BILATERAL_VALUE_FN) G__int(libp->para[4]), (int) G__int(libp->para[5])
, (bool) G__int(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 85, (long) dmtpc::image::processing::fastBilateralFilter((TH2*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (dmtpc::image::processing::BILATERAL_VALUE_FN) G__int(libp->para[4]), (int) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 85, (long) dmtpc::image::processing::fastBilateralFilter((TH2*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (dmtpc::image::processing::BILATERAL_VALUE_FN) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) dmtpc::image::processing::fastBilateralFilter((TH2*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) dmtpc::image::processing::fastBilateralFilter((TH2*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_198_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letint(result7, 85, (long) dmtpc::image::processing::edgeDetect((TH2*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (dmtpc::image::processing::GRADIENT_OPERATOR) G__int(libp->para[4]), (unsigned int) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 85, (long) dmtpc::image::processing::edgeDetect((TH2*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (dmtpc::image::processing::GRADIENT_OPERATOR) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) dmtpc::image::processing::edgeDetect((TH2*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_198_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 7:
      G__letint(result7, 85, (long) dmtpc::image::processing::convolve(
(TH2*) G__int(libp->para[0]), (double*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (bool) G__int(libp->para[4]), (dmtpc::image::processing::BLUR_EDGE_BEHAVIOR) G__int(libp->para[5])
, (const char*) G__int(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 85, (long) dmtpc::image::processing::convolve((TH2*) G__int(libp->para[0]), (double*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (bool) G__int(libp->para[4]), (dmtpc::image::processing::BLUR_EDGE_BEHAVIOR) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 85, (long) dmtpc::image::processing::convolve((TH2*) G__int(libp->para[0]), (double*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (bool) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) dmtpc::image::processing::convolve((TH2*) G__int(libp->para[0]), (double*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_198_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      dmtpc::image::processing::gradient((TH2*) G__int(libp->para[0]), (TH2*) G__int(libp->para[1])
, (TH2S*) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (dmtpc::image::processing::GRADIENT_OPERATOR) G__int(libp->para[4]), (unsigned int) G__int(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      dmtpc::image::processing::gradient((TH2*) G__int(libp->para[0]), (TH2*) G__int(libp->para[1])
, (TH2S*) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (dmtpc::image::processing::GRADIENT_OPERATOR) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      dmtpc::image::processing::gradient((TH2*) G__int(libp->para[0]), (TH2*) G__int(libp->para[1])
, (TH2S*) G__int(libp->para[2]), (double) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_198_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 7:
      G__letint(result7, 85, (long) dmtpc::image::processing::anisotropicDiffusion(
(TH2*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (dmtpc::image::processing::ANISOTROPIC_DIFFUSION_FN) G__int(libp->para[3])
, (double) G__double(libp->para[4]), (dmtpc::image::processing::GRADIENT_OPERATOR) G__int(libp->para[5])
, (bool) G__int(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 85, (long) dmtpc::image::processing::anisotropicDiffusion((TH2*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (dmtpc::image::processing::ANISOTROPIC_DIFFUSION_FN) G__int(libp->para[3])
, (double) G__double(libp->para[4]), (dmtpc::image::processing::GRADIENT_OPERATOR) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 85, (long) dmtpc::image::processing::anisotropicDiffusion((TH2*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (dmtpc::image::processing::ANISOTROPIC_DIFFUSION_FN) G__int(libp->para[3])
, (double) G__double(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) dmtpc::image::processing::anisotropicDiffusion((TH2*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (dmtpc::image::processing::ANISOTROPIC_DIFFUSION_FN) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) dmtpc::image::processing::anisotropicDiffusion((TH2*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_198_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 85, (long) dmtpc::image::processing::nonMaximumSuppress((TH2*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (const char*) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) dmtpc::image::processing::nonMaximumSuppress((TH2*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) dmtpc::image::processing::nonMaximumSuppress((TH2*) G__int(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) dmtpc::image::processing::nonMaximumSuppress((TH2*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_198_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 85, (long) dmtpc::image::processing::medianFilter((TH2*) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1])
, (unsigned int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) dmtpc::image::processing::medianFilter((TH2*) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) dmtpc::image::processing::medianFilter((TH2*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_198_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) dmtpc::image::processing::laplacian((TH2*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_198_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) dmtpc::image::processing::laplacianOfGaussian((TH2*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (int) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_198_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      dmtpc::image::processing::fillEdges((TH2*) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      dmtpc::image::processing::fillEdges((TH2*) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      dmtpc::image::processing::fillEdges((TH2*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_198_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 85, (long) dmtpc::image::processing::neighborRatio((TH2*) G__int(libp->para[0]), (bool) G__int(libp->para[1])
, (bool) G__int(libp->para[2]), (bool) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) dmtpc::image::processing::neighborRatio((TH2*) G__int(libp->para[0]), (bool) G__int(libp->para[1])
, (bool) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) dmtpc::image::processing::neighborRatio((TH2*) G__int(libp->para[0]), (bool) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) dmtpc::image::processing::neighborRatio((TH2*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_198_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      dmtpc::image::processing::addGaussianNoise((TH2*) G__int(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      dmtpc::image::processing::addGaussianNoise((TH2*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_198_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) dmtpc::image::processing::binaryThreshold((TH2*) G__int(libp->para[0]), (double) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_198_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) dmtpc::image::processing::WienerGaussDeconvolve((TH2*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}


/* dmtpc::image::tools */
static int G__DmtpcImageCint_264_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) dmtpc::image::tools::newTH2(
(char) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5])
, (int) G__int(libp->para[6]), (double) G__double(libp->para[7])
, (double) G__double(libp->para[8])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_264_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 7:
      G__letint(result7, 85, (long) dmtpc::image::tools::newTH1(
(char) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5])
, (TH1*) G__int(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 85, (long) dmtpc::image::tools::newTH1((char) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_264_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) dmtpc::image::tools::newTH2StealType(
(TH2*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5])
, (int) G__int(libp->para[6]), (double) G__double(libp->para[7])
, (double) G__double(libp->para[8])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_264_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) dmtpc::image::tools::newTH2StealTypeAndSize((TH2*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_264_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) dmtpc::image::tools::newTH2StealSize((TH2*) G__int(libp->para[0]), (char) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_264_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) dmtpc::image::tools::newTH1StealSize((TH1*) G__int(libp->para[0]), (char) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_264_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 7:
      G__letint(result7, 85, (long) dmtpc::image::tools::newTH1StealType(
(TH1*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5])
, (TH1*) G__int(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 85, (long) dmtpc::image::tools::newTH1StealType((TH1*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_264_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) dmtpc::image::tools::TH1GetNbins((TH1*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}


/* dmtpc::image::StitchInfo */
static int G__DmtpcImageCint_268_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   dmtpc::image::StitchInfo* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 15:
     //m: 15
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new dmtpc::image::StitchInfo(
(const char*) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1])
, (dmtpc::image::LensCorrection*) G__int(libp->para[2]), (double*) G__int(libp->para[3])
, (double*) G__int(libp->para[4]), (double*) G__int(libp->para[5])
, (double*) G__int(libp->para[6]), (const int*) G__int(libp->para[7])
, (const int*) G__int(libp->para[8]), (double*) G__int(libp->para[9])
, (double*) G__int(libp->para[10]), (double*) G__int(libp->para[11])
, (double*) G__int(libp->para[12]), (double*) G__int(libp->para[13])
, (unsigned int) G__int(libp->para[14]));
     } else {
       p = new((void*) gvp) dmtpc::image::StitchInfo(
(const char*) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1])
, (dmtpc::image::LensCorrection*) G__int(libp->para[2]), (double*) G__int(libp->para[3])
, (double*) G__int(libp->para[4]), (double*) G__int(libp->para[5])
, (double*) G__int(libp->para[6]), (const int*) G__int(libp->para[7])
, (const int*) G__int(libp->para[8]), (double*) G__int(libp->para[9])
, (double*) G__int(libp->para[10]), (double*) G__int(libp->para[11])
, (double*) G__int(libp->para[12]), (double*) G__int(libp->para[13])
, (unsigned int) G__int(libp->para[14]));
     }
     break;
   case 14:
     //m: 14
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new dmtpc::image::StitchInfo(
(const char*) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1])
, (dmtpc::image::LensCorrection*) G__int(libp->para[2]), (double*) G__int(libp->para[3])
, (double*) G__int(libp->para[4]), (double*) G__int(libp->para[5])
, (double*) G__int(libp->para[6]), (const int*) G__int(libp->para[7])
, (const int*) G__int(libp->para[8]), (double*) G__int(libp->para[9])
, (double*) G__int(libp->para[10]), (double*) G__int(libp->para[11])
, (double*) G__int(libp->para[12]), (double*) G__int(libp->para[13]));
     } else {
       p = new((void*) gvp) dmtpc::image::StitchInfo(
(const char*) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1])
, (dmtpc::image::LensCorrection*) G__int(libp->para[2]), (double*) G__int(libp->para[3])
, (double*) G__int(libp->para[4]), (double*) G__int(libp->para[5])
, (double*) G__int(libp->para[6]), (const int*) G__int(libp->para[7])
, (const int*) G__int(libp->para[8]), (double*) G__int(libp->para[9])
, (double*) G__int(libp->para[10]), (double*) G__int(libp->para[11])
, (double*) G__int(libp->para[12]), (double*) G__int(libp->para[13]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLStitchInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_268_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   dmtpc::image::StitchInfo* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new dmtpc::image::StitchInfo[n];
     } else {
       p = new((void*) gvp) dmtpc::image::StitchInfo[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new dmtpc::image::StitchInfo;
     } else {
       p = new((void*) gvp) dmtpc::image::StitchInfo;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLStitchInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_268_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) dmtpc::image::StitchInfo::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_268_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) dmtpc::image::StitchInfo::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_268_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) dmtpc::image::StitchInfo::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_268_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      dmtpc::image::StitchInfo::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_268_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::image::StitchInfo*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_268_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) dmtpc::image::StitchInfo::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_268_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) dmtpc::image::StitchInfo::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_268_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) dmtpc::image::StitchInfo::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_268_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) dmtpc::image::StitchInfo::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DmtpcImageCint_268_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   dmtpc::image::StitchInfo* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new dmtpc::image::StitchInfo(*(dmtpc::image::StitchInfo*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLStitchInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef dmtpc::image::StitchInfo G__TdmtpccLcLimagecLcLStitchInfo;
static int G__DmtpcImageCint_268_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (dmtpc::image::StitchInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((dmtpc::image::StitchInfo*) (soff+(sizeof(dmtpc::image::StitchInfo)*i)))->~G__TdmtpccLcLimagecLcLStitchInfo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (dmtpc::image::StitchInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((dmtpc::image::StitchInfo*) (soff))->~G__TdmtpccLcLimagecLcLStitchInfo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DmtpcImageCint_268_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   dmtpc::image::StitchInfo* dest = (dmtpc::image::StitchInfo*) G__getstructoffset();
   *dest = *(dmtpc::image::StitchInfo*) libp->para[0].ref;
   const dmtpc::image::StitchInfo& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* dmtpc::image::transform */
static int G__DmtpcImageCint_269_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) dmtpc::image::transform::rotatePerfect((TH2*) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_269_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) dmtpc::image::transform::rotateRight((TH2*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_269_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) dmtpc::image::transform::rotateLeft((TH2*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_269_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) dmtpc::image::transform::rotate180((TH2*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_269_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 85, (long) dmtpc::image::transform::rotateSubdivide((TH2*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (TPoints*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) dmtpc::image::transform::rotateSubdivide((TH2*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (TPoints*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) dmtpc::image::transform::rotateSubdivide((TH2*) G__int(libp->para[0]), (double) G__double(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_269_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 85, (long) dmtpc::image::transform::rotateInterpolate((TH2*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (TPoints*) G__int(libp->para[2]), (TH2*) G__int(libp->para[3])
, (const char*) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) dmtpc::image::transform::rotateInterpolate((TH2*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (TPoints*) G__int(libp->para[2]), (TH2*) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) dmtpc::image::transform::rotateInterpolate((TH2*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (TPoints*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) dmtpc::image::transform::rotateInterpolate((TH2*) G__int(libp->para[0]), (double) G__double(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_269_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 9:
      dmtpc::image::transform::projectAlongLine(
(TH2*) G__int(libp->para[0]), (TH1**) G__int(libp->para[1])
, (TH1**) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5])
, (double) G__double(libp->para[6]), (double) G__double(libp->para[7])
, (const char*) G__int(libp->para[8]));
      G__setnull(result7);
      break;
   case 8:
      dmtpc::image::transform::projectAlongLine(
(TH2*) G__int(libp->para[0]), (TH1**) G__int(libp->para[1])
, (TH1**) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5])
, (double) G__double(libp->para[6]), (double) G__double(libp->para[7]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_269_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) dmtpc::image::transform::resizeImage((TH2*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_269_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) dmtpc::image::transform::copyContent((TH1*) G__int(libp->para[0]), (TH1*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_269_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 85, (long) dmtpc::image::transform::houghTransformLine((TH2*) G__int(libp->para[0]), (TH2*) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (unsigned int) G__int(libp->para[3])
, (unsigned int) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) dmtpc::image::transform::houghTransformLine((TH2*) G__int(libp->para[0]), (TH2*) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (unsigned int) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) dmtpc::image::transform::houghTransformLine((TH2*) G__int(libp->para[0]), (TH2*) G__int(libp->para[1])
, (double) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) dmtpc::image::transform::houghTransformLine((TH2*) G__int(libp->para[0]), (TH2*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) dmtpc::image::transform::houghTransformLine((TH2*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_269_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 85, (long) dmtpc::image::transform::houghTransformEllipse((TH2*) G__int(libp->para[0]), (THnSparse*) G__int(libp->para[1])
, (double) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) dmtpc::image::transform::houghTransformEllipse((TH2*) G__int(libp->para[0]), (THnSparse*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_269_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 85, (long) dmtpc::image::transform::houghTransformCircle((TH2*) G__int(libp->para[0]), (TH3*) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (void (*)(int row) ) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) dmtpc::image::transform::houghTransformCircle((TH2*) G__int(libp->para[0]), (TH3*) G__int(libp->para[1])
, (double) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) dmtpc::image::transform::houghTransformCircle((TH2*) G__int(libp->para[0]), (TH3*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_269_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 7:
      G__letint(result7, 85, (long) dmtpc::image::transform::toPolarCoordinates(
(TH2*) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1])
, (unsigned int) G__int(libp->para[2]), (TPoints*) G__int(libp->para[3])
, (char) G__int(libp->para[4]), (const char*) G__int(libp->para[5])
, (const char*) G__int(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 85, (long) dmtpc::image::transform::toPolarCoordinates((TH2*) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1])
, (unsigned int) G__int(libp->para[2]), (TPoints*) G__int(libp->para[3])
, (char) G__int(libp->para[4]), (const char*) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 85, (long) dmtpc::image::transform::toPolarCoordinates((TH2*) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1])
, (unsigned int) G__int(libp->para[2]), (TPoints*) G__int(libp->para[3])
, (char) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) dmtpc::image::transform::toPolarCoordinates((TH2*) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1])
, (unsigned int) G__int(libp->para[2]), (TPoints*) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) dmtpc::image::transform::toPolarCoordinates((TH2*) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1])
, (unsigned int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) dmtpc::image::transform::toPolarCoordinates((TH2*) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) dmtpc::image::transform::toPolarCoordinates((TH2*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_269_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 85, (long) dmtpc::image::transform::montage((const TH2**) G__int(libp->para[0]), (dmtpc::image::StitchInfo*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (char) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) dmtpc::image::transform::montage((const TH2**) G__int(libp->para[0]), (dmtpc::image::StitchInfo*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) dmtpc::image::transform::montage((const TH2**) G__int(libp->para[0]), (dmtpc::image::StitchInfo*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_269_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 85, (long) dmtpc::image::transform::radonTransform((TH2*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) dmtpc::image::transform::radonTransform((TH2*) G__int(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) dmtpc::image::transform::radonTransform((TH2*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_269_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) dmtpc::image::transform::crop((TH2*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_269_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) dmtpc::image::transform::cropZero((TH2*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_269_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letint(result7, 85, (long) dmtpc::image::transform::zeroPad((TH2*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (const char*) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 85, (long) dmtpc::image::transform::zeroPad((TH2*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) dmtpc::image::transform::zeroPad((TH2*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (float) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) dmtpc::image::transform::zeroPad((TH2*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_269_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 85, (long) dmtpc::image::transform::zeroPadSquare((TH2*) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (const char*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) dmtpc::image::transform::zeroPadSquare((TH2*) G__int(libp->para[0]), (float) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) dmtpc::image::transform::zeroPadSquare((TH2*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_269_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) dmtpc::image::transform::histApply((TH2*) G__int(libp->para[0]), (double (*) (double)) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_269_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) dmtpc::image::transform::histApply((TH2*) G__int(libp->para[0]), (double (*) (double,double)) G__int(libp->para[1])
, (double) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_269_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) dmtpc::image::transform::histSqrt((TH2*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_269_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) dmtpc::image::transform::histAbs((TH2*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_269_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) dmtpc::image::transform::histPow((TH2*) G__int(libp->para[0]), (double) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_269_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 85, (long) dmtpc::image::transform::fftshift((TH2*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (bool) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) dmtpc::image::transform::fftshift((TH2*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) dmtpc::image::transform::fftshift((TH2*) G__int(libp->para[0]), (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) dmtpc::image::transform::fftshift((TH2*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_269_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) dmtpc::image::transform::padImage((TH2*) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}


/* dmtpc::image::interpolation */
static int G__DmtpcImageCint_271_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letdouble(result7, 100, (double) dmtpc::image::interpolation::interpolate((TH2*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (const char*) G__int(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 100, (double) dmtpc::image::interpolation::interpolate((TH2*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_271_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) dmtpc::image::interpolation::testInterpolate((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}


/* dmtpc::image::LensCorrection */
static int G__DmtpcImageCint_272_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   dmtpc::image::LensCorrection* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new dmtpc::image::LensCorrection(
(const char*) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1])
, (double*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) dmtpc::image::LensCorrection(
(const char*) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1])
, (double*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new dmtpc::image::LensCorrection((const char*) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) dmtpc::image::LensCorrection((const char*) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new dmtpc::image::LensCorrection((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) dmtpc::image::LensCorrection((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new dmtpc::image::LensCorrection[n];
       } else {
         p = new((void*) gvp) dmtpc::image::LensCorrection[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new dmtpc::image::LensCorrection;
       } else {
         p = new((void*) gvp) dmtpc::image::LensCorrection;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLLensCorrection));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_272_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::image::LensCorrection*) G__getstructoffset())->setParameter((unsigned int) G__int(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_272_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::image::LensCorrection*) G__getstructoffset())->setParameters((double*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_272_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 85, (long) ((const dmtpc::image::LensCorrection*) G__getstructoffset())->correctDistortion((TH2*) G__int(libp->para[0]), (TH2*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (double*) G__int(libp->para[3])
, (bool) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) ((const dmtpc::image::LensCorrection*) G__getstructoffset())->correctDistortion((TH2*) G__int(libp->para[0]), (TH2*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (double*) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) ((const dmtpc::image::LensCorrection*) G__getstructoffset())->correctDistortion((TH2*) G__int(libp->para[0]), (TH2*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) ((const dmtpc::image::LensCorrection*) G__getstructoffset())->correctDistortion((TH2*) G__int(libp->para[0]), (TH2*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((const dmtpc::image::LensCorrection*) G__getstructoffset())->correctDistortion((TH2*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_272_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const dmtpc::image::LensCorrection*) G__getstructoffset())->distortCoords((double*) G__int(libp->para[0]), (double*) G__int(libp->para[1])
, (double*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_272_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const dmtpc::image::LensCorrection*) G__getstructoffset())->unDistortCoords((double*) G__int(libp->para[0]), (double*) G__int(libp->para[1])
, (double*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_272_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) dmtpc::image::LensCorrection::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_272_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) dmtpc::image::LensCorrection::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_272_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) dmtpc::image::LensCorrection::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_272_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      dmtpc::image::LensCorrection::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_272_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::image::LensCorrection*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_272_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) dmtpc::image::LensCorrection::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_272_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) dmtpc::image::LensCorrection::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_272_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) dmtpc::image::LensCorrection::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcImageCint_272_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) dmtpc::image::LensCorrection::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DmtpcImageCint_272_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   dmtpc::image::LensCorrection* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new dmtpc::image::LensCorrection(*(dmtpc::image::LensCorrection*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLLensCorrection));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef dmtpc::image::LensCorrection G__TdmtpccLcLimagecLcLLensCorrection;
static int G__DmtpcImageCint_272_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (dmtpc::image::LensCorrection*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((dmtpc::image::LensCorrection*) (soff+(sizeof(dmtpc::image::LensCorrection)*i)))->~G__TdmtpccLcLimagecLcLLensCorrection();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (dmtpc::image::LensCorrection*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((dmtpc::image::LensCorrection*) (soff))->~G__TdmtpccLcLimagecLcLLensCorrection();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DmtpcImageCint_272_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   dmtpc::image::LensCorrection* dest = (dmtpc::image::LensCorrection*) G__getstructoffset();
   *dest = *(dmtpc::image::LensCorrection*) libp->para[0].ref;
   const dmtpc::image::LensCorrection& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* dmtpc::image */

/* dmtpc::image::calculations */

/* dmtpc::image::io */

/* dmtpc::image::palette */

/* dmtpc::image::processing */

/* dmtpc::image::tools */

/* dmtpc::image::StitchInfo */

/* dmtpc::image::transform */

/* dmtpc::image::interpolation */

/* dmtpc::image::LensCorrection */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncDmtpcImageCint {
 public:
  G__Sizep2memfuncDmtpcImageCint(): p(&G__Sizep2memfuncDmtpcImageCint::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncDmtpcImageCint::*p)();
};

size_t G__get_sizep2memfuncDmtpcImageCint()
{
  G__Sizep2memfuncDmtpcImageCint a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceDmtpcImageCint() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLStitchInfo))) {
     dmtpc::image::StitchInfo *G__Lderived;
     G__Lderived=(dmtpc::image::StitchInfo*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLStitchInfo),G__get_linked_tagnum(&G__DmtpcImageCintLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLStitchInfo),G__get_linked_tagnum(&G__DmtpcImageCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLLensCorrection))) {
     dmtpc::image::LensCorrection *G__Lderived;
     G__Lderived=(dmtpc::image::LensCorrection*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLLensCorrection),G__get_linked_tagnum(&G__DmtpcImageCintLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLLensCorrection),G__get_linked_tagnum(&G__DmtpcImageCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableDmtpcImageCint() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__DmtpcImageCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcImageCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcImageCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcImageCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcImageCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__DmtpcImageCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcImageCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcImageCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcImageCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcImageCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("BILATERAL_VALUE_FN",117,G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLprocessingcLcLBILATERAL_VALUE_FN),0,G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLprocessing));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__DmtpcImageCintLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcImageCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcImageCintLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcImageCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcImageCintLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("BLUR_EDGE_BEHAVIOR",117,G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLprocessingcLcLBLUR_EDGE_BEHAVIOR),0,G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLprocessing));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("GRADIENT_OPERATOR",117,G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLprocessingcLcLGRADIENT_OPERATOR),0,G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLprocessing));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("ANISOTROPIC_DIFFUSION_FN",117,G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLprocessingcLcLANISOTROPIC_DIFFUSION_FN),0,G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLprocessing));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__DmtpcImageCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__DmtpcImageCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__DmtpcImageCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__DmtpcImageCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__DmtpcImageCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__DmtpcImageCintLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__DmtpcImageCintLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__DmtpcImageCintLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__DmtpcImageCintLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("ELLIPSE_PARAMETERS",117,G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLtransformcLcLELLIPSE_PARAMETERS),0,G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLtransform));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("void (*)(int row) ",49,-1,0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("double (*) (double)",49,-1,0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("double (*) (double,double)",49,-1,0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::vector<double> >",117,G__get_linked_tagnum(&G__DmtpcImageCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<double> >",117,G__get_linked_tagnum(&G__DmtpcImageCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcImageCintLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcImageCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcImageCintLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcImageCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<double,allocator<double> > >",117,G__get_linked_tagnum(&G__DmtpcImageCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::vector<std::vector<double> > >",117,G__get_linked_tagnum(&G__DmtpcImageCintLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<vector<double> > >",117,G__get_linked_tagnum(&G__DmtpcImageCintLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcImageCintLN_reverse_iteratorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcImageCintLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcImageCintLN_reverse_iteratorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcImageCintLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > >",117,G__get_linked_tagnum(&G__DmtpcImageCintLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TH2F*>",117,G__get_linked_tagnum(&G__DmtpcImageCintLN_vectorlETH2FmUcOallocatorlETH2FmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcImageCintLN_reverse_iteratorlEvectorlETH2FmUcOallocatorlETH2FmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcImageCintLN_vectorlETH2FmUcOallocatorlETH2FmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcImageCintLN_reverse_iteratorlEvectorlETH2FmUcOallocatorlETH2FmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcImageCintLN_vectorlETH2FmUcOallocatorlETH2FmUgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* dmtpc::image */
static void G__setup_memvardmtpccLcLimage(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimage));
   {
   }
   G__tag_memvar_reset();
}


   /* dmtpc::image::calculations */
static void G__setup_memvardmtpccLcLimagecLcLcalculations(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLcalculations));
   {
   }
   G__tag_memvar_reset();
}


   /* dmtpc::image::io */
static void G__setup_memvardmtpccLcLimagecLcLio(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLio));
   {
   }
   G__tag_memvar_reset();
}


   /* dmtpc::image::palette */
static void G__setup_memvardmtpccLcLimagecLcLpalette(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLpalette));
   {
   }
   G__tag_memvar_reset();
}


   /* dmtpc::image::processing */
static void G__setup_memvardmtpccLcLimagecLcLprocessing(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLprocessing));
   {
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLprocessingcLcLBILATERAL_VALUE_FN),-1,-2,1,G__FastAllocString(2048).Format("BILATERAL_GAUSSIAN=%lldLL",(long long)dmtpc::image::processing::BILATERAL_GAUSSIAN).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLprocessingcLcLBILATERAL_VALUE_FN),-1,-2,1,G__FastAllocString(2048).Format("BILATERAL_CAUCHY=%lldLL",(long long)dmtpc::image::processing::BILATERAL_CAUCHY).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLprocessingcLcLBILATERAL_VALUE_FN),-1,-2,1,G__FastAllocString(2048).Format("BILATERAL_BOX=%lldLL",(long long)dmtpc::image::processing::BILATERAL_BOX).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLprocessingcLcLBILATERAL_VALUE_FN),-1,-2,1,G__FastAllocString(2048).Format("BILATERAL_TRIANGLE=%lldLL",(long long)dmtpc::image::processing::BILATERAL_TRIANGLE).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLprocessingcLcLBILATERAL_VALUE_FN),-1,-2,1,G__FastAllocString(2048).Format("BILATERAL_TUKEY=%lldLL",(long long)dmtpc::image::processing::BILATERAL_TUKEY).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLprocessingcLcLBLUR_EDGE_BEHAVIOR),-1,-2,1,G__FastAllocString(2048).Format("RENORMALIZE=%lldLL",(long long)dmtpc::image::processing::RENORMALIZE).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLprocessingcLcLBLUR_EDGE_BEHAVIOR),-1,-2,1,G__FastAllocString(2048).Format("MIRROR_EDGES=%lldLL",(long long)dmtpc::image::processing::MIRROR_EDGES).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLprocessingcLcLBLUR_EDGE_BEHAVIOR),-1,-2,1,G__FastAllocString(2048).Format("EXTEND_EDGES=%lldLL",(long long)dmtpc::image::processing::EXTEND_EDGES).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLprocessingcLcLBLUR_EDGE_BEHAVIOR),-1,-2,1,G__FastAllocString(2048).Format("ZERO_EDGES=%lldLL",(long long)dmtpc::image::processing::ZERO_EDGES).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLprocessingcLcLGRADIENT_OPERATOR),-1,-2,1,G__FastAllocString(2048).Format("SOBEL=%lldLL",(long long)dmtpc::image::processing::SOBEL).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLprocessingcLcLGRADIENT_OPERATOR),-1,-2,1,G__FastAllocString(2048).Format("PREWITT=%lldLL",(long long)dmtpc::image::processing::PREWITT).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLprocessingcLcLGRADIENT_OPERATOR),-1,-2,1,G__FastAllocString(2048).Format("SCHARR=%lldLL",(long long)dmtpc::image::processing::SCHARR).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLprocessingcLcLANISOTROPIC_DIFFUSION_FN),-1,-2,1,G__FastAllocString(2048).Format("GAUSSIAN=%lldLL",(long long)dmtpc::image::processing::GAUSSIAN).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLprocessingcLcLANISOTROPIC_DIFFUSION_FN),-1,-2,1,G__FastAllocString(2048).Format("LORENTZIAN=%lldLL",(long long)dmtpc::image::processing::LORENTZIAN).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLprocessingcLcLANISOTROPIC_DIFFUSION_FN),-1,-2,1,G__FastAllocString(2048).Format("TUKEY=%lldLL",(long long)dmtpc::image::processing::TUKEY).data(),0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* dmtpc::image::tools */
static void G__setup_memvardmtpccLcLimagecLcLtools(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLtools));
   {
   }
   G__tag_memvar_reset();
}


   /* dmtpc::image::StitchInfo */
static void G__setup_memvardmtpccLcLimagecLcLStitchInfo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLStitchInfo));
   { dmtpc::image::StitchInfo *p; p=(dmtpc::image::StitchInfo*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->nimages)-(long)(p)),104,0,0,-1,-1,-1,1,"nimages=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->corners)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcImageCintLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR),G__defined_typename("vector<std::vector<std::vector<double> > >"),-1,1,"corners=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xmins)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcImageCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"xmins=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xmaxs)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcImageCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"xmaxs=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ymins)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcImageCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"ymins=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ymaxs)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcImageCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"ymaxs=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nbinsx)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcImageCintLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,1,"nbinsx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nbinsy)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcImageCintLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,1,"nbinsy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xorigin)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcImageCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"xorigin=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->yorigin)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcImageCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"yorigin=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rotation)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcImageCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"rotation=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sintheta)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcImageCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"sintheta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->costheta)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcImageCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"costheta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->scale)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcImageCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"scale=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->weight)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcImageCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"weight=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xwidths)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcImageCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"xwidths=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ywidths)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcImageCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"ywidths=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->frac)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcImageCintLN_vectorlETH2FmUcOallocatorlETH2FmUgRsPgR),G__defined_typename("vector<TH2F*>"),-1,1,"frac=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->stitched_xmax)-(long)(p)),100,0,0,-1,-1,-1,1,"stitched_xmax=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->stitched_ymax)-(long)(p)),100,0,0,-1,-1,-1,1,"stitched_ymax=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->stitched_xmin)-(long)(p)),100,0,0,-1,-1,-1,1,"stitched_xmin=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->stitched_ymin)-(long)(p)),100,0,0,-1,-1,-1,1,"stitched_ymin=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->stitched_nbinsx)-(long)(p)),104,0,0,-1,-1,-1,1,"stitched_nbinsx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->stitched_nbinsy)-(long)(p)),104,0,0,-1,-1,-1,1,"stitched_nbinsy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->weight_sum)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DmtpcImageCintLN_TH2F),-1,-1,1,"weight_sum=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DmtpcImageCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* dmtpc::image::transform */
static void G__setup_memvardmtpccLcLimagecLcLtransform(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLtransform));
   {
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLtransformcLcLELLIPSE_PARAMETERS),-1,-2,1,G__FastAllocString(2048).Format("ELL_X0=%lldLL",(long long)dmtpc::image::transform::ELL_X0).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLtransformcLcLELLIPSE_PARAMETERS),-1,-2,1,G__FastAllocString(2048).Format("ELL_Y0=%lldLL",(long long)dmtpc::image::transform::ELL_Y0).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLtransformcLcLELLIPSE_PARAMETERS),-1,-2,1,G__FastAllocString(2048).Format("ELL_A=%lldLL",(long long)dmtpc::image::transform::ELL_A).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLtransformcLcLELLIPSE_PARAMETERS),-1,-2,1,G__FastAllocString(2048).Format("ELL_B=%lldLL",(long long)dmtpc::image::transform::ELL_B).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLtransformcLcLELLIPSE_PARAMETERS),-1,-2,1,G__FastAllocString(2048).Format("ELL_PHI=%lldLL",(long long)dmtpc::image::transform::ELL_PHI).data(),0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* dmtpc::image::interpolation */
static void G__setup_memvardmtpccLcLimagecLcLinterpolation(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLinterpolation));
   {
   }
   G__tag_memvar_reset();
}


   /* dmtpc::image::LensCorrection */
static void G__setup_memvardmtpccLcLimagecLcLLensCorrection(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLLensCorrection));
   { dmtpc::image::LensCorrection *p; p=(dmtpc::image::LensCorrection*)0x1000; if (p) { }
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,4,"_order=",0,(char*)NULL);
   G__memvar_setup((void*)0,68,0,0,-1,-1,-1,4,"_coeffs=",0,"[_order+1]; ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DmtpcImageCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarDmtpcImageCint() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncdmtpccLcLimage(void) {
   /* dmtpc::image */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimage));
   G__tag_memfunc_reset();
}

static void G__setup_memfuncdmtpccLcLimagecLcLcalculations(void) {
   /* dmtpc::image::calculations */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLcalculations));
   G__memfunc_setup("hasNeighbor",1130,G__DmtpcImageCint_193_0_1, 103, -1, -1, 0, 4, 1, 1, 0, 
"U 'TH1' - 10 - image i - - 0 - xbin "
"f - - 0 - threshold i - - 0 '2' minNeighbors", (char*)NULL, (void*) G__func2void( (bool (*)(const TH1*, int, float, int))(&dmtpc::image::calculations::hasNeighbor) ), 0);
   G__memfunc_setup("hasNeighbor",1130,G__DmtpcImageCint_193_0_2, 103, -1, -1, 0, 5, 1, 1, 0, 
"U 'TH2' - 10 - image i - - 0 - xbin "
"i - - 0 - ybin f - - 0 - threshold "
"i - - 0 '2' minNeighbors", (char*)NULL, (void*) G__func2void( (bool (*)(const TH2*, int, int, float, int))(&dmtpc::image::calculations::hasNeighbor) ), 0);
   G__memfunc_setup("calcSkewness",1254,G__DmtpcImageCint_193_0_3, 100, -1, -1, 0, 4, 1, 1, 0, 
"U 'TH1' - 0 - strip i - - 0 - minx "
"i - - 0 - maxx d - - 0 '0' bkg", (char*)NULL, (void*) G__func2void( (double (*)(TH1*, int, int, double))(&dmtpc::image::calculations::calcSkewness) ), 0);
   G__memfunc_setup("calcSkewness2D",1372,G__DmtpcImageCint_193_0_4, 100, -1, -1, 0, 4, 1, 1, 0, 
"U 'TH2' - 0 - image i - - 0 - minbin "
"i - - 0 - maxbin d - - 0 '0' bkg", (char*)NULL, (void*) G__func2void( (double (*)(TH2*, int, int, double))(&dmtpc::image::calculations::calcSkewness2D) ), 0);
   G__memfunc_setup("calcPixelDistance",1728,G__DmtpcImageCint_193_0_5, 100, -1, -1, 0, 3, 1, 1, 0, 
"U 'TH2' - 10 - image i - - 0 - i "
"i - - 0 - j", (char*)NULL, (void*) G__func2void( (double (*)(const TH2*, int, int))(&dmtpc::image::calculations::calcPixelDistance) ), 0);
   G__memfunc_setup("calcIntensity2D",1488,G__DmtpcImageCint_193_0_6, 100, -1, -1, 0, 5, 1, 1, 0, 
"U 'TH2' - 10 - image i - - 0 - imax "
"i - - 0 - jmax i - - 0 - sidebandBins "
"f - - 1 - bg", (char*)NULL, (void*) G__func2void( (double (*)(const TH2*, int, int, int, float&))(&dmtpc::image::calculations::calcIntensity2D) ), 0);
   G__memfunc_setup("countSegmentLength",1886,G__DmtpcImageCint_193_0_7, 121, -1, -1, 0, 5, 1, 1, 0, 
"U 'TH1' - 10 - project f - - 0 - threshold "
"i - - 0 - pixelsBelowThreshold i - - 1 - iR "
"i - - 1 - iL", (char*)NULL, (void*) G__func2void( (void (*)(const TH1*, float, int, int&, int&))(&dmtpc::image::calculations::countSegmentLength) ), 0);
   G__memfunc_setup("countSegmentLength2D",2004,G__DmtpcImageCint_193_0_8, 121, -1, -1, 0, 4, 1, 1, 0, 
"U 'TH2' - 10 - project f - - 0 - threshold "
"i - - 1 - iR i - - 1 - iL", (char*)NULL, (void*) G__func2void( (void (*)(const TH2*, float, int&, int&))(&dmtpc::image::calculations::countSegmentLength2D) ), 0);
   G__memfunc_setup("findMaximum",1151,G__DmtpcImageCint_193_0_9, 105, -1, -1, 0, 3, 1, 1, 0, 
"U 'TH1' - 10 - project f - - 0 - threshold "
"i - - 0 - minNeighbors", (char*)NULL, (void*) G__func2void( (int (*)(const TH1*, float, int))(&dmtpc::image::calculations::findMaximum) ), 0);
   G__memfunc_setup("findMaximum2D",1269,G__DmtpcImageCint_193_0_10, 105, -1, -1, 0, 3, 1, 1, 0, 
"U 'TH2' - 10 - project f - - 0 - threshold "
"i - - 0 - minNeighbors", (char*)NULL, (void*) G__func2void( (int (*)(const TH2*, float, int))(&dmtpc::image::calculations::findMaximum2D) ), 0);
   G__memfunc_setup("rotateTCutG",1110,G__DmtpcImageCint_193_0_11, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'TCutG' - 0 - cut f - - 0 - ang_rad "
"U 'TPoints' - 0 '0' pt", (char*)NULL, (void*) G__func2void( (void (*)(TCutG*, float, TPoints*))(&dmtpc::image::calculations::rotateTCutG) ), 0);
   G__memfunc_setup("getCenter",929,G__DmtpcImageCint_193_0_12, 85, G__get_linked_tagnum(&G__DmtpcImageCintLN_TPoints), -1, 0, 1, 1, 1, 0, "U 'TH2' - 10 - img", (char*)NULL, (void*) G__func2void( (TPoints* (*)(const TH2*))(&dmtpc::image::calculations::getCenter) ), 0);
   G__memfunc_setup("getCenter",929,G__DmtpcImageCint_193_0_13, 85, G__get_linked_tagnum(&G__DmtpcImageCintLN_TPoints), -1, 0, 1, 1, 1, 0, "U 'TCutG' - 0 - cut", (char*)NULL, (void*) G__func2void( (TPoints* (*)(TCutG*))(&dmtpc::image::calculations::getCenter) ), 0);
   G__memfunc_setup("getExtent",952,G__DmtpcImageCint_193_0_14, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'TCutG' - 0 - cut U 'TPoints' - 0 - xrng "
"U 'TPoints' - 0 - yrng", (char*)NULL, (void*) G__func2void( (void (*)(TCutG*, TPoints*, TPoints*))(&dmtpc::image::calculations::getExtent) ), 0);
   G__memfunc_setup("countPix",858,G__DmtpcImageCint_193_0_15, 105, -1, -1, 0, 3, 1, 1, 0, 
"U 'TH2' - 10 - img U 'TCutG' - 0 '0' cut "
"g - - 0 'true' cutint", (char*)NULL, (void*) G__func2void( (int (*)(const TH2*, TCutG*, bool))(&dmtpc::image::calculations::countPix) ), 0);
   G__memfunc_setup("makeTCutGRect",1267,G__DmtpcImageCint_193_0_16, 85, G__get_linked_tagnum(&G__DmtpcImageCintLN_TCutG), -1, 0, 5, 1, 1, 0, 
"u 'TString' - 0 - name f - - 0 - x0 "
"f - - 0 - y0 f - - 0 - x1 "
"f - - 0 - y1", (char*)NULL, (void*) G__func2void( (TCutG* (*)(TString, float, float, float, float))(&dmtpc::image::calculations::makeTCutGRect) ), 0);
   G__memfunc_setup("makeAnnulusSector",1780,G__DmtpcImageCint_193_0_17, 85, G__get_linked_tagnum(&G__DmtpcImageCintLN_TCutG), -1, 0, 6, 1, 1, 0, 
"u 'TString' - 0 - name f - 'Float_t' 0 - x0 "
"f - 'Float_t' 0 - y0 f - 'Float_t' 0 - r1 "
"f - 'Float_t' 0 - r2 U 'TH2' - 0 - img", (char*)NULL, (void*) G__func2void( (TCutG* (*)(TString, Float_t, Float_t, Float_t, Float_t, TH2*))(&dmtpc::image::calculations::makeAnnulusSector) ), 0);
   G__memfunc_setup("maxProjectedStep",1666,G__DmtpcImageCint_193_0_18, 100, -1, -1, 0, 2, 1, 1, 0, 
"U 'TH2' - 10 - img c - - 0 '0' axis", (char*)NULL, (void*) G__func2void( (double (*)(const TH2*, char))(&dmtpc::image::calculations::maxProjectedStep) ), 0);
   G__memfunc_setup("principalAxes",1363,G__DmtpcImageCint_193_0_19, 121, -1, -1, 0, 4, 1, 1, 0, 
"U 'TH2' - 10 - image f - - 0 - threshold "
"f - - 1 - Ix f - - 1 - Iy", (char*)NULL, (void*) G__func2void( (void (*)(const TH2*, float, float&, float&))(&dmtpc::image::calculations::principalAxes) ), 0);
   G__memfunc_setup("cosRecoil2D",1049,G__DmtpcImageCint_193_0_20, 100, -1, -1, 0, 3, 1, 1, 0, 
"U 'TH2' - 10 - image i - - 0 - imax "
"i - - 0 - jmax", (char*)NULL, (void*) G__func2void( (double (*)(const TH2*, int, int))(&dmtpc::image::calculations::cosRecoil2D) ), 0);
   G__memfunc_setup("makeProfile",1135,G__DmtpcImageCint_193_0_21, 85, G__get_linked_tagnum(&G__DmtpcImageCintLN_TH1F), -1, 0, 7, 1, 1, 0, 
"U 'TGraph' - 0 - graph i - - 0 - nx "
"f - - 0 - minx f - - 0 - maxx "
"f - - 0 - miny f - - 0 - maxy "
"U 'TCanvas' - 0 '0' c", (char*)NULL, (void*) G__func2void( (TH1F* (*)(TGraph*, int, float, float, float, float, TCanvas*))(&dmtpc::image::calculations::makeProfile) ), 0);
   G__memfunc_setup("getMean",705,G__DmtpcImageCint_193_0_22, 100, -1, -1, 0, 3, 1, 1, 0, 
"U 'TH2' - 10 - image U 'TCutG' - 0 '0' cut "
"g - - 0 'true' cutint", (char*)NULL, (void*) G__func2void( (double (*)(const TH2*, TCutG*, bool))(&dmtpc::image::calculations::getMean) ), 0);
   G__memfunc_setup("getRMS",562,G__DmtpcImageCint_193_0_23, 100, -1, -1, 0, 3, 1, 1, 0, 
"U 'TH2' - 10 - image U 'TCutG' - 0 '0' cut "
"g - - 0 'true' cutint", (char*)NULL, (void*) G__func2void( (double (*)(const TH2*, TCutG*, bool))(&dmtpc::image::calculations::getRMS) ), 0);
   G__memfunc_setup("meanRMSNoOutliers",1703,G__DmtpcImageCint_193_0_24, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'TH2' - 10 - image d - - 1 - mean "
"d - - 1 - rms", (char*)NULL, (void*) G__func2void( (void (*)(const TH2*, double&, double&))(&dmtpc::image::calculations::meanRMSNoOutliers) ), 0);
   G__memfunc_setup("pixelHist",954,G__DmtpcImageCint_193_0_25, 85, G__get_linked_tagnum(&G__DmtpcImageCintLN_TH1F), -1, 0, 6, 1, 1, 0, 
"U 'TH2' - 10 - image i - - 0 '100' nbins "
"f - 'Float_t' 0 '9999' minVal f - 'Float_t' 0 '-9999' maxVal "
"U 'TCutG' - 0 '0' cut g - - 0 'true' cutint", (char*)NULL, (void*) G__func2void( (TH1F* (*)(const TH2*, int, Float_t, Float_t, TCutG*, bool))(&dmtpc::image::calculations::pixelHist) ), 0);
   G__memfunc_setup("distanceToImageEdge",1894,G__DmtpcImageCint_193_0_26, 105, -1, -1, 0, 2, 1, 1, 0, 
"U 'TH2' - 10 - image i - - 0 - ibin", (char*)NULL, (void*) G__func2void( (int (*)(const TH2*, int))(&dmtpc::image::calculations::distanceToImageEdge) ), 0);
   G__memfunc_setup("rectIntersectionArea",2078,G__DmtpcImageCint_193_0_27, 100, -1, -1, 0, 4, 1, 1, 0, 
"D - - 0 - xcoords1 D - - 0 - ycoords1 "
"D - - 0 - xcoords2 D - - 0 - ycoords2", (char*)NULL, (void*) G__func2void( (double (*)(double*, double*, double*, double*))(&dmtpc::image::calculations::rectIntersectionArea) ), 0);
   G__memfunc_setup("polygonArea",1153,G__DmtpcImageCint_193_0_28, 100, -1, -1, 0, 4, 1, 1, 0, 
"i - - 0 - n D - - 10 - x "
"D - - 10 - y g - - 0 'true' ordered", (char*)NULL, (void*) G__func2void( (double (*)(int, const double*, const double*, bool))(&dmtpc::image::calculations::polygonArea) ), 0);
   G__memfunc_setup("median",622,G__DmtpcImageCint_193_0_29, 100, -1, -1, 0, 1, 1, 1, 0, "U 'TH2' - 10 - img", (char*)NULL, (void*) G__func2void( (double (*)(const TH2*))(&dmtpc::image::calculations::median) ), 0);
   G__memfunc_setup("countUniqueValues",1808,G__DmtpcImageCint_193_0_30, 105, -1, -1, 0, 1, 1, 1, 0, "U 'TH1' - 10 - in", (char*)NULL, (void*) G__func2void( (int (*)(const TH1*))(&dmtpc::image::calculations::countUniqueValues) ), 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncdmtpccLcLimagecLcLio(void) {
   /* dmtpc::image::io */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLio));
   G__memfunc_setup("setFriendlyRange",1654,G__DmtpcImageCint_194_0_1, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'TH2' - 0 - img f - - 0 '3.0' nsigma", (char*)NULL, (void*) G__func2void( (void (*)(TH2*, float))(&dmtpc::image::io::setFriendlyRange) ), 0);
   G__memfunc_setup("convertFitsIntoROOT",1909,G__DmtpcImageCint_194_0_2, 85, G__get_linked_tagnum(&G__DmtpcImageCintLN_TH2), -1, 0, 4, 1, 1, 0, 
"u 'TString' - 0 - fitsFile u 'TString' - 0 '\"imageHisto\"' histName "
"i - - 0 '0' imageNumber c - - 0 ''F'' type", (char*)NULL, (void*) G__func2void( (TH2* (*)(TString, TString, int, char))(&dmtpc::image::io::convertFitsIntoROOT) ), 0);
   G__memfunc_setup("getNumberOfImagesInFitsFile",2689,G__DmtpcImageCint_194_0_3, 105, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - fitsFile", (char*)NULL, (void*) G__func2void( (int (*)(TString))(&dmtpc::image::io::getNumberOfImagesInFitsFile) ), 0);
   G__memfunc_setup("getTimeStamp",1236,G__DmtpcImageCint_194_0_4, 67, -1, -1, 0, 1, 1, 1, 1, "u 'TString' - 0 - fitsFile", (char*)NULL, (void*) G__func2void( (const char* (*)(TString))(&dmtpc::image::io::getTimeStamp) ), 0);
   G__memfunc_setup("getTimeStampUnix",1656,G__DmtpcImageCint_194_0_5, 108, -1, G__defined_typename("time_t"), 0, 1, 1, 1, 0, "u 'TString' - 0 - fitsFile", (char*)NULL, (void*) G__func2void( (time_t (*)(TString))(&dmtpc::image::io::getTimeStampUnix) ), 0);
   G__memfunc_setup("getFitsHeaderValue",1820,G__DmtpcImageCint_194_0_6, 67, -1, -1, 0, 2, 1, 1, 0, 
"u 'TString' - 0 - fitsFile C - - 0 - key", (char*)NULL, (void*) G__func2void( (char* (*)(TString, char*))(&dmtpc::image::io::getFitsHeaderValue) ), 0);
   G__memfunc_setup("getFitsHeaderValueIfExists",2635,G__DmtpcImageCint_194_0_7, 67, -1, -1, 0, 2, 1, 1, 0, 
"u 'TString' - 0 - fitsFile C - - 0 - key", (char*)NULL, (void*) G__func2void( (char* (*)(TString, char*))(&dmtpc::image::io::getFitsHeaderValueIfExists) ), 0);
   G__memfunc_setup("convertIntoFits",1585,G__DmtpcImageCint_194_0_8, 105, -1, -1, 0, 2, 1, 1, 0, 
"U 'TH2' - 10 - image u 'TString' - 0 - fileName", (char*)NULL, (void*) G__func2void( (int (*)(const TH2*, TString))(&dmtpc::image::io::convertIntoFits) ), 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncdmtpccLcLimagecLcLpalette(void) {
   /* dmtpc::image::palette */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLpalette));
   G__memfunc_setup("setGrayscale",1255,G__DmtpcImageCint_195_0_1, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 '1' p", (char*)NULL, (void*) G__func2void( (void (*)(double))(&dmtpc::image::palette::setGrayscale) ), 0);
   G__memfunc_setup("setGreen",829,G__DmtpcImageCint_195_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 '1' p", (char*)NULL, (void*) G__func2void( (void (*)(double))(&dmtpc::image::palette::setGreen) ), 0);
   G__memfunc_setup("setBlue",724,G__DmtpcImageCint_195_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 '1' p", (char*)NULL, (void*) G__func2void( (void (*)(double))(&dmtpc::image::palette::setBlue) ), 0);
   G__memfunc_setup("setRed",615,G__DmtpcImageCint_195_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 '1' p", (char*)NULL, (void*) G__func2void( (void (*)(double))(&dmtpc::image::palette::setRed) ), 0);
   G__memfunc_setup("setCyan",727,G__DmtpcImageCint_195_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 '1' p", (char*)NULL, (void*) G__func2void( (void (*)(double))(&dmtpc::image::palette::setCyan) ), 0);
   G__memfunc_setup("setMagenta",1033,G__DmtpcImageCint_195_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 '1' p", (char*)NULL, (void*) G__func2void( (void (*)(double))(&dmtpc::image::palette::setMagenta) ), 0);
   G__memfunc_setup("setYellow",968,G__DmtpcImageCint_195_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 '1' p", (char*)NULL, (void*) G__func2void( (void (*)(double))(&dmtpc::image::palette::setYellow) ), 0);
   G__memfunc_setup("setStandard1",1198,G__DmtpcImageCint_195_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&dmtpc::image::palette::setStandard1) ), 0);
   G__memfunc_setup("setPalette1",1100,G__DmtpcImageCint_195_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", "Blue", (void*) G__func2void( (void (*)())(&dmtpc::image::palette::setPalette1) ), 0);
   G__memfunc_setup("setPalette2",1101,G__DmtpcImageCint_195_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", "Pink/green", (void*) G__func2void( (void (*)())(&dmtpc::image::palette::setPalette2) ), 0);
   G__memfunc_setup("setPalette3",1102,G__DmtpcImageCint_195_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", "green/pink", (void*) G__func2void( (void (*)())(&dmtpc::image::palette::setPalette3) ), 0);
   G__memfunc_setup("setHot",631,G__DmtpcImageCint_195_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&dmtpc::image::palette::setHot) ), 0);
   G__memfunc_setup("setCool",729,G__DmtpcImageCint_195_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 '1' p", (char*)NULL, (void*) G__func2void( (void (*)(double))(&dmtpc::image::palette::setCool) ), 0);
   G__memfunc_setup("setJet",623,G__DmtpcImageCint_195_0_14, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&dmtpc::image::palette::setJet) ), 0);
   G__memfunc_setup("setCopper",949,G__DmtpcImageCint_195_0_15, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&dmtpc::image::palette::setCopper) ), 0);
   G__memfunc_setup("setBone",720,G__DmtpcImageCint_195_0_16, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&dmtpc::image::palette::setBone) ), 0);
   G__memfunc_setup("setWinter",965,G__DmtpcImageCint_195_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 '1' p", (char*)NULL, (void*) G__func2void( (void (*)(double))(&dmtpc::image::palette::setWinter) ), 0);
   G__memfunc_setup("setSpring",959,G__DmtpcImageCint_195_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 '1' p", (char*)NULL, (void*) G__func2void( (void (*)(double))(&dmtpc::image::palette::setSpring) ), 0);
   G__memfunc_setup("setSummer",965,G__DmtpcImageCint_195_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 '1' p", (char*)NULL, (void*) G__func2void( (void (*)(double))(&dmtpc::image::palette::setSummer) ), 0);
   G__memfunc_setup("setAutumn",966,G__DmtpcImageCint_195_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 '1' p", (char*)NULL, (void*) G__func2void( (void (*)(double))(&dmtpc::image::palette::setAutumn) ), 0);
   G__memfunc_setup("setMIT",566,G__DmtpcImageCint_195_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 '1' p", (char*)NULL, (void*) G__func2void( (void (*)(double))(&dmtpc::image::palette::setMIT) ), 0);
   G__memfunc_setup("setColumbia",1144,G__DmtpcImageCint_195_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 '1' p", (char*)NULL, (void*) G__func2void( (void (*)(double))(&dmtpc::image::palette::setColumbia) ), 0);
   G__memfunc_setup("setBU",483,G__DmtpcImageCint_195_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 '1' p", (char*)NULL, (void*) G__func2void( (void (*)(double))(&dmtpc::image::palette::setBU) ), 0);
   G__memfunc_setup("setRandom",941,G__DmtpcImageCint_195_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 '5' n", (char*)NULL, (void*) G__func2void( (void (*)(int))(&dmtpc::image::palette::setRandom) ), 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncdmtpccLcLimagecLcLprocessing(void) {
   /* dmtpc::image::processing */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLprocessing));
   G__memfunc_setup("applyThreshold",1491,G__DmtpcImageCint_198_0_1, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'TH2' - 0 - image f - - 0 - threshold", (char*)NULL, (void*) G__func2void( (void (*)(TH2*, float))(&dmtpc::image::processing::applyThreshold) ), 0);
   G__memfunc_setup("applyCeiling",1249,G__DmtpcImageCint_198_0_2, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'TH2' - 0 - image f - - 0 - ceiling", (char*)NULL, (void*) G__func2void( (void (*)(TH2*, float))(&dmtpc::image::processing::applyCeiling) ), 0);
   G__memfunc_setup("killPixels",1057,G__DmtpcImageCint_198_0_3, 105, -1, -1, 0, 3, 1, 1, 0, 
"U 'TH2' - 0 - image f - - 0 - threshold "
"U 'vector<int,allocator<int> >' 'vector<int>' 0 '0' killedPixels", (char*)NULL, (void*) G__func2void( (int (*)(TH2*, float, vector<int>*))(&dmtpc::image::processing::killPixels) ), 0);
   G__memfunc_setup("killLonePixels",1455,G__DmtpcImageCint_198_0_4, 105, -1, -1, 0, 3, 1, 1, 0, 
"U 'TH2' - 0 - image f - - 0 - threshold "
"i - - 0 '2' minNeighbors", (char*)NULL, (void*) G__func2void( (int (*)(TH2*, float, int))(&dmtpc::image::processing::killLonePixels) ), 0);
   G__memfunc_setup("killLonePixelsMedianDifference",3048,G__DmtpcImageCint_198_0_5, 105, -1, -1, 0, 2, 1, 1, 0, 
"U 'TH2' - 0 - tokill d - - 0 - threshold", (char*)NULL, (void*) G__func2void( (int (*)(TH2*, double))(&dmtpc::image::processing::killLonePixelsMedianDifference) ), 0);
   G__memfunc_setup("killLonePixels2",1505,G__DmtpcImageCint_198_0_6, 105, -1, -1, 0, 3, 1, 1, 0, 
"U 'TH2' - 0 - image f - - 0 - threshold "
"U 'vector<int,allocator<int> >' 'vector<int>' 0 '0' killedPixels", (char*)NULL, (void*) G__func2void( (int (*)(TH2*, float, vector<int>*))(&dmtpc::image::processing::killLonePixels2) ), 0);
   G__memfunc_setup("killPixelList",1354,G__DmtpcImageCint_198_0_7, 105, -1, -1, 0, 2, 1, 1, 0, 
"U 'TH2' - 0 - image u 'vector<int,allocator<int> >' 'vector<int>' 0 - pixellist", (char*)NULL, (void*) G__func2void( (int (*)(TH2*, vector<int>))(&dmtpc::image::processing::killPixelList) ), 0);
   G__memfunc_setup("killUnusedPixels",1685,G__DmtpcImageCint_198_0_8, 105, -1, -1, 0, 4, 1, 1, 0, 
"U 'TH2' - 0 - image u 'vector<int,allocator<int> >' 'vector<int>' 1 - roi "
"i - - 0 - d u 'TString' - 0 - opt", (char*)NULL, (void*) G__func2void( (int (*)(TH2*, vector<int>&, int, TString))(&dmtpc::image::processing::killUnusedPixels) ), 0);
   G__memfunc_setup("killRow",740,G__DmtpcImageCint_198_0_9, 105, -1, -1, 0, 2, 1, 1, 0, 
"U 'TH2' - 0 - image i - - 0 - irow", (char*)NULL, (void*) G__func2void( (int (*)(TH2*, int))(&dmtpc::image::processing::killRow) ), 0);
   G__memfunc_setup("killColumn",1050,G__DmtpcImageCint_198_0_10, 105, -1, -1, 0, 2, 1, 1, 0, 
"U 'TH2' - 0 - image i - - 0 - icolumn", (char*)NULL, (void*) G__func2void( (int (*)(TH2*, int))(&dmtpc::image::processing::killColumn) ), 0);
   G__memfunc_setup("subtractPedestal",1690,G__DmtpcImageCint_198_0_11, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'TH2' - 0 - image f - - 0 - pedestal", (char*)NULL, (void*) G__func2void( (void (*)(TH2*, float))(&dmtpc::image::processing::subtractPedestal) ), 0);
   G__memfunc_setup("topHatBlur",1029,G__DmtpcImageCint_198_0_12, 85, G__get_linked_tagnum(&G__DmtpcImageCintLN_TH2), -1, 0, 3, 1, 1, 0, 
"U 'TH2' - 0 - image i - - 0 - blurn "
"d - - 0 - blurfrac", (char*)NULL, (void*) G__func2void( (TH2* (*)(TH2*, int, double))(&dmtpc::image::processing::topHatBlur) ), 0);
   G__memfunc_setup("gaussianBlur",1264,G__DmtpcImageCint_198_0_13, 85, G__get_linked_tagnum(&G__DmtpcImageCintLN_TH2), -1, 0, 5, 1, 1, 0, 
"U 'TH2' - 10 - image i - - 0 - blurn "
"d - - 0 - sigma D - - 2 '0' kernel "
"u 'dmtpc::image::processing::BLUR_EDGE_BEHAVIOR' 'dmtpc::image::processing::BLUR_EDGE_BEHAVIOR' 0 'RENORMALIZE' edge_action", (char*)NULL, (void*) G__func2void( (TH2* (*)(const TH2*, int, double, double**, dmtpc::image::processing::BLUR_EDGE_BEHAVIOR))(&dmtpc::image::processing::gaussianBlur) ), 0);
   G__memfunc_setup("bilateralFilter",1558,G__DmtpcImageCint_198_0_14, 85, G__get_linked_tagnum(&G__DmtpcImageCintLN_TH2), -1, 0, 5, 1, 1, 0, 
"U 'TH2' - 10 - image d - - 0 - space_sigma "
"d - - 0 - value_sigma d - - 0 '3' nsigma "
"u 'dmtpc::image::processing::BILATERAL_VALUE_FN' 'dmtpc::image::processing::BILATERAL_VALUE_FN' 0 'BILATERAL_GAUSSIAN' fn", (char*)NULL, (void*) G__func2void( (TH2* (*)(const TH2*, double, double, double, dmtpc::image::processing::BILATERAL_VALUE_FN))(&dmtpc::image::processing::bilateralFilter) ), 0);
   G__memfunc_setup("fastBilateralFilter",1956,G__DmtpcImageCint_198_0_15, 85, G__get_linked_tagnum(&G__DmtpcImageCintLN_TH2), -1, 0, 7, 1, 1, 0, 
"U 'TH2' - 10 - image d - - 0 - space_sigma "
"d - - 0 - value_sigma d - - 0 '3' nsigma "
"u 'dmtpc::image::processing::BILATERAL_VALUE_FN' 'dmtpc::image::processing::BILATERAL_VALUE_FN' 0 'BILATERAL_GAUSSIAN' fn i - - 0 '8' scale_exp "
"g - - 0 'false' cache_lookup", (char*)NULL, (void*) G__func2void( (TH2* (*)(const TH2*, double, double, double, dmtpc::image::processing::BILATERAL_VALUE_FN, int, bool))(&dmtpc::image::processing::fastBilateralFilter) ), 0);
   G__memfunc_setup("edgeDetect",1006,G__DmtpcImageCint_198_0_16, 85, G__get_linked_tagnum(&G__DmtpcImageCintLN_TH2C), -1, 0, 6, 1, 1, 0, 
"U 'TH2' - 10 - img d - - 0 - blurlevel "
"d - - 0 - thresh_low d - - 0 - thresh_high "
"u 'dmtpc::image::processing::GRADIENT_OPERATOR' 'dmtpc::image::processing::GRADIENT_OPERATOR' 0 'SOBEL' g h - - 0 '7' kernel_size", (char*)NULL, (void*) G__func2void( (TH2C* (*)(const TH2*, double, double, double, dmtpc::image::processing::GRADIENT_OPERATOR, unsigned int))(&dmtpc::image::processing::edgeDetect) ), 0);
   G__memfunc_setup("convolve",876,G__DmtpcImageCint_198_0_17, 85, G__get_linked_tagnum(&G__DmtpcImageCintLN_TH2), -1, 0, 7, 1, 1, 0, 
"U 'TH2' - 10 - img D - - 10 - kernel "
"i - - 0 - width i - - 0 - height "
"g - - 0 'false' separable u 'dmtpc::image::processing::BLUR_EDGE_BEHAVIOR' 'dmtpc::image::processing::BLUR_EDGE_BEHAVIOR' 0 'RENORMALIZE' edge_behavior "
"C - - 10 '0' new_name", (char*)NULL, (void*) G__func2void( (TH2* (*)(const TH2*, const double*, int, int, bool, dmtpc::image::processing::BLUR_EDGE_BEHAVIOR, const char*))(&dmtpc::image::processing::convolve) ), 0);
   G__memfunc_setup("gradient",846,G__DmtpcImageCint_198_0_18, 121, -1, -1, 0, 6, 1, 1, 0, 
"U 'TH2' - 10 - img U 'TH2' - 0 - magnitude "
"U 'TH2S' - 0 - orientation d - - 0 - blurlevel "
"u 'dmtpc::image::processing::GRADIENT_OPERATOR' 'dmtpc::image::processing::GRADIENT_OPERATOR' 0 'SOBEL' g h - - 0 '7' kernel_size", (char*)NULL, (void*) G__func2void( (void (*)(const TH2*, TH2*, TH2S*, double, dmtpc::image::processing::GRADIENT_OPERATOR, unsigned int))(&dmtpc::image::processing::gradient) ), 0);
   G__memfunc_setup("anisotropicDiffusion",2130,G__DmtpcImageCint_198_0_19, 85, G__get_linked_tagnum(&G__DmtpcImageCintLN_TH2), -1, 0, 7, 1, 1, 0, 
"U 'TH2' - 10 - img d - - 0 - lambda "
"d - - 0 - K u 'dmtpc::image::processing::ANISOTROPIC_DIFFUSION_FN' 'dmtpc::image::processing::ANISOTROPIC_DIFFUSION_FN' 0 'TUKEY' fn "
"d - - 0 '1' gradient_sigma u 'dmtpc::image::processing::GRADIENT_OPERATOR' 'dmtpc::image::processing::GRADIENT_OPERATOR' 0 'SOBEL' gradop "
"g - - 0 'false' use_diagonals", (char*)NULL, (void*) G__func2void( (TH2* (*)(const TH2*, double, double, dmtpc::image::processing::ANISOTROPIC_DIFFUSION_FN, double, dmtpc::image::processing::GRADIENT_OPERATOR, bool))(&dmtpc::image::processing::anisotropicDiffusion) ), 0);
   G__memfunc_setup("nonMaximumSuppress",1934,G__DmtpcImageCint_198_0_20, 85, G__get_linked_tagnum(&G__DmtpcImageCintLN_TH2), -1, 0, 4, 1, 1, 0, 
"U 'TH2' - 10 - in i - - 0 '1' n "
"d - - 0 '0' setval C - - 10 '\"_suppressed\"' suffix", (char*)NULL, (void*) G__func2void( (TH2* (*)(const TH2*, int, double, const char*))(&dmtpc::image::processing::nonMaximumSuppress) ), 0);
   G__memfunc_setup("medianFilter",1236,G__DmtpcImageCint_198_0_21, 85, G__get_linked_tagnum(&G__DmtpcImageCintLN_TH2), -1, 0, 3, 1, 1, 0, 
"U 'TH2' - 10 - in h - - 0 '3' - "
"h - - 0 '1' -", (char*)NULL, (void*) G__func2void( (TH2* (*)(const TH2*, unsigned int, unsigned int))(&dmtpc::image::processing::medianFilter) ), 0);
   G__memfunc_setup("laplacian",933,G__DmtpcImageCint_198_0_22, 85, G__get_linked_tagnum(&G__DmtpcImageCintLN_TH2), -1, 0, 1, 1, 1, 0, "U 'TH2' - 10 - in", (char*)NULL, (void*) G__func2void( (TH2* (*)(const TH2*))(&dmtpc::image::processing::laplacian) ), 0);
   G__memfunc_setup("laplacianOfGaussian",1941,G__DmtpcImageCint_198_0_23, 85, G__get_linked_tagnum(&G__DmtpcImageCintLN_TH2), -1, 0, 3, 1, 1, 0, 
"U 'TH2' - 10 - in d - - 0 - sigma "
"i - - 0 - width", (char*)NULL, (void*) G__func2void( (TH2* (*)(const TH2*, double, int))(&dmtpc::image::processing::laplacianOfGaussian) ), 0);
   G__memfunc_setup("fillEdges",911,G__DmtpcImageCint_198_0_24, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'TH2' - 0 - in h - - 0 '1' - "
"d - - 0 '0' setval", (char*)NULL, (void*) G__func2void( (void (*)(TH2*, unsigned int, double))(&dmtpc::image::processing::fillEdges) ), 0);
   G__memfunc_setup("neighborRatio",1357,G__DmtpcImageCint_198_0_25, 85, G__get_linked_tagnum(&G__DmtpcImageCintLN_TH2), -1, 0, 4, 1, 1, 0, 
"U 'TH2' - 10 - in g - - 0 'false' abs "
"g - - 0 'false' median g - - 0 'false' difference", (char*)NULL, (void*) G__func2void( (TH2* (*)(const TH2*, bool, bool, bool))(&dmtpc::image::processing::neighborRatio) ), 0);
   G__memfunc_setup("addGaussianNoise",1634,G__DmtpcImageCint_198_0_26, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'TH2' - 0 - in d - - 0 '1' sigma", (char*)NULL, (void*) G__func2void( (void (*)(TH2*, double))(&dmtpc::image::processing::addGaussianNoise) ), 0);
   G__memfunc_setup("binaryThreshold",1586,G__DmtpcImageCint_198_0_27, 85, G__get_linked_tagnum(&G__DmtpcImageCintLN_TH2C), -1, 0, 2, 1, 1, 0, 
"U 'TH2' - 10 - in d - - 0 - thresh", (char*)NULL, (void*) G__func2void( (TH2C* (*)(const TH2*, double))(&dmtpc::image::processing::binaryThreshold) ), 0);
   G__memfunc_setup("WienerGaussDeconvolve",2178,G__DmtpcImageCint_198_0_28, 85, G__get_linked_tagnum(&G__DmtpcImageCintLN_TH2), -1, 0, 3, 1, 1, 0, 
"U 'TH2' - 10 - s d - - 0 - sigma "
"d - - 0 - noise_sigma", (char*)NULL, (void*) G__func2void( (TH2* (*)(const TH2*, double, double))(&dmtpc::image::processing::WienerGaussDeconvolve) ), 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncdmtpccLcLimagecLcLtools(void) {
   /* dmtpc::image::tools */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLtools));
   G__memfunc_setup("newTH2",536,G__DmtpcImageCint_264_0_1, 85, G__get_linked_tagnum(&G__DmtpcImageCintLN_TH2), -1, 0, 9, 1, 1, 0, 
"c - - 0 - type C - - 10 - name "
"C - - 10 - title i - - 0 - nbinsx "
"d - - 0 - xmin d - - 0 - xmax "
"i - - 0 - nbinsy d - - 0 - ymin "
"d - - 0 - ymax", (char*)NULL, (void*) G__func2void( (TH2* (*)(char, const char*, const char*, int, double, double, int, double, double))(&dmtpc::image::tools::newTH2) ), 0);
   G__memfunc_setup("newTH1",535,G__DmtpcImageCint_264_0_2, 85, G__get_linked_tagnum(&G__DmtpcImageCintLN_TH1), -1, 0, 7, 1, 1, 0, 
"c - - 0 - type C - - 10 - name "
"C - - 10 - title i - - 0 - nbinsx "
"d - - 0 - xmin d - - 0 - xmax "
"U 'TH1' - 0 '0' ptr", (char*)NULL, (void*) G__func2void( (TH1* (*)(char, const char*, const char*, int, double, double, TH1*))(&dmtpc::image::tools::newTH1) ), 0);
   G__memfunc_setup("newTH2StealType",1459,G__DmtpcImageCint_264_0_3, 85, G__get_linked_tagnum(&G__DmtpcImageCintLN_TH2), -1, 0, 9, 1, 1, 0, 
"U 'TH2' - 10 - type_giver C - - 10 - name "
"C - - 10 - title i - - 0 - nbinsx "
"d - - 0 - xmin d - - 0 - xmax "
"i - - 0 - nbinsy d - - 0 - ymin "
"d - - 0 - ymax", (char*)NULL, (void*) G__func2void( (TH2* (*)(const TH2*, const char*, const char*, int, double, double, int, double, double))(&dmtpc::image::tools::newTH2StealType) ), 0);
   G__memfunc_setup("newTH2StealTypeAndSize",2145,G__DmtpcImageCint_264_0_4, 85, G__get_linked_tagnum(&G__DmtpcImageCintLN_TH2), -1, 0, 3, 1, 1, 0, 
"U 'TH2' - 10 - type_giver C - - 10 - name "
"C - - 10 - title", (char*)NULL, (void*) G__func2void( (TH2* (*)(const TH2*, const char*, const char*))(&dmtpc::image::tools::newTH2StealTypeAndSize) ), 0);
   G__memfunc_setup("newTH2StealSize",1452,G__DmtpcImageCint_264_0_5, 85, G__get_linked_tagnum(&G__DmtpcImageCintLN_TH2), -1, 0, 4, 1, 1, 0, 
"U 'TH2' - 10 - size_giver c - - 0 - type "
"C - - 10 - name C - - 10 - title", (char*)NULL, (void*) G__func2void( (TH2* (*)(const TH2*, char, const char*, const char*))(&dmtpc::image::tools::newTH2StealSize) ), 0);
   G__memfunc_setup("newTH1StealSize",1451,G__DmtpcImageCint_264_0_6, 85, G__get_linked_tagnum(&G__DmtpcImageCintLN_TH1), -1, 0, 4, 1, 1, 0, 
"U 'TH1' - 10 - size_giver c - - 0 - type "
"C - - 10 - name C - - 10 - title", (char*)NULL, (void*) G__func2void( (TH1* (*)(const TH1*, char, const char*, const char*))(&dmtpc::image::tools::newTH1StealSize) ), 0);
   G__memfunc_setup("newTH1StealType",1458,G__DmtpcImageCint_264_0_7, 85, G__get_linked_tagnum(&G__DmtpcImageCintLN_TH1), -1, 0, 7, 1, 1, 0, 
"U 'TH1' - 10 - type_giver C - - 10 - name "
"C - - 10 - title i - - 0 - nbinsx "
"d - - 0 - xmin d - - 0 - xmax "
"U 'TH1' - 0 '0' placement_ptr", (char*)NULL, (void*) G__func2void( (TH1* (*)(const TH1*, const char*, const char*, int, double, double, TH1*))(&dmtpc::image::tools::newTH1StealType) ), 0);
   G__memfunc_setup("TH1GetNbins",999,G__DmtpcImageCint_264_0_8, 104, -1, -1, 0, 1, 1, 1, 0, "U 'TH1' - 10 - hist", (char*)NULL, (void*) G__func2void( (unsigned int (*)(const TH1*))(&dmtpc::image::tools::TH1GetNbins) ), 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncdmtpccLcLimagecLcLStitchInfo(void) {
   /* dmtpc::image::StitchInfo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLStitchInfo));
   G__memfunc_setup("StitchInfo",1019,G__DmtpcImageCint_268_0_1, 105, G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLStitchInfo), -1, 0, 15, 1, 1, 0, 
"C - - 10 - name h - - 0 - - "
"U 'dmtpc::image::LensCorrection' - 10 - lens D - - 10 - xmins "
"D - - 10 - ymins D - - 10 - xmaxs "
"D - - 10 - ymaxs I - - 10 - nbinsx "
"I - - 10 - nbinsy D - - 10 - xorigin "
"D - - 10 - yorigin D - - 10 - rotation "
"D - - 10 - scale D - - 10 - weight "
"h - - 0 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StitchInfo",1019,G__DmtpcImageCint_268_0_2, 105, G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLStitchInfo), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DmtpcImageCint_268_0_3, 85, G__get_linked_tagnum(&G__DmtpcImageCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&dmtpc::image::StitchInfo::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DmtpcImageCint_268_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&dmtpc::image::StitchInfo::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DmtpcImageCint_268_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&dmtpc::image::StitchInfo::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DmtpcImageCint_268_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&dmtpc::image::StitchInfo::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DmtpcImageCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DmtpcImageCint_268_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DmtpcImageCint_268_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&dmtpc::image::StitchInfo::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DmtpcImageCint_268_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&dmtpc::image::StitchInfo::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DmtpcImageCint_268_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&dmtpc::image::StitchInfo::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DmtpcImageCint_268_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&dmtpc::image::StitchInfo::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("StitchInfo", 1019, G__DmtpcImageCint_268_0_15, (int) ('i'), G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLStitchInfo), -1, 0, 1, 1, 1, 0, "u 'dmtpc::image::StitchInfo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~StitchInfo", 1145, G__DmtpcImageCint_268_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DmtpcImageCint_268_0_17, (int) ('u'), G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLStitchInfo), -1, 1, 1, 1, 1, 0, "u 'dmtpc::image::StitchInfo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncdmtpccLcLimagecLcLtransform(void) {
   /* dmtpc::image::transform */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLtransform));
   G__memfunc_setup("rotatePerfect",1368,G__DmtpcImageCint_269_0_1, 85, G__get_linked_tagnum(&G__DmtpcImageCintLN_TH2), -1, 0, 2, 1, 1, 0, 
"U 'TH2' - 10 - hin u 'TString' - 0 - dir", (char*)NULL, (void*) G__func2void( (TH2* (*)(const TH2*, TString))(&dmtpc::image::transform::rotatePerfect) ), 0);
   G__memfunc_setup("rotateRight",1165,G__DmtpcImageCint_269_0_2, 85, G__get_linked_tagnum(&G__DmtpcImageCintLN_TH2), -1, 0, 1, 1, 1, 0, "U 'TH2' - 10 - image", (char*)NULL, (void*) G__func2void( (TH2* (*)(const TH2*))(&dmtpc::image::transform::rotateRight) ), 0);
   G__memfunc_setup("rotateLeft",1050,G__DmtpcImageCint_269_0_3, 85, G__get_linked_tagnum(&G__DmtpcImageCintLN_TH2), -1, 0, 1, 1, 1, 0, "U 'TH2' - 10 - image", (char*)NULL, (void*) G__func2void( (TH2* (*)(const TH2*))(&dmtpc::image::transform::rotateLeft) ), 0);
   G__memfunc_setup("rotate180",808,G__DmtpcImageCint_269_0_4, 85, G__get_linked_tagnum(&G__DmtpcImageCintLN_TH2), -1, 0, 1, 1, 1, 0, "U 'TH2' - 10 - image", (char*)NULL, (void*) G__func2void( (TH2* (*)(const TH2*))(&dmtpc::image::transform::rotate180) ), 0);
   G__memfunc_setup("rotateSubdivide",1582,G__DmtpcImageCint_269_0_5, 85, G__get_linked_tagnum(&G__DmtpcImageCintLN_TH2), -1, 0, 4, 1, 1, 0, 
"U 'TH2' - 10 - img d - - 0 - ang "
"U 'TPoints' - 0 '0' pt i - 'Int_t' 0 '4' ndiv", (char*)NULL, (void*) G__func2void( (TH2* (*)(const TH2*, double, TPoints*, Int_t))(&dmtpc::image::transform::rotateSubdivide) ), 0);
   G__memfunc_setup("rotateInterpolate",1814,G__DmtpcImageCint_269_0_6, 85, G__get_linked_tagnum(&G__DmtpcImageCintLN_TH2), -1, 0, 5, 1, 1, 0, 
"U 'TH2' - 10 - img d - - 0 - ang "
"U 'TPoints' - 0 '0' pt U 'TH2' - 0 '0' out "
"C - - 10 '\"bilinear\"' interpolation", (char*)NULL, (void*) G__func2void( (TH2* (*)(const TH2*, double, TPoints*, TH2*, const char*))(&dmtpc::image::transform::rotateInterpolate) ), 0);
   G__memfunc_setup("projectAlongLine",1648,G__DmtpcImageCint_269_0_7, 121, -1, -1, 0, 9, 1, 1, 0, 
"U 'TH2' - 10 - img U 'TH1' - 2 - longi "
"U 'TH1' - 2 - tranv d - - 0 - x0 "
"d - - 0 - y0 d - - 0 - x1 "
"d - - 0 - y1 d - - 0 - width "
"C - - 10 '\"bilinear\"' method", (char*)NULL, (void*) G__func2void( (void (*)(const TH2*, TH1**, TH1**, double, double, double, double, double, const char*))(&dmtpc::image::transform::projectAlongLine) ), 0);
   G__memfunc_setup("resizeImage",1141,G__DmtpcImageCint_269_0_8, 85, G__get_linked_tagnum(&G__DmtpcImageCintLN_TH2), -1, 0, 5, 1, 1, 0, 
"U 'TH2' - 10 - image d - - 0 - xmin "
"d - - 0 - xmax d - - 0 - ymin "
"d - - 0 - ymax", (char*)NULL, (void*) G__func2void( (TH2* (*)(const TH2*, double, double, double, double))(&dmtpc::image::transform::resizeImage) ), 0);
   G__memfunc_setup("copyContent",1174,G__DmtpcImageCint_269_0_9, 85, G__get_linked_tagnum(&G__DmtpcImageCintLN_TH1), -1, 0, 2, 1, 1, 0, 
"U 'TH1' - 10 - in U 'TH1' - 0 - out", (char*)NULL, (void*) G__func2void( (TH1* (*)(const TH1*, TH1*))(&dmtpc::image::transform::copyContent) ), 0);
   G__memfunc_setup("houghTransformLine",1887,G__DmtpcImageCint_269_0_10, 85, G__get_linked_tagnum(&G__DmtpcImageCintLN_TH2), -1, 0, 5, 1, 1, 0, 
"U 'TH2' - 10 - in U 'TH2' - 0 '0' out "
"d - - 0 '1' min h - - 0 '512' - "
"h - - 0 '512' -", (char*)NULL, (void*) G__func2void( (TH2* (*)(const TH2*, TH2*, double, unsigned int, unsigned int))(&dmtpc::image::transform::houghTransformLine) ), 0);
   G__memfunc_setup("houghTransformEllipse",2213,G__DmtpcImageCint_269_0_11, 85, G__get_linked_tagnum(&G__DmtpcImageCintLN_THnSparse), -1, 0, 3, 1, 1, 0, 
"U 'TH2' - 0 - in U 'THnSparse' - 0 - out "
"d - - 0 '1' min", (char*)NULL, (void*) G__func2void( (THnSparse* (*)(TH2*, THnSparse*, double))(&dmtpc::image::transform::houghTransformEllipse) ), 0);
   G__memfunc_setup("houghTransformCircle",2089,G__DmtpcImageCint_269_0_12, 85, G__get_linked_tagnum(&G__DmtpcImageCintLN_TH3), -1, 0, 4, 1, 1, 0, 
"U 'TH2' - 0 - in U 'TH3' - 0 - out "
"d - - 0 '1' min 1 - 'void (*)(int row) ' 0 '0' progressFn", (char*)NULL, (void*) G__func2void( (TH3* (*)(TH2*, TH3*, double, void (*)(int row) ))(&dmtpc::image::transform::houghTransformCircle) ), 0);
   G__memfunc_setup("toPolarCoordinates",1884,G__DmtpcImageCint_269_0_13, 85, G__get_linked_tagnum(&G__DmtpcImageCintLN_TH2), -1, 0, 7, 1, 1, 0, 
"U 'TH2' - 10 - in h - - 0 '256' - "
"h - - 0 '256' - U 'TPoints' - 0 '0' center "
"c - - 0 ''D'' type C - - 10 '\"bilinear\"' interpolation "
"C - - 10 '0' name", (char*)NULL, (void*) G__func2void( (TH2* (*)(const TH2*, unsigned int, unsigned int, TPoints*, char, const char*, const char*))(&dmtpc::image::transform::toPolarCoordinates) ), 0);
   G__memfunc_setup("montage",747,G__DmtpcImageCint_269_0_14, 85, G__get_linked_tagnum(&G__DmtpcImageCintLN_TH2), -1, 0, 5, 1, 1, 0, 
"U 'TH2' - 12 - in U 'dmtpc::image::StitchInfo' - 0 - info "
"C - - 10 - name C - - 10 '\"bilinear\"' interpolation "
"c - - 0 ''F'' histType", (char*)NULL, (void*) G__func2void( (TH2* (*)(const TH2**, dmtpc::image::StitchInfo*, const char*, const char*, char))(&dmtpc::image::transform::montage) ), 0);
   G__memfunc_setup("radonTransform",1488,G__DmtpcImageCint_269_0_15, 85, G__get_linked_tagnum(&G__DmtpcImageCintLN_TH2D), -1, 0, 3, 1, 1, 0, 
"U 'TH2' - 10 - img i - - 0 '360' nbinstheta "
"i - - 0 '-1' nprojbins", (char*)NULL, (void*) G__func2void( (TH2D* (*)(const TH2*, int, int))(&dmtpc::image::transform::radonTransform) ), 0);
   G__memfunc_setup("crop",436,G__DmtpcImageCint_269_0_16, 85, G__get_linked_tagnum(&G__DmtpcImageCintLN_TH2), -1, 0, 5, 1, 1, 0, 
"U 'TH2' - 10 - img i - - 0 - xbinmin "
"i - - 0 - xbinmax i - - 0 - ybinmin "
"i - - 0 - ybinmax", (char*)NULL, (void*) G__func2void( (TH2* (*)(const TH2*, int, int, int, int))(&dmtpc::image::transform::crop) ), 0);
   G__memfunc_setup("cropZero",852,G__DmtpcImageCint_269_0_17, 85, G__get_linked_tagnum(&G__DmtpcImageCintLN_TH2), -1, 0, 1, 1, 1, 0, "U 'TH2' - 10 - img", (char*)NULL, (void*) G__func2void( (TH2* (*)(const TH2*))(&dmtpc::image::transform::cropZero) ), 0);
   G__memfunc_setup("zeroPad",725,G__DmtpcImageCint_269_0_18, 85, G__get_linked_tagnum(&G__DmtpcImageCintLN_TH2), -1, 0, 6, 1, 1, 0, 
"U 'TH2' - 0 - in i - - 0 - newx "
"i - - 0 - newy f - - 0 '0' newxpos "
"f - - 0 '0' newypos C - - 10 '\"_zeropad\"' name", (char*)NULL, (void*) G__func2void( (TH2* (*)(TH2*, int, int, float, float, const char*))(&dmtpc::image::transform::zeroPad) ), 0);
   G__memfunc_setup("zeroPadSquare",1350,G__DmtpcImageCint_269_0_19, 85, G__get_linked_tagnum(&G__DmtpcImageCintLN_TH2), -1, 0, 3, 1, 1, 0, 
"U 'TH2' - 0 - in f - - 0 '0' newpos "
"C - - 10 '\"_zeropad\"' name", (char*)NULL, (void*) G__func2void( (TH2* (*)(TH2*, float, const char*))(&dmtpc::image::transform::zeroPadSquare) ), 0);
   G__memfunc_setup("histApply",958,G__DmtpcImageCint_269_0_20, 85, G__get_linked_tagnum(&G__DmtpcImageCintLN_TH2), -1, 0, 2, 1, 1, 0, 
"U 'TH2' - 0 - in 1 - 'double (*) (double)' 0 - fn", (char*)NULL, (void*) G__func2void( (TH2* (*)(TH2*, double (*) (double)))(&dmtpc::image::transform::histApply) ), 0);
   G__memfunc_setup("histApply",958,G__DmtpcImageCint_269_0_21, 85, G__get_linked_tagnum(&G__DmtpcImageCintLN_TH2), -1, 0, 3, 1, 1, 0, 
"U 'TH2' - 0 - in 1 - 'double (*) (double,double)' 0 - fn "
"d - - 0 - arg", (char*)NULL, (void*) G__func2void( (TH2* (*)(TH2*, double (*) (double,double), double))(&dmtpc::image::transform::histApply) ), 0);
   G__memfunc_setup("histSqrt",866,G__DmtpcImageCint_269_0_22, 85, G__get_linked_tagnum(&G__DmtpcImageCintLN_TH2), -1, 0, 1, 1, 1, 0, "U 'TH2' - 0 - in", (char*)NULL, (void*) G__func2void( (TH2* (*)(TH2*))(&dmtpc::image::transform::histSqrt) ), 0);
   G__memfunc_setup("histAbs",718,G__DmtpcImageCint_269_0_23, 85, G__get_linked_tagnum(&G__DmtpcImageCintLN_TH2), -1, 0, 1, 1, 1, 0, "U 'TH2' - 0 - in", (char*)NULL, (void*) G__func2void( (TH2* (*)(TH2*))(&dmtpc::image::transform::histAbs) ), 0);
   G__memfunc_setup("histPow",750,G__DmtpcImageCint_269_0_24, 85, G__get_linked_tagnum(&G__DmtpcImageCintLN_TH2), -1, 0, 2, 1, 1, 0, 
"U 'TH2' - 0 - in d - - 0 - b", (char*)NULL, (void*) G__func2void( (TH2* (*)(TH2*, double))(&dmtpc::image::transform::histPow) ), 0);
   G__memfunc_setup("fftshift",862,G__DmtpcImageCint_269_0_25, 85, G__get_linked_tagnum(&G__DmtpcImageCintLN_TH2), -1, 0, 4, 1, 1, 0, 
"U 'TH2' - 0 - in d - - 0 '1' scalex "
"d - - 0 '1' scaley g - - 0 'false' normalize", (char*)NULL, (void*) G__func2void( (TH2* (*)(TH2*, double, double, bool))(&dmtpc::image::transform::fftshift) ), 0);
   G__memfunc_setup("padImage",792,G__DmtpcImageCint_269_0_26, 85, G__get_linked_tagnum(&G__DmtpcImageCintLN_TH2), -1, 0, 2, 1, 1, 0, 
"U 'TH2' - 10 - image i - - 0 - padfactor", (char*)NULL, (void*) G__func2void( (TH2* (*)(const TH2*, int))(&dmtpc::image::transform::padImage) ), 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncdmtpccLcLimagecLcLinterpolation(void) {
   /* dmtpc::image::interpolation */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLinterpolation));
   G__memfunc_setup("interpolate",1191,G__DmtpcImageCint_271_0_1, 100, -1, -1, 0, 4, 1, 1, 0, 
"U 'TH2' - 10 - in d - - 0 - x "
"d - - 0 - y C - - 10 '\"bilinear\"' method", (char*)NULL, (void*) G__func2void( (double (*)(const TH2*, double, double, const char*))(&dmtpc::image::interpolation::interpolate) ), 0);
   G__memfunc_setup("testInterpolate",1607,G__DmtpcImageCint_271_0_2, 103, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - method", (char*)NULL, (void*) G__func2void( (bool (*)(const char*))(&dmtpc::image::interpolation::testInterpolate) ), 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncdmtpccLcLimagecLcLLensCorrection(void) {
   /* dmtpc::image::LensCorrection */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLLensCorrection));
   G__memfunc_setup("LensCorrection",1450,G__DmtpcImageCint_272_0_1, 105, G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLLensCorrection), -1, 0, 3, 1, 1, 0, 
"C - - 10 '\"lenscorr\"' name h - - 0 '2' - "
"D - - 0 '0' polyn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setParameter",1261,G__DmtpcImageCint_272_0_2, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - - 0 - - d - - 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setParameters",1376,G__DmtpcImageCint_272_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "D - - 10 - vals", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("correctDistortion",1825,G__DmtpcImageCint_272_0_4, 85, G__get_linked_tagnum(&G__DmtpcImageCintLN_TH2), -1, 0, 5, 1, 1, 8, 
"U 'TH2' - 10 - in U 'TH2' - 0 '0' out "
"C - - 10 '\"bicubic\"' interpolation D - - 10 '0' camera_center "
"g - - 0 'false' distort", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("distortCoords",1395,G__DmtpcImageCint_272_0_5, 105, -1, -1, 0, 3, 1, 1, 8, 
"D - - 10 - center D - - 10 - in "
"D - - 0 - out", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("unDistortCoords",1590,G__DmtpcImageCint_272_0_6, 105, -1, -1, 0, 3, 1, 1, 8, 
"D - - 10 - center D - - 10 - in "
"D - - 0 - out", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DmtpcImageCint_272_0_7, 85, G__get_linked_tagnum(&G__DmtpcImageCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&dmtpc::image::LensCorrection::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DmtpcImageCint_272_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&dmtpc::image::LensCorrection::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DmtpcImageCint_272_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&dmtpc::image::LensCorrection::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DmtpcImageCint_272_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&dmtpc::image::LensCorrection::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DmtpcImageCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DmtpcImageCint_272_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DmtpcImageCint_272_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&dmtpc::image::LensCorrection::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DmtpcImageCint_272_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&dmtpc::image::LensCorrection::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DmtpcImageCint_272_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&dmtpc::image::LensCorrection::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DmtpcImageCint_272_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&dmtpc::image::LensCorrection::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("LensCorrection", 1450, G__DmtpcImageCint_272_0_19, (int) ('i'), G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLLensCorrection), -1, 0, 1, 1, 1, 0, "u 'dmtpc::image::LensCorrection' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~LensCorrection", 1576, G__DmtpcImageCint_272_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DmtpcImageCint_272_0_21, (int) ('u'), G__get_linked_tagnum(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLLensCorrection), -1, 1, 1, 1, 1, 0, "u 'dmtpc::image::LensCorrection' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncDmtpcImageCint() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalDmtpcImageCint() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {
}

static void G__cpp_setup_func25() {
}

static void G__cpp_setup_func26() {
}

static void G__cpp_setup_func27() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcDmtpcImageCint() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
  G__cpp_setup_func25();
  G__cpp_setup_func26();
  G__cpp_setup_func27();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__DmtpcImageCintLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__DmtpcImageCintLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__DmtpcImageCintLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__DmtpcImageCintLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__DmtpcImageCintLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__DmtpcImageCintLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__DmtpcImageCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR = { "vector<double,allocator<double> >" , 99 , -1 };
G__linked_taginfo G__DmtpcImageCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__DmtpcImageCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcImageCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__DmtpcImageCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcImageCintLN_TH1 = { "TH1" , 99 , -1 };
G__linked_taginfo G__DmtpcImageCintLN_TH1F = { "TH1F" , 99 , -1 };
G__linked_taginfo G__DmtpcImageCintLN_TH2 = { "TH2" , 99 , -1 };
G__linked_taginfo G__DmtpcImageCintLN_TCanvas = { "TCanvas" , 99 , -1 };
G__linked_taginfo G__DmtpcImageCintLN_TCutG = { "TCutG" , 99 , -1 };
G__linked_taginfo G__DmtpcImageCintLN_TGraph = { "TGraph" , 99 , -1 };
G__linked_taginfo G__DmtpcImageCintLN_TPoints = { "TPoints" , 99 , -1 };
G__linked_taginfo G__DmtpcImageCintLN_dmtpc = { "dmtpc" , 110 , -1 };
G__linked_taginfo G__DmtpcImageCintLN_dmtpccLcLimage = { "dmtpc::image" , 110 , -1 };
G__linked_taginfo G__DmtpcImageCintLN_dmtpccLcLimagecLcLcalculations = { "dmtpc::image::calculations" , 110 , -1 };
G__linked_taginfo G__DmtpcImageCintLN_dmtpccLcLimagecLcLio = { "dmtpc::image::io" , 110 , -1 };
G__linked_taginfo G__DmtpcImageCintLN_dmtpccLcLimagecLcLpalette = { "dmtpc::image::palette" , 110 , -1 };
G__linked_taginfo G__DmtpcImageCintLN_TH2S = { "TH2S" , 99 , -1 };
G__linked_taginfo G__DmtpcImageCintLN_TH2C = { "TH2C" , 99 , -1 };
G__linked_taginfo G__DmtpcImageCintLN_dmtpccLcLimagecLcLprocessing = { "dmtpc::image::processing" , 110 , -1 };
G__linked_taginfo G__DmtpcImageCintLN_dmtpccLcLimagecLcLprocessingcLcLBILATERAL_VALUE_FN = { "dmtpc::image::processing::BILATERAL_VALUE_FN" , 101 , -1 };
G__linked_taginfo G__DmtpcImageCintLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__DmtpcImageCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcImageCintLN_dmtpccLcLimagecLcLprocessingcLcLBLUR_EDGE_BEHAVIOR = { "dmtpc::image::processing::BLUR_EDGE_BEHAVIOR" , 101 , -1 };
G__linked_taginfo G__DmtpcImageCintLN_dmtpccLcLimagecLcLprocessingcLcLGRADIENT_OPERATOR = { "dmtpc::image::processing::GRADIENT_OPERATOR" , 101 , -1 };
G__linked_taginfo G__DmtpcImageCintLN_dmtpccLcLimagecLcLprocessingcLcLANISOTROPIC_DIFFUSION_FN = { "dmtpc::image::processing::ANISOTROPIC_DIFFUSION_FN" , 101 , -1 };
G__linked_taginfo G__DmtpcImageCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__DmtpcImageCintLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__DmtpcImageCintLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__DmtpcImageCintLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__DmtpcImageCintLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__DmtpcImageCintLN_TH2F = { "TH2F" , 99 , -1 };
G__linked_taginfo G__DmtpcImageCintLN_TH2D = { "TH2D" , 99 , -1 };
G__linked_taginfo G__DmtpcImageCintLN_dmtpccLcLimagecLcLtools = { "dmtpc::image::tools" , 110 , -1 };
G__linked_taginfo G__DmtpcImageCintLN_THnSparse = { "THnSparse" , 99 , -1 };
G__linked_taginfo G__DmtpcImageCintLN_TH3 = { "TH3" , 99 , -1 };
G__linked_taginfo G__DmtpcImageCintLN_dmtpccLcLimagecLcLStitchInfo = { "dmtpc::image::StitchInfo" , 99 , -1 };
G__linked_taginfo G__DmtpcImageCintLN_dmtpccLcLimagecLcLtransform = { "dmtpc::image::transform" , 110 , -1 };
G__linked_taginfo G__DmtpcImageCintLN_dmtpccLcLimagecLcLtransformcLcLELLIPSE_PARAMETERS = { "dmtpc::image::transform::ELLIPSE_PARAMETERS" , 101 , -1 };
G__linked_taginfo G__DmtpcImageCintLN_dmtpccLcLimagecLcLinterpolation = { "dmtpc::image::interpolation" , 110 , -1 };
G__linked_taginfo G__DmtpcImageCintLN_dmtpccLcLimagecLcLLensCorrection = { "dmtpc::image::LensCorrection" , 99 , -1 };
G__linked_taginfo G__DmtpcImageCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR = { "vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >" , 99 , -1 };
G__linked_taginfo G__DmtpcImageCintLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcImageCintLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR = { "vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >" , 99 , -1 };
G__linked_taginfo G__DmtpcImageCintLN_reverse_iteratorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcImageCintLN_vectorlETH2FmUcOallocatorlETH2FmUgRsPgR = { "vector<TH2F*,allocator<TH2F*> >" , 99 , -1 };
G__linked_taginfo G__DmtpcImageCintLN_reverse_iteratorlEvectorlETH2FmUcOallocatorlETH2FmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TH2F*,allocator<TH2F*> >::iterator>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableDmtpcImageCint() {
  G__DmtpcImageCintLN_TClass.tagnum = -1 ;
  G__DmtpcImageCintLN_TBuffer.tagnum = -1 ;
  G__DmtpcImageCintLN_TMemberInspector.tagnum = -1 ;
  G__DmtpcImageCintLN_TObject.tagnum = -1 ;
  G__DmtpcImageCintLN_TNamed.tagnum = -1 ;
  G__DmtpcImageCintLN_TString.tagnum = -1 ;
  G__DmtpcImageCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR.tagnum = -1 ;
  G__DmtpcImageCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__DmtpcImageCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcImageCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__DmtpcImageCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcImageCintLN_TH1.tagnum = -1 ;
  G__DmtpcImageCintLN_TH1F.tagnum = -1 ;
  G__DmtpcImageCintLN_TH2.tagnum = -1 ;
  G__DmtpcImageCintLN_TCanvas.tagnum = -1 ;
  G__DmtpcImageCintLN_TCutG.tagnum = -1 ;
  G__DmtpcImageCintLN_TGraph.tagnum = -1 ;
  G__DmtpcImageCintLN_TPoints.tagnum = -1 ;
  G__DmtpcImageCintLN_dmtpc.tagnum = -1 ;
  G__DmtpcImageCintLN_dmtpccLcLimage.tagnum = -1 ;
  G__DmtpcImageCintLN_dmtpccLcLimagecLcLcalculations.tagnum = -1 ;
  G__DmtpcImageCintLN_dmtpccLcLimagecLcLio.tagnum = -1 ;
  G__DmtpcImageCintLN_dmtpccLcLimagecLcLpalette.tagnum = -1 ;
  G__DmtpcImageCintLN_TH2S.tagnum = -1 ;
  G__DmtpcImageCintLN_TH2C.tagnum = -1 ;
  G__DmtpcImageCintLN_dmtpccLcLimagecLcLprocessing.tagnum = -1 ;
  G__DmtpcImageCintLN_dmtpccLcLimagecLcLprocessingcLcLBILATERAL_VALUE_FN.tagnum = -1 ;
  G__DmtpcImageCintLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__DmtpcImageCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcImageCintLN_dmtpccLcLimagecLcLprocessingcLcLBLUR_EDGE_BEHAVIOR.tagnum = -1 ;
  G__DmtpcImageCintLN_dmtpccLcLimagecLcLprocessingcLcLGRADIENT_OPERATOR.tagnum = -1 ;
  G__DmtpcImageCintLN_dmtpccLcLimagecLcLprocessingcLcLANISOTROPIC_DIFFUSION_FN.tagnum = -1 ;
  G__DmtpcImageCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__DmtpcImageCintLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__DmtpcImageCintLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__DmtpcImageCintLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__DmtpcImageCintLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__DmtpcImageCintLN_TH2F.tagnum = -1 ;
  G__DmtpcImageCintLN_TH2D.tagnum = -1 ;
  G__DmtpcImageCintLN_dmtpccLcLimagecLcLtools.tagnum = -1 ;
  G__DmtpcImageCintLN_THnSparse.tagnum = -1 ;
  G__DmtpcImageCintLN_TH3.tagnum = -1 ;
  G__DmtpcImageCintLN_dmtpccLcLimagecLcLStitchInfo.tagnum = -1 ;
  G__DmtpcImageCintLN_dmtpccLcLimagecLcLtransform.tagnum = -1 ;
  G__DmtpcImageCintLN_dmtpccLcLimagecLcLtransformcLcLELLIPSE_PARAMETERS.tagnum = -1 ;
  G__DmtpcImageCintLN_dmtpccLcLimagecLcLinterpolation.tagnum = -1 ;
  G__DmtpcImageCintLN_dmtpccLcLimagecLcLLensCorrection.tagnum = -1 ;
  G__DmtpcImageCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR.tagnum = -1 ;
  G__DmtpcImageCintLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcImageCintLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__DmtpcImageCintLN_reverse_iteratorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcImageCintLN_vectorlETH2FmUcOallocatorlETH2FmUgRsPgR.tagnum = -1 ;
  G__DmtpcImageCintLN_reverse_iteratorlEvectorlETH2FmUcOallocatorlETH2FmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableDmtpcImageCint() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__DmtpcImageCintLN_TClass);
   G__get_linked_tagnum_fwd(&G__DmtpcImageCintLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__DmtpcImageCintLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__DmtpcImageCintLN_TObject);
   G__get_linked_tagnum_fwd(&G__DmtpcImageCintLN_TNamed);
   G__get_linked_tagnum_fwd(&G__DmtpcImageCintLN_TString);
   G__get_linked_tagnum_fwd(&G__DmtpcImageCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcImageCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcImageCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DmtpcImageCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcImageCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DmtpcImageCintLN_TH1);
   G__get_linked_tagnum_fwd(&G__DmtpcImageCintLN_TH1F);
   G__get_linked_tagnum_fwd(&G__DmtpcImageCintLN_TH2);
   G__get_linked_tagnum_fwd(&G__DmtpcImageCintLN_TCanvas);
   G__get_linked_tagnum_fwd(&G__DmtpcImageCintLN_TCutG);
   G__get_linked_tagnum_fwd(&G__DmtpcImageCintLN_TGraph);
   G__get_linked_tagnum_fwd(&G__DmtpcImageCintLN_TPoints);
   G__get_linked_tagnum_fwd(&G__DmtpcImageCintLN_dmtpc);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DmtpcImageCintLN_dmtpccLcLimage),0,-1,0,(char*)NULL,G__setup_memvardmtpccLcLimage,G__setup_memfuncdmtpccLcLimage);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLcalculations),0,-1,0,(char*)NULL,G__setup_memvardmtpccLcLimagecLcLcalculations,G__setup_memfuncdmtpccLcLimagecLcLcalculations);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLio),0,-1,0,(char*)NULL,G__setup_memvardmtpccLcLimagecLcLio,G__setup_memfuncdmtpccLcLimagecLcLio);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLpalette),0,-1,0,(char*)NULL,G__setup_memvardmtpccLcLimagecLcLpalette,G__setup_memfuncdmtpccLcLimagecLcLpalette);
   G__get_linked_tagnum_fwd(&G__DmtpcImageCintLN_TH2S);
   G__get_linked_tagnum_fwd(&G__DmtpcImageCintLN_TH2C);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLprocessing),0,-1,0,(char*)NULL,G__setup_memvardmtpccLcLimagecLcLprocessing,G__setup_memfuncdmtpccLcLimagecLcLprocessing);
   G__get_linked_tagnum_fwd(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLprocessingcLcLBILATERAL_VALUE_FN);
   G__get_linked_tagnum_fwd(&G__DmtpcImageCintLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcImageCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLprocessingcLcLBLUR_EDGE_BEHAVIOR);
   G__get_linked_tagnum_fwd(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLprocessingcLcLGRADIENT_OPERATOR);
   G__get_linked_tagnum_fwd(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLprocessingcLcLANISOTROPIC_DIFFUSION_FN);
   G__get_linked_tagnum_fwd(&G__DmtpcImageCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__DmtpcImageCintLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__DmtpcImageCintLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__DmtpcImageCintLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__DmtpcImageCintLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__DmtpcImageCintLN_TH2F);
   G__get_linked_tagnum_fwd(&G__DmtpcImageCintLN_TH2D);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLtools),0,-1,0,(char*)NULL,G__setup_memvardmtpccLcLimagecLcLtools,G__setup_memfuncdmtpccLcLimagecLcLtools);
   G__get_linked_tagnum_fwd(&G__DmtpcImageCintLN_THnSparse);
   G__get_linked_tagnum_fwd(&G__DmtpcImageCintLN_TH3);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLStitchInfo),sizeof(dmtpc::image::StitchInfo),-1,62720,(char*)NULL,G__setup_memvardmtpccLcLimagecLcLStitchInfo,G__setup_memfuncdmtpccLcLimagecLcLStitchInfo);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLtransform),0,-1,0,(char*)NULL,G__setup_memvardmtpccLcLimagecLcLtransform,G__setup_memfuncdmtpccLcLimagecLcLtransform);
   G__get_linked_tagnum_fwd(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLtransformcLcLELLIPSE_PARAMETERS);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLinterpolation),0,-1,0,(char*)NULL,G__setup_memvardmtpccLcLimagecLcLinterpolation,G__setup_memfuncdmtpccLcLimagecLcLinterpolation);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DmtpcImageCintLN_dmtpccLcLimagecLcLLensCorrection),sizeof(dmtpc::image::LensCorrection),-1,62720,(char*)NULL,G__setup_memvardmtpccLcLimagecLcLLensCorrection,G__setup_memfuncdmtpccLcLimagecLcLLensCorrection);
   G__get_linked_tagnum_fwd(&G__DmtpcImageCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcImageCintLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DmtpcImageCintLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcImageCintLN_reverse_iteratorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DmtpcImageCintLN_vectorlETH2FmUcOallocatorlETH2FmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcImageCintLN_reverse_iteratorlEvectorlETH2FmUcOallocatorlETH2FmUgRsPgRcLcLiteratorgR);
}
extern "C" void G__cpp_setupDmtpcImageCint(void) {
  G__check_setup_version(30051515,"G__cpp_setupDmtpcImageCint()");
  G__set_cpp_environmentDmtpcImageCint();
  G__cpp_setup_tagtableDmtpcImageCint();

  G__cpp_setup_inheritanceDmtpcImageCint();

  G__cpp_setup_typetableDmtpcImageCint();

  G__cpp_setup_memvarDmtpcImageCint();

  G__cpp_setup_memfuncDmtpcImageCint();
  G__cpp_setup_globalDmtpcImageCint();
  G__cpp_setup_funcDmtpcImageCint();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncDmtpcImageCint();
  return;
}
class G__cpp_setup_initDmtpcImageCint {
  public:
    G__cpp_setup_initDmtpcImageCint() { G__add_setup_func("DmtpcImageCint",(G__incsetup)(&G__cpp_setupDmtpcImageCint)); G__call_setup_funcs(); }
   ~G__cpp_setup_initDmtpcImageCint() { G__remove_setup_func("DmtpcImageCint"); }
};
G__cpp_setup_initDmtpcImageCint G__cpp_setup_initializerDmtpcImageCint;

