//
// File generated by rootcint at Sat Jun 17 00:28:06 2017

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME builddIDmtpcAnalysisCint
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "DmtpcAnalysisCint.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace dmtpc {
   namespace ROOTDict {
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance();
      static void dmtpc_Dictionary();

      // Function generating the singleton type initializer
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance()
      {
         static ::ROOT::TGenericClassInfo 
            instance("dmtpc", 0 /*version*/, "./include/TrackFitter.hh", 19,
                     ::ROOT::DefineBehavior((void*)0,(void*)0),
                     &dmtpc_Dictionary, 0);
         return &instance;
      }
      // Insure that the inline function is _not_ optimized away by the compiler
      ::ROOT::TGenericClassInfo *(*_R__UNIQUE_(InitFunctionKeeper))() = &GenerateInitInstance;  
      // Static variable to force the class initialization
      static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance(); R__UseDummy(_R__UNIQUE_(Init));

      // Dictionary for non-ClassDef classes
      static void dmtpc_Dictionary() {
         GenerateInitInstance()->GetClass();
      }

   }
}

namespace dmtpc {
namespace analysis {
   namespace ROOTDict {
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance();
      static void dmtpccLcLanalysis_Dictionary();

      // Function generating the singleton type initializer
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance()
      {
         static ::ROOT::TGenericClassInfo 
            instance("dmtpc::analysis", 0 /*version*/, "./include/TrackFitter.hh", 26,
                     ::ROOT::DefineBehavior((void*)0,(void*)0),
                     &dmtpccLcLanalysis_Dictionary, 0);
         return &instance;
      }
      // Insure that the inline function is _not_ optimized away by the compiler
      ::ROOT::TGenericClassInfo *(*_R__UNIQUE_(InitFunctionKeeper))() = &GenerateInitInstance;  
      // Static variable to force the class initialization
      static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance(); R__UseDummy(_R__UNIQUE_(Init));

      // Dictionary for non-ClassDef classes
      static void dmtpccLcLanalysis_Dictionary() {
         GenerateInitInstance()->GetClass();
      }

   }
}
}

namespace ROOTDict {
   void dmtpccLcLanalysiscLcLAnalysisConfig_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void dmtpccLcLanalysiscLcLAnalysisConfig_Dictionary();
   static void *new_dmtpccLcLanalysiscLcLAnalysisConfig(void *p = 0);
   static void *newArray_dmtpccLcLanalysiscLcLAnalysisConfig(Long_t size, void *p);
   static void delete_dmtpccLcLanalysiscLcLAnalysisConfig(void *p);
   static void deleteArray_dmtpccLcLanalysiscLcLAnalysisConfig(void *p);
   static void destruct_dmtpccLcLanalysiscLcLAnalysisConfig(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::dmtpc::analysis::AnalysisConfig*)
   {
      ::dmtpc::analysis::AnalysisConfig *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::dmtpc::analysis::AnalysisConfig),0);
      static ::ROOT::TGenericClassInfo 
         instance("dmtpc::analysis::AnalysisConfig", "./include/AnalysisConfig.hh", 15,
                  typeid(::dmtpc::analysis::AnalysisConfig), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &dmtpccLcLanalysiscLcLAnalysisConfig_Dictionary, isa_proxy, 0,
                  sizeof(::dmtpc::analysis::AnalysisConfig) );
      instance.SetNew(&new_dmtpccLcLanalysiscLcLAnalysisConfig);
      instance.SetNewArray(&newArray_dmtpccLcLanalysiscLcLAnalysisConfig);
      instance.SetDelete(&delete_dmtpccLcLanalysiscLcLAnalysisConfig);
      instance.SetDeleteArray(&deleteArray_dmtpccLcLanalysiscLcLAnalysisConfig);
      instance.SetDestructor(&destruct_dmtpccLcLanalysiscLcLAnalysisConfig);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::dmtpc::analysis::AnalysisConfig*)
   {
      return GenerateInitInstanceLocal((::dmtpc::analysis::AnalysisConfig*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::dmtpc::analysis::AnalysisConfig*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void dmtpccLcLanalysiscLcLAnalysisConfig_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::dmtpc::analysis::AnalysisConfig*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace dmtpc {
namespace analysis {
namespace cleanskim {
   namespace ROOTDict {
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance();
      static void dmtpccLcLanalysiscLcLcleanskim_Dictionary();

      // Function generating the singleton type initializer
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance()
      {
         static ::ROOT::TGenericClassInfo 
            instance("dmtpc::analysis::cleanskim", 0 /*version*/, "./include/CleanSkimFunctions.hh", 43,
                     ::ROOT::DefineBehavior((void*)0,(void*)0),
                     &dmtpccLcLanalysiscLcLcleanskim_Dictionary, 0);
         return &instance;
      }
      // Insure that the inline function is _not_ optimized away by the compiler
      ::ROOT::TGenericClassInfo *(*_R__UNIQUE_(InitFunctionKeeper))() = &GenerateInitInstance;  
      // Static variable to force the class initialization
      static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance(); R__UseDummy(_R__UNIQUE_(Init));

      // Dictionary for non-ClassDef classes
      static void dmtpccLcLanalysiscLcLcleanskim_Dictionary() {
         GenerateInitInstance()->GetClass();
      }

   }
}
}
}

namespace ROOTDict {
   void dmtpccLcLanalysiscLcLcleanskimcLcLConfig_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void dmtpccLcLanalysiscLcLcleanskimcLcLConfig_Dictionary();
   static void *new_dmtpccLcLanalysiscLcLcleanskimcLcLConfig(void *p = 0);
   static void *newArray_dmtpccLcLanalysiscLcLcleanskimcLcLConfig(Long_t size, void *p);
   static void delete_dmtpccLcLanalysiscLcLcleanskimcLcLConfig(void *p);
   static void deleteArray_dmtpccLcLanalysiscLcLcleanskimcLcLConfig(void *p);
   static void destruct_dmtpccLcLanalysiscLcLcleanskimcLcLConfig(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::dmtpc::analysis::cleanskim::Config*)
   {
      ::dmtpc::analysis::cleanskim::Config *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::dmtpc::analysis::cleanskim::Config),0);
      static ::ROOT::TGenericClassInfo 
         instance("dmtpc::analysis::cleanskim::Config", "./include/CleanSkimConfig.hh", 55,
                  typeid(::dmtpc::analysis::cleanskim::Config), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &dmtpccLcLanalysiscLcLcleanskimcLcLConfig_Dictionary, isa_proxy, 0,
                  sizeof(::dmtpc::analysis::cleanskim::Config) );
      instance.SetNew(&new_dmtpccLcLanalysiscLcLcleanskimcLcLConfig);
      instance.SetNewArray(&newArray_dmtpccLcLanalysiscLcLcleanskimcLcLConfig);
      instance.SetDelete(&delete_dmtpccLcLanalysiscLcLcleanskimcLcLConfig);
      instance.SetDeleteArray(&deleteArray_dmtpccLcLanalysiscLcLcleanskimcLcLConfig);
      instance.SetDestructor(&destruct_dmtpccLcLanalysiscLcLcleanskimcLcLConfig);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::dmtpc::analysis::cleanskim::Config*)
   {
      return GenerateInitInstanceLocal((::dmtpc::analysis::cleanskim::Config*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::dmtpc::analysis::cleanskim::Config*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void dmtpccLcLanalysiscLcLcleanskimcLcLConfig_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::dmtpc::analysis::cleanskim::Config*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void dmtpccLcLanalysiscLcLCluster_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_dmtpccLcLanalysiscLcLCluster(void *p = 0);
   static void *newArray_dmtpccLcLanalysiscLcLCluster(Long_t size, void *p);
   static void delete_dmtpccLcLanalysiscLcLCluster(void *p);
   static void deleteArray_dmtpccLcLanalysiscLcLCluster(void *p);
   static void destruct_dmtpccLcLanalysiscLcLCluster(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::dmtpc::analysis::Cluster*)
   {
      ::dmtpc::analysis::Cluster *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::dmtpc::analysis::Cluster >(0);
      static ::ROOT::TGenericClassInfo 
         instance("dmtpc::analysis::Cluster", ::dmtpc::analysis::Cluster::Class_Version(), "./include/ClusterImage.hh", 15,
                  typeid(::dmtpc::analysis::Cluster), ::ROOT::DefineBehavior(ptr, ptr),
                  &::dmtpc::analysis::Cluster::Dictionary, isa_proxy, 4,
                  sizeof(::dmtpc::analysis::Cluster) );
      instance.SetNew(&new_dmtpccLcLanalysiscLcLCluster);
      instance.SetNewArray(&newArray_dmtpccLcLanalysiscLcLCluster);
      instance.SetDelete(&delete_dmtpccLcLanalysiscLcLCluster);
      instance.SetDeleteArray(&deleteArray_dmtpccLcLanalysiscLcLCluster);
      instance.SetDestructor(&destruct_dmtpccLcLanalysiscLcLCluster);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::dmtpc::analysis::Cluster*)
   {
      return GenerateInitInstanceLocal((::dmtpc::analysis::Cluster*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::dmtpc::analysis::Cluster*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void dmtpccLcLanalysiscLcLClusterImage_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_dmtpccLcLanalysiscLcLClusterImage(void *p = 0);
   static void *newArray_dmtpccLcLanalysiscLcLClusterImage(Long_t size, void *p);
   static void delete_dmtpccLcLanalysiscLcLClusterImage(void *p);
   static void deleteArray_dmtpccLcLanalysiscLcLClusterImage(void *p);
   static void destruct_dmtpccLcLanalysiscLcLClusterImage(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::dmtpc::analysis::ClusterImage*)
   {
      ::dmtpc::analysis::ClusterImage *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::dmtpc::analysis::ClusterImage >(0);
      static ::ROOT::TGenericClassInfo 
         instance("dmtpc::analysis::ClusterImage", ::dmtpc::analysis::ClusterImage::Class_Version(), "./include/ClusterImage.hh", 27,
                  typeid(::dmtpc::analysis::ClusterImage), ::ROOT::DefineBehavior(ptr, ptr),
                  &::dmtpc::analysis::ClusterImage::Dictionary, isa_proxy, 4,
                  sizeof(::dmtpc::analysis::ClusterImage) );
      instance.SetNew(&new_dmtpccLcLanalysiscLcLClusterImage);
      instance.SetNewArray(&newArray_dmtpccLcLanalysiscLcLClusterImage);
      instance.SetDelete(&delete_dmtpccLcLanalysiscLcLClusterImage);
      instance.SetDeleteArray(&deleteArray_dmtpccLcLanalysiscLcLClusterImage);
      instance.SetDestructor(&destruct_dmtpccLcLanalysiscLcLClusterImage);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::dmtpc::analysis::ClusterImage*)
   {
      return GenerateInitInstanceLocal((::dmtpc::analysis::ClusterImage*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::dmtpc::analysis::ClusterImage*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void dmtpccLcLanalysiscLcLSkimDataset_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void dmtpccLcLanalysiscLcLSkimDataset_Dictionary();
   static void *new_dmtpccLcLanalysiscLcLSkimDataset(void *p = 0);
   static void *newArray_dmtpccLcLanalysiscLcLSkimDataset(Long_t size, void *p);
   static void delete_dmtpccLcLanalysiscLcLSkimDataset(void *p);
   static void deleteArray_dmtpccLcLanalysiscLcLSkimDataset(void *p);
   static void destruct_dmtpccLcLanalysiscLcLSkimDataset(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::dmtpc::analysis::SkimDataset*)
   {
      ::dmtpc::analysis::SkimDataset *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::dmtpc::analysis::SkimDataset),0);
      static ::ROOT::TGenericClassInfo 
         instance("dmtpc::analysis::SkimDataset", "./include/SkimDataset.hh", 41,
                  typeid(::dmtpc::analysis::SkimDataset), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &dmtpccLcLanalysiscLcLSkimDataset_Dictionary, isa_proxy, 0,
                  sizeof(::dmtpc::analysis::SkimDataset) );
      instance.SetNew(&new_dmtpccLcLanalysiscLcLSkimDataset);
      instance.SetNewArray(&newArray_dmtpccLcLanalysiscLcLSkimDataset);
      instance.SetDelete(&delete_dmtpccLcLanalysiscLcLSkimDataset);
      instance.SetDeleteArray(&deleteArray_dmtpccLcLanalysiscLcLSkimDataset);
      instance.SetDestructor(&destruct_dmtpccLcLanalysiscLcLSkimDataset);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::dmtpc::analysis::SkimDataset*)
   {
      return GenerateInitInstanceLocal((::dmtpc::analysis::SkimDataset*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::dmtpc::analysis::SkimDataset*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void dmtpccLcLanalysiscLcLSkimDataset_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::dmtpc::analysis::SkimDataset*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void dmtpccLcLanalysiscLcLGainMap_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_dmtpccLcLanalysiscLcLGainMap(void *p = 0);
   static void *newArray_dmtpccLcLanalysiscLcLGainMap(Long_t size, void *p);
   static void delete_dmtpccLcLanalysiscLcLGainMap(void *p);
   static void deleteArray_dmtpccLcLanalysiscLcLGainMap(void *p);
   static void destruct_dmtpccLcLanalysiscLcLGainMap(void *p);
   static void streamer_dmtpccLcLanalysiscLcLGainMap(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::dmtpc::analysis::GainMap*)
   {
      ::dmtpc::analysis::GainMap *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::dmtpc::analysis::GainMap >(0);
      static ::ROOT::TGenericClassInfo 
         instance("dmtpc::analysis::GainMap", ::dmtpc::analysis::GainMap::Class_Version(), "./include/GainMap.hh", 19,
                  typeid(::dmtpc::analysis::GainMap), ::ROOT::DefineBehavior(ptr, ptr),
                  &::dmtpc::analysis::GainMap::Dictionary, isa_proxy, 0,
                  sizeof(::dmtpc::analysis::GainMap) );
      instance.SetNew(&new_dmtpccLcLanalysiscLcLGainMap);
      instance.SetNewArray(&newArray_dmtpccLcLanalysiscLcLGainMap);
      instance.SetDelete(&delete_dmtpccLcLanalysiscLcLGainMap);
      instance.SetDeleteArray(&deleteArray_dmtpccLcLanalysiscLcLGainMap);
      instance.SetDestructor(&destruct_dmtpccLcLanalysiscLcLGainMap);
      instance.SetStreamerFunc(&streamer_dmtpccLcLanalysiscLcLGainMap);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::dmtpc::analysis::GainMap*)
   {
      return GenerateInitInstanceLocal((::dmtpc::analysis::GainMap*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::dmtpc::analysis::GainMap*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void dmtpccLcLanalysiscLcLStitcher_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_dmtpccLcLanalysiscLcLStitcher(void *p = 0);
   static void *newArray_dmtpccLcLanalysiscLcLStitcher(Long_t size, void *p);
   static void delete_dmtpccLcLanalysiscLcLStitcher(void *p);
   static void deleteArray_dmtpccLcLanalysiscLcLStitcher(void *p);
   static void destruct_dmtpccLcLanalysiscLcLStitcher(void *p);
   static void streamer_dmtpccLcLanalysiscLcLStitcher(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::dmtpc::analysis::Stitcher*)
   {
      ::dmtpc::analysis::Stitcher *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::dmtpc::analysis::Stitcher >(0);
      static ::ROOT::TGenericClassInfo 
         instance("dmtpc::analysis::Stitcher", ::dmtpc::analysis::Stitcher::Class_Version(), "./include/Stitcher.hh", 24,
                  typeid(::dmtpc::analysis::Stitcher), ::ROOT::DefineBehavior(ptr, ptr),
                  &::dmtpc::analysis::Stitcher::Dictionary, isa_proxy, 0,
                  sizeof(::dmtpc::analysis::Stitcher) );
      instance.SetNew(&new_dmtpccLcLanalysiscLcLStitcher);
      instance.SetNewArray(&newArray_dmtpccLcLanalysiscLcLStitcher);
      instance.SetDelete(&delete_dmtpccLcLanalysiscLcLStitcher);
      instance.SetDeleteArray(&deleteArray_dmtpccLcLanalysiscLcLStitcher);
      instance.SetDestructor(&destruct_dmtpccLcLanalysiscLcLStitcher);
      instance.SetStreamerFunc(&streamer_dmtpccLcLanalysiscLcLStitcher);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::dmtpc::analysis::Stitcher*)
   {
      return GenerateInitInstanceLocal((::dmtpc::analysis::Stitcher*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::dmtpc::analysis::Stitcher*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void dmtpccLcLanalysiscLcLSkimEvent_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_dmtpccLcLanalysiscLcLSkimEvent(void *p = 0);
   static void *newArray_dmtpccLcLanalysiscLcLSkimEvent(Long_t size, void *p);
   static void delete_dmtpccLcLanalysiscLcLSkimEvent(void *p);
   static void deleteArray_dmtpccLcLanalysiscLcLSkimEvent(void *p);
   static void destruct_dmtpccLcLanalysiscLcLSkimEvent(void *p);
   static void streamer_dmtpccLcLanalysiscLcLSkimEvent(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::dmtpc::analysis::SkimEvent*)
   {
      ::dmtpc::analysis::SkimEvent *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::dmtpc::analysis::SkimEvent >(0);
      static ::ROOT::TGenericClassInfo 
         instance("dmtpc::analysis::SkimEvent", ::dmtpc::analysis::SkimEvent::Class_Version(), "./include/SkimEvent.hh", 127,
                  typeid(::dmtpc::analysis::SkimEvent), ::ROOT::DefineBehavior(ptr, ptr),
                  &::dmtpc::analysis::SkimEvent::Dictionary, isa_proxy, 0,
                  sizeof(::dmtpc::analysis::SkimEvent) );
      instance.SetNew(&new_dmtpccLcLanalysiscLcLSkimEvent);
      instance.SetNewArray(&newArray_dmtpccLcLanalysiscLcLSkimEvent);
      instance.SetDelete(&delete_dmtpccLcLanalysiscLcLSkimEvent);
      instance.SetDeleteArray(&deleteArray_dmtpccLcLanalysiscLcLSkimEvent);
      instance.SetDestructor(&destruct_dmtpccLcLanalysiscLcLSkimEvent);
      instance.SetStreamerFunc(&streamer_dmtpccLcLanalysiscLcLSkimEvent);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::dmtpc::analysis::SkimEvent*)
   {
      return GenerateInitInstanceLocal((::dmtpc::analysis::SkimEvent*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::dmtpc::analysis::SkimEvent*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace dmtpc {
namespace analysis {
namespace clusteralgo {
   namespace ROOTDict {
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance();
      static void dmtpccLcLanalysiscLcLclusteralgo_Dictionary();

      // Function generating the singleton type initializer
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance()
      {
         static ::ROOT::TGenericClassInfo 
            instance("dmtpc::analysis::clusteralgo", 0 /*version*/, "./include/ClusterAlgo.hh", 19,
                     ::ROOT::DefineBehavior((void*)0,(void*)0),
                     &dmtpccLcLanalysiscLcLclusteralgo_Dictionary, 0);
         return &instance;
      }
      // Insure that the inline function is _not_ optimized away by the compiler
      ::ROOT::TGenericClassInfo *(*_R__UNIQUE_(InitFunctionKeeper))() = &GenerateInitInstance;  
      // Static variable to force the class initialization
      static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance(); R__UseDummy(_R__UNIQUE_(Init));

      // Dictionary for non-ClassDef classes
      static void dmtpccLcLanalysiscLcLclusteralgo_Dictionary() {
         GenerateInitInstance()->GetClass();
      }

   }
}
}
}

namespace ROOTDict {
   void dmtpccLcLanalysiscLcLGainTree_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_dmtpccLcLanalysiscLcLGainTree(void *p = 0);
   static void *newArray_dmtpccLcLanalysiscLcLGainTree(Long_t size, void *p);
   static void delete_dmtpccLcLanalysiscLcLGainTree(void *p);
   static void deleteArray_dmtpccLcLanalysiscLcLGainTree(void *p);
   static void destruct_dmtpccLcLanalysiscLcLGainTree(void *p);
   static void streamer_dmtpccLcLanalysiscLcLGainTree(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::dmtpc::analysis::GainTree*)
   {
      ::dmtpc::analysis::GainTree *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::dmtpc::analysis::GainTree >(0);
      static ::ROOT::TGenericClassInfo 
         instance("dmtpc::analysis::GainTree", ::dmtpc::analysis::GainTree::Class_Version(), "./include/GainTree.hh", 36,
                  typeid(::dmtpc::analysis::GainTree), ::ROOT::DefineBehavior(ptr, ptr),
                  &::dmtpc::analysis::GainTree::Dictionary, isa_proxy, 0,
                  sizeof(::dmtpc::analysis::GainTree) );
      instance.SetNew(&new_dmtpccLcLanalysiscLcLGainTree);
      instance.SetNewArray(&newArray_dmtpccLcLanalysiscLcLGainTree);
      instance.SetDelete(&delete_dmtpccLcLanalysiscLcLGainTree);
      instance.SetDeleteArray(&deleteArray_dmtpccLcLanalysiscLcLGainTree);
      instance.SetDestructor(&destruct_dmtpccLcLanalysiscLcLGainTree);
      instance.SetStreamerFunc(&streamer_dmtpccLcLanalysiscLcLGainTree);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::dmtpc::analysis::GainTree*)
   {
      return GenerateInitInstanceLocal((::dmtpc::analysis::GainTree*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::dmtpc::analysis::GainTree*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void dmtpccLcLanalysiscLcLHVLog_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void dmtpccLcLanalysiscLcLHVLog_Dictionary();
   static void delete_dmtpccLcLanalysiscLcLHVLog(void *p);
   static void deleteArray_dmtpccLcLanalysiscLcLHVLog(void *p);
   static void destruct_dmtpccLcLanalysiscLcLHVLog(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::dmtpc::analysis::HVLog*)
   {
      ::dmtpc::analysis::HVLog *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::dmtpc::analysis::HVLog),0);
      static ::ROOT::TGenericClassInfo 
         instance("dmtpc::analysis::HVLog", "./include/HVLog.hh", 15,
                  typeid(::dmtpc::analysis::HVLog), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &dmtpccLcLanalysiscLcLHVLog_Dictionary, isa_proxy, 0,
                  sizeof(::dmtpc::analysis::HVLog) );
      instance.SetDelete(&delete_dmtpccLcLanalysiscLcLHVLog);
      instance.SetDeleteArray(&deleteArray_dmtpccLcLanalysiscLcLHVLog);
      instance.SetDestructor(&destruct_dmtpccLcLanalysiscLcLHVLog);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::dmtpc::analysis::HVLog*)
   {
      return GenerateInitInstanceLocal((::dmtpc::analysis::HVLog*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::dmtpc::analysis::HVLog*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void dmtpccLcLanalysiscLcLHVLog_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::dmtpc::analysis::HVLog*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void dmtpccLcLanalysiscLcLMCTruth_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_dmtpccLcLanalysiscLcLMCTruth(void *p = 0);
   static void *newArray_dmtpccLcLanalysiscLcLMCTruth(Long_t size, void *p);
   static void delete_dmtpccLcLanalysiscLcLMCTruth(void *p);
   static void deleteArray_dmtpccLcLanalysiscLcLMCTruth(void *p);
   static void destruct_dmtpccLcLanalysiscLcLMCTruth(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::dmtpc::analysis::MCTruth*)
   {
      ::dmtpc::analysis::MCTruth *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::dmtpc::analysis::MCTruth >(0);
      static ::ROOT::TGenericClassInfo 
         instance("dmtpc::analysis::MCTruth", ::dmtpc::analysis::MCTruth::Class_Version(), "./include/MCTruth.hh", 20,
                  typeid(::dmtpc::analysis::MCTruth), ::ROOT::DefineBehavior(ptr, ptr),
                  &::dmtpc::analysis::MCTruth::Dictionary, isa_proxy, 4,
                  sizeof(::dmtpc::analysis::MCTruth) );
      instance.SetNew(&new_dmtpccLcLanalysiscLcLMCTruth);
      instance.SetNewArray(&newArray_dmtpccLcLanalysiscLcLMCTruth);
      instance.SetDelete(&delete_dmtpccLcLanalysiscLcLMCTruth);
      instance.SetDeleteArray(&deleteArray_dmtpccLcLanalysiscLcLMCTruth);
      instance.SetDestructor(&destruct_dmtpccLcLanalysiscLcLMCTruth);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::dmtpc::analysis::MCTruth*)
   {
      return GenerateInitInstanceLocal((::dmtpc::analysis::MCTruth*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::dmtpc::analysis::MCTruth*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void dmtpccLcLanalysiscLcLMCTPCDataset_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void dmtpccLcLanalysiscLcLMCTPCDataset_Dictionary();
   static void *new_dmtpccLcLanalysiscLcLMCTPCDataset(void *p = 0);
   static void *newArray_dmtpccLcLanalysiscLcLMCTPCDataset(Long_t size, void *p);
   static void delete_dmtpccLcLanalysiscLcLMCTPCDataset(void *p);
   static void deleteArray_dmtpccLcLanalysiscLcLMCTPCDataset(void *p);
   static void destruct_dmtpccLcLanalysiscLcLMCTPCDataset(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::dmtpc::analysis::MCTPCDataset*)
   {
      ::dmtpc::analysis::MCTPCDataset *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::dmtpc::analysis::MCTPCDataset),0);
      static ::ROOT::TGenericClassInfo 
         instance("dmtpc::analysis::MCTPCDataset", "./include/MCTPCDataset.hh", 16,
                  typeid(::dmtpc::analysis::MCTPCDataset), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &dmtpccLcLanalysiscLcLMCTPCDataset_Dictionary, isa_proxy, 0,
                  sizeof(::dmtpc::analysis::MCTPCDataset) );
      instance.SetNew(&new_dmtpccLcLanalysiscLcLMCTPCDataset);
      instance.SetNewArray(&newArray_dmtpccLcLanalysiscLcLMCTPCDataset);
      instance.SetDelete(&delete_dmtpccLcLanalysiscLcLMCTPCDataset);
      instance.SetDeleteArray(&deleteArray_dmtpccLcLanalysiscLcLMCTPCDataset);
      instance.SetDestructor(&destruct_dmtpccLcLanalysiscLcLMCTPCDataset);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::dmtpc::analysis::MCTPCDataset*)
   {
      return GenerateInitInstanceLocal((::dmtpc::analysis::MCTPCDataset*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::dmtpc::analysis::MCTPCDataset*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void dmtpccLcLanalysiscLcLMCTPCDataset_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::dmtpc::analysis::MCTPCDataset*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace dmtpc {
namespace analysis {
namespace truthalgo {
   namespace ROOTDict {
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance();
      static void dmtpccLcLanalysiscLcLtruthalgo_Dictionary();

      // Function generating the singleton type initializer
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance()
      {
         static ::ROOT::TGenericClassInfo 
            instance("dmtpc::analysis::truthalgo", 0 /*version*/, "./include/MCTruthAlgo.hh", 25,
                     ::ROOT::DefineBehavior((void*)0,(void*)0),
                     &dmtpccLcLanalysiscLcLtruthalgo_Dictionary, 0);
         return &instance;
      }
      // Insure that the inline function is _not_ optimized away by the compiler
      ::ROOT::TGenericClassInfo *(*_R__UNIQUE_(InitFunctionKeeper))() = &GenerateInitInstance;  
      // Static variable to force the class initialization
      static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance(); R__UseDummy(_R__UNIQUE_(Init));

      // Dictionary for non-ClassDef classes
      static void dmtpccLcLanalysiscLcLtruthalgo_Dictionary() {
         GenerateInitInstance()->GetClass();
      }

   }
}
}
}

namespace ROOTDict {
   void dmtpccLcLanalysiscLcLPlaylist_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_dmtpccLcLanalysiscLcLPlaylist(void *p = 0);
   static void *newArray_dmtpccLcLanalysiscLcLPlaylist(Long_t size, void *p);
   static void delete_dmtpccLcLanalysiscLcLPlaylist(void *p);
   static void deleteArray_dmtpccLcLanalysiscLcLPlaylist(void *p);
   static void destruct_dmtpccLcLanalysiscLcLPlaylist(void *p);
   static void streamer_dmtpccLcLanalysiscLcLPlaylist(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::dmtpc::analysis::Playlist*)
   {
      ::dmtpc::analysis::Playlist *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::dmtpc::analysis::Playlist >(0);
      static ::ROOT::TGenericClassInfo 
         instance("dmtpc::analysis::Playlist", ::dmtpc::analysis::Playlist::Class_Version(), "./include/Playlist.hh", 14,
                  typeid(::dmtpc::analysis::Playlist), ::ROOT::DefineBehavior(ptr, ptr),
                  &::dmtpc::analysis::Playlist::Dictionary, isa_proxy, 0,
                  sizeof(::dmtpc::analysis::Playlist) );
      instance.SetNew(&new_dmtpccLcLanalysiscLcLPlaylist);
      instance.SetNewArray(&newArray_dmtpccLcLanalysiscLcLPlaylist);
      instance.SetDelete(&delete_dmtpccLcLanalysiscLcLPlaylist);
      instance.SetDeleteArray(&deleteArray_dmtpccLcLanalysiscLcLPlaylist);
      instance.SetDestructor(&destruct_dmtpccLcLanalysiscLcLPlaylist);
      instance.SetStreamerFunc(&streamer_dmtpccLcLanalysiscLcLPlaylist);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::dmtpc::analysis::Playlist*)
   {
      return GenerateInitInstanceLocal((::dmtpc::analysis::Playlist*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::dmtpc::analysis::Playlist*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void dmtpccLcLanalysiscLcLTrackFitter_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_dmtpccLcLanalysiscLcLTrackFitter(void *p);
   static void deleteArray_dmtpccLcLanalysiscLcLTrackFitter(void *p);
   static void destruct_dmtpccLcLanalysiscLcLTrackFitter(void *p);
   static void streamer_dmtpccLcLanalysiscLcLTrackFitter(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::dmtpc::analysis::TrackFitter*)
   {
      ::dmtpc::analysis::TrackFitter *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::dmtpc::analysis::TrackFitter >(0);
      static ::ROOT::TGenericClassInfo 
         instance("dmtpc::analysis::TrackFitter", ::dmtpc::analysis::TrackFitter::Class_Version(), "./include/TrackFitter.hh", 28,
                  typeid(::dmtpc::analysis::TrackFitter), ::ROOT::DefineBehavior(ptr, ptr),
                  &::dmtpc::analysis::TrackFitter::Dictionary, isa_proxy, 0,
                  sizeof(::dmtpc::analysis::TrackFitter) );
      instance.SetDelete(&delete_dmtpccLcLanalysiscLcLTrackFitter);
      instance.SetDeleteArray(&deleteArray_dmtpccLcLanalysiscLcLTrackFitter);
      instance.SetDestructor(&destruct_dmtpccLcLanalysiscLcLTrackFitter);
      instance.SetStreamerFunc(&streamer_dmtpccLcLanalysiscLcLTrackFitter);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::dmtpc::analysis::TrackFitter*)
   {
      return GenerateInitInstanceLocal((::dmtpc::analysis::TrackFitter*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::dmtpc::analysis::TrackFitter*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void dmtpccLcLanalysiscLcLTrackFittercLcLParam_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_dmtpccLcLanalysiscLcLTrackFittercLcLParam(void *p = 0);
   static void *newArray_dmtpccLcLanalysiscLcLTrackFittercLcLParam(Long_t size, void *p);
   static void delete_dmtpccLcLanalysiscLcLTrackFittercLcLParam(void *p);
   static void deleteArray_dmtpccLcLanalysiscLcLTrackFittercLcLParam(void *p);
   static void destruct_dmtpccLcLanalysiscLcLTrackFittercLcLParam(void *p);
   static void streamer_dmtpccLcLanalysiscLcLTrackFittercLcLParam(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::dmtpc::analysis::TrackFitter::Param*)
   {
      ::dmtpc::analysis::TrackFitter::Param *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::dmtpc::analysis::TrackFitter::Param >(0);
      static ::ROOT::TGenericClassInfo 
         instance("dmtpc::analysis::TrackFitter::Param", ::dmtpc::analysis::TrackFitter::Param::Class_Version(), "./include/TrackFitter.hh", 51,
                  typeid(::dmtpc::analysis::TrackFitter::Param), ::ROOT::DefineBehavior(ptr, ptr),
                  &::dmtpc::analysis::TrackFitter::Param::Dictionary, isa_proxy, 0,
                  sizeof(::dmtpc::analysis::TrackFitter::Param) );
      instance.SetNew(&new_dmtpccLcLanalysiscLcLTrackFittercLcLParam);
      instance.SetNewArray(&newArray_dmtpccLcLanalysiscLcLTrackFittercLcLParam);
      instance.SetDelete(&delete_dmtpccLcLanalysiscLcLTrackFittercLcLParam);
      instance.SetDeleteArray(&deleteArray_dmtpccLcLanalysiscLcLTrackFittercLcLParam);
      instance.SetDestructor(&destruct_dmtpccLcLanalysiscLcLTrackFittercLcLParam);
      instance.SetStreamerFunc(&streamer_dmtpccLcLanalysiscLcLTrackFittercLcLParam);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::dmtpc::analysis::TrackFitter::Param*)
   {
      return GenerateInitInstanceLocal((::dmtpc::analysis::TrackFitter::Param*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::dmtpc::analysis::TrackFitter::Param*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void dmtpccLcLanalysiscLcLTrackFittercLcLResult_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_dmtpccLcLanalysiscLcLTrackFittercLcLResult(void *p = 0);
   static void *newArray_dmtpccLcLanalysiscLcLTrackFittercLcLResult(Long_t size, void *p);
   static void delete_dmtpccLcLanalysiscLcLTrackFittercLcLResult(void *p);
   static void deleteArray_dmtpccLcLanalysiscLcLTrackFittercLcLResult(void *p);
   static void destruct_dmtpccLcLanalysiscLcLTrackFittercLcLResult(void *p);
   static void streamer_dmtpccLcLanalysiscLcLTrackFittercLcLResult(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::dmtpc::analysis::TrackFitter::Result*)
   {
      ::dmtpc::analysis::TrackFitter::Result *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::dmtpc::analysis::TrackFitter::Result >(0);
      static ::ROOT::TGenericClassInfo 
         instance("dmtpc::analysis::TrackFitter::Result", ::dmtpc::analysis::TrackFitter::Result::Class_Version(), "./include/TrackFitter.hh", 65,
                  typeid(::dmtpc::analysis::TrackFitter::Result), ::ROOT::DefineBehavior(ptr, ptr),
                  &::dmtpc::analysis::TrackFitter::Result::Dictionary, isa_proxy, 0,
                  sizeof(::dmtpc::analysis::TrackFitter::Result) );
      instance.SetNew(&new_dmtpccLcLanalysiscLcLTrackFittercLcLResult);
      instance.SetNewArray(&newArray_dmtpccLcLanalysiscLcLTrackFittercLcLResult);
      instance.SetDelete(&delete_dmtpccLcLanalysiscLcLTrackFittercLcLResult);
      instance.SetDeleteArray(&deleteArray_dmtpccLcLanalysiscLcLTrackFittercLcLResult);
      instance.SetDestructor(&destruct_dmtpccLcLanalysiscLcLTrackFittercLcLResult);
      instance.SetStreamerFunc(&streamer_dmtpccLcLanalysiscLcLTrackFittercLcLResult);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::dmtpc::analysis::TrackFitter::Result*)
   {
      return GenerateInitInstanceLocal((::dmtpc::analysis::TrackFitter::Result*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::dmtpc::analysis::TrackFitter::Result*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

      namespace dmtpc {
         namespace analysis {
//______________________________________________________________________________
atomic_TClass_ptr Cluster::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *Cluster::Class_Name()
{
   return "dmtpc::analysis::Cluster";
}

//______________________________________________________________________________
const char *Cluster::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::dmtpc::analysis::Cluster*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Cluster::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::dmtpc::analysis::Cluster*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Cluster::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::dmtpc::analysis::Cluster*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Cluster::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::dmtpc::analysis::Cluster*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace dmtpc::analysis
} // namespace dmtpc::analysis
      namespace dmtpc {
         namespace analysis {
//______________________________________________________________________________
atomic_TClass_ptr ClusterImage::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *ClusterImage::Class_Name()
{
   return "dmtpc::analysis::ClusterImage";
}

//______________________________________________________________________________
const char *ClusterImage::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::dmtpc::analysis::ClusterImage*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ClusterImage::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::dmtpc::analysis::ClusterImage*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ClusterImage::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::dmtpc::analysis::ClusterImage*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ClusterImage::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::dmtpc::analysis::ClusterImage*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace dmtpc::analysis
} // namespace dmtpc::analysis
      namespace dmtpc {
         namespace analysis {
//______________________________________________________________________________
atomic_TClass_ptr GainMap::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *GainMap::Class_Name()
{
   return "dmtpc::analysis::GainMap";
}

//______________________________________________________________________________
const char *GainMap::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::dmtpc::analysis::GainMap*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int GainMap::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::dmtpc::analysis::GainMap*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void GainMap::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::dmtpc::analysis::GainMap*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *GainMap::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::dmtpc::analysis::GainMap*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace dmtpc::analysis
} // namespace dmtpc::analysis
      namespace dmtpc {
         namespace analysis {
//______________________________________________________________________________
atomic_TClass_ptr Stitcher::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *Stitcher::Class_Name()
{
   return "dmtpc::analysis::Stitcher";
}

//______________________________________________________________________________
const char *Stitcher::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::dmtpc::analysis::Stitcher*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Stitcher::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::dmtpc::analysis::Stitcher*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Stitcher::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::dmtpc::analysis::Stitcher*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Stitcher::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::dmtpc::analysis::Stitcher*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace dmtpc::analysis
} // namespace dmtpc::analysis
      namespace dmtpc {
         namespace analysis {
//______________________________________________________________________________
atomic_TClass_ptr SkimEvent::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *SkimEvent::Class_Name()
{
   return "dmtpc::analysis::SkimEvent";
}

//______________________________________________________________________________
const char *SkimEvent::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::dmtpc::analysis::SkimEvent*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SkimEvent::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::dmtpc::analysis::SkimEvent*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SkimEvent::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::dmtpc::analysis::SkimEvent*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SkimEvent::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::dmtpc::analysis::SkimEvent*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace dmtpc::analysis
} // namespace dmtpc::analysis
      namespace dmtpc {
         namespace analysis {
//______________________________________________________________________________
atomic_TClass_ptr GainTree::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *GainTree::Class_Name()
{
   return "dmtpc::analysis::GainTree";
}

//______________________________________________________________________________
const char *GainTree::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::dmtpc::analysis::GainTree*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int GainTree::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::dmtpc::analysis::GainTree*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void GainTree::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::dmtpc::analysis::GainTree*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *GainTree::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::dmtpc::analysis::GainTree*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace dmtpc::analysis
} // namespace dmtpc::analysis
      namespace dmtpc {
         namespace analysis {
//______________________________________________________________________________
atomic_TClass_ptr MCTruth::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MCTruth::Class_Name()
{
   return "dmtpc::analysis::MCTruth";
}

//______________________________________________________________________________
const char *MCTruth::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::dmtpc::analysis::MCTruth*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCTruth::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::dmtpc::analysis::MCTruth*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCTruth::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::dmtpc::analysis::MCTruth*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCTruth::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::dmtpc::analysis::MCTruth*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace dmtpc::analysis
} // namespace dmtpc::analysis
      namespace dmtpc {
         namespace analysis {
//______________________________________________________________________________
atomic_TClass_ptr Playlist::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *Playlist::Class_Name()
{
   return "dmtpc::analysis::Playlist";
}

//______________________________________________________________________________
const char *Playlist::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::dmtpc::analysis::Playlist*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Playlist::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::dmtpc::analysis::Playlist*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Playlist::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::dmtpc::analysis::Playlist*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Playlist::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::dmtpc::analysis::Playlist*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace dmtpc::analysis
} // namespace dmtpc::analysis
      namespace dmtpc {
         namespace analysis {
//______________________________________________________________________________
atomic_TClass_ptr TrackFitter::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TrackFitter::Class_Name()
{
   return "dmtpc::analysis::TrackFitter";
}

//______________________________________________________________________________
const char *TrackFitter::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::dmtpc::analysis::TrackFitter*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TrackFitter::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::dmtpc::analysis::TrackFitter*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TrackFitter::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::dmtpc::analysis::TrackFitter*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TrackFitter::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::dmtpc::analysis::TrackFitter*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace dmtpc::analysis
} // namespace dmtpc::analysis
      namespace dmtpc {
         namespace analysis {
//______________________________________________________________________________
atomic_TClass_ptr TrackFitter::Param::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TrackFitter::Param::Class_Name()
{
   return "dmtpc::analysis::TrackFitter::Param";
}

//______________________________________________________________________________
const char *TrackFitter::Param::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::dmtpc::analysis::TrackFitter::Param*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TrackFitter::Param::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::dmtpc::analysis::TrackFitter::Param*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TrackFitter::Param::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::dmtpc::analysis::TrackFitter::Param*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TrackFitter::Param::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::dmtpc::analysis::TrackFitter::Param*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace dmtpc::analysis
} // namespace dmtpc::analysis
      namespace dmtpc {
         namespace analysis {
//______________________________________________________________________________
atomic_TClass_ptr TrackFitter::Result::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TrackFitter::Result::Class_Name()
{
   return "dmtpc::analysis::TrackFitter::Result";
}

//______________________________________________________________________________
const char *TrackFitter::Result::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::dmtpc::analysis::TrackFitter::Result*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TrackFitter::Result::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::dmtpc::analysis::TrackFitter::Result*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TrackFitter::Result::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::dmtpc::analysis::TrackFitter::Result*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TrackFitter::Result::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::dmtpc::analysis::TrackFitter::Result*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace dmtpc::analysis
} // namespace dmtpc::analysis
      namespace dmtpc {
         namespace analysis {
//______________________________________________________________________________
void Playlist::Streamer(TBuffer &R__b)
{
   // Stream an object of class dmtpc::analysis::Playlist.

   ::Error("dmtpc::analysis::Playlist::Streamer", "version id <=0 in ClassDef, dummy Streamer() called"); if (R__b.IsReading()) { }
}

} // namespace dmtpc::analysis
} // namespace dmtpc::analysis
//______________________________________________________________________________
      namespace dmtpc {
         namespace analysis {
void Playlist::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class dmtpc::analysis::Playlist.
      TClass *R__cl = ::dmtpc::analysis::Playlist::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "i", &i);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "current_det", (void*)&current_det);
      R__insp.InspectMember("string", (void*)&current_det, "current_det.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "current_run", &current_run);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*cur_dataset", &cur_dataset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*cur_raw_dataset", &cur_raw_dataset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*data_dir", &data_dir);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "type", &type);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_tree", &_tree);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "det_tags", (void*)&det_tags);
      R__insp.InspectMember("vector<string>", (void*)&det_tags, "det_tags.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "run_nums", (void*)&run_nums);
      R__insp.InspectMember("vector<int>", (void*)&run_nums, "run_nums.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "events", (void*)&events);
      R__insp.InspectMember("vector<int>", (void*)&events, "events.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cams", (void*)&cams);
      R__insp.InspectMember("vector<int>", (void*)&cams, "cams.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tracks", (void*)&tracks);
      R__insp.InspectMember("vector<int>", (void*)&tracks, "tracks.", false);
}

} // namespace dmtpc::analysis
} // namespace dmtpc::analysis
namespace ROOTDict {
   // Wrappers around operator new
   static void *new_dmtpccLcLanalysiscLcLPlaylist(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::dmtpc::analysis::Playlist : new ::dmtpc::analysis::Playlist;
   }
   static void *newArray_dmtpccLcLanalysiscLcLPlaylist(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::dmtpc::analysis::Playlist[nElements] : new ::dmtpc::analysis::Playlist[nElements];
   }
   // Wrapper around operator delete
   static void delete_dmtpccLcLanalysiscLcLPlaylist(void *p) {
      delete ((::dmtpc::analysis::Playlist*)p);
   }
   static void deleteArray_dmtpccLcLanalysiscLcLPlaylist(void *p) {
      delete [] ((::dmtpc::analysis::Playlist*)p);
   }
   static void destruct_dmtpccLcLanalysiscLcLPlaylist(void *p) {
      typedef ::dmtpc::analysis::Playlist current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_dmtpccLcLanalysiscLcLPlaylist(TBuffer &buf, void *obj) {
      ((::dmtpc::analysis::Playlist*)obj)->::dmtpc::analysis::Playlist::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::dmtpc::analysis::Playlist

      namespace dmtpc {
         namespace analysis {
//______________________________________________________________________________
void SkimEvent::Streamer(TBuffer &R__b)
{
   // Stream an object of class dmtpc::analysis::SkimEvent.

   //This works around a msvc bug and should be harmless on other platforms
   typedef ::dmtpc::analysis::SkimEvent thisClass;
   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> _eventNumber;
      R__b >> _index;
      R__b >> _runNumber;
      R__b >> _ncamera;
      R__b >> _stitched;
      R__b >> _s3;
      R__b >> _s4;
      {
         vector<std::vector<int> > &R__stl =  _burnin_base;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("_burnin_base streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<int,allocator<int> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<std::vector<int> > &R__stl =  _burnin_this_index;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("_burnin_this_index streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<int,allocator<int> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<std::vector<int> > &R__stl =  _nburnin;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("_nburnin streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<int,allocator<int> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<std::vector<double> > &R__stl =  _theta;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_theta streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<std::vector<double> > &R__stl =  _range;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_range streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<std::vector<double> > &R__stl =  _diffusedRange;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_diffusedRange streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<std::vector<double> > &R__stl =  _phi;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_phi streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<std::vector<double> > &R__stl =  _majoraxis;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_majoraxis streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<std::vector<double> > &R__stl =  _minoraxis;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_minoraxis streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<std::vector<double> > &R__stl =  _E;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_E streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<std::vector<double> > &R__stl =  _EGainMap;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_EGainMap streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<std::vector<double> > &R__stl =  _r;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_r streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<std::vector<double> > &R__stl =  _x;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_x streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<std::vector<double> > &R__stl =  _y;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_y streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<std::vector<double> > &R__stl =  _skewness;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_skewness streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<std::vector<bool> > &R__stl =  _edge;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<bool,allocator<bool> >));
         if (R__tcl1==0) {
            Error("_edge streamer","Missing the TClass object for vector<bool,allocator<bool> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<bool,allocator<bool> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<std::vector<double> > &R__stl =  _cluster_mean;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_cluster_mean streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<std::vector<double> > &R__stl =  _cluster_rms;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_cluster_rms streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<std::vector<int> > &R__stl =  _neighbors;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("_neighbors streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<int,allocator<int> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<std::vector<double> > &R__stl =  _maxpixel;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_maxpixel streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<std::vector<double> > &R__stl =  _cygnus_angle;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_cygnus_angle streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<std::vector<int> > &R__stl =  _npixel;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("_npixel streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<int,allocator<int> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<std::vector<int> > &R__stl =  _npixel_red;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("_npixel_red streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<int,allocator<int> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<std::vector<std::vector<double> > > &R__stl =  _moments;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >));
         if (R__tcl1==0) {
            Error("_moments streamer","Missing the TClass object for vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<std::vector<std::vector<double> > > &R__stl =  _transverse_moments;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >));
         if (R__tcl1==0) {
            Error("_transverse_moments streamer","Missing the TClass object for vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<std::vector<double> > &R__stl =  _ra;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_ra streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<std::vector<double> > &R__stl =  _dec;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_dec streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<std::vector<double> > &R__stl =  _glat;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_glat streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<std::vector<double> > &R__stl =  _glon;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_glon streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<std::vector<double> > &R__stl =  _inactive;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_inactive streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<std::vector<double> > &R__stl =  _crossing;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_crossing streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<int> &R__stl =  _ntracks;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<bool> &R__stl =  _spark;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            bool R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<int> &R__stl =  _lastspark;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  _integral;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  _image_mean;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<int> &R__stl =  _pixels_killed;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  _image_rms;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<int> &R__stl =  _nsparkref;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<int> &R__stl =  _sparkref_base;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<TString> &R__stl =  _cameraSerialNumber;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            TString R__t;
            R__t.Streamer(R__b);
            R__stl.push_back(R__t);
         }
      }
      delete [] _burnin;
      _burnin = new UInt_t[_s3];
      R__b.ReadFastArray(_burnin,_s3);
      delete [] _sparkref;
      _sparkref = new UInt_t[_s4];
      R__b.ReadFastArray(_sparkref,_s4);
      {
         vector<dmtpc::waveform::WaveformVector*> &R__stl =  _waveform_vectors;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(dmtpc::waveform::WaveformVector));
         if (R__tcl1==0) {
            Error("_waveform_vectors streamer","Missing the TClass object for dmtpc::waveform::WaveformVector!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            dmtpc::waveform::WaveformVector* R__t;
            R__t = (dmtpc::waveform::WaveformVector*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<dmtpc::waveform::CspWfVector*> &R__stl =  _cspwf_vectors;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(dmtpc::waveform::CspWfVector));
         if (R__tcl1==0) {
            Error("_cspwf_vectors streamer","Missing the TClass object for dmtpc::waveform::CspWfVector!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            dmtpc::waveform::CspWfVector* R__t;
            R__t = (dmtpc::waveform::CspWfVector*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<dmtpc::waveform::FastWfVector*> &R__stl =  _fastwf_vectors;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(dmtpc::waveform::FastWfVector));
         if (R__tcl1==0) {
            Error("_fastwf_vectors streamer","Missing the TClass object for dmtpc::waveform::FastWfVector!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            dmtpc::waveform::FastWfVector* R__t;
            R__t = (dmtpc::waveform::FastWfVector*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<dmtpc::waveform::PMTWfVector*> &R__stl =  _pmtwf_vectors;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(dmtpc::waveform::PMTWfVector));
         if (R__tcl1==0) {
            Error("_pmtwf_vectors streamer","Missing the TClass object for dmtpc::waveform::PMTWfVector!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            dmtpc::waveform::PMTWfVector* R__t;
            R__t = (dmtpc::waveform::PMTWfVector*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<ClusterImage*> &R__stl =  _clusters;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(dmtpc::analysis::ClusterImage));
         if (R__tcl1==0) {
            Error("_clusters streamer","Missing the TClass object for dmtpc::analysis::ClusterImage!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            dmtpc::analysis::ClusterImage* R__t;
            R__t = (dmtpc::analysis::ClusterImage*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<std::vector<double> > &R__stl =  _nearest_spacer_distance;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_nearest_spacer_distance streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<std::vector<int> > &R__stl =  _nearest_spacer;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("_nearest_spacer streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<int,allocator<int> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      R__b.CheckByteCount(R__s, R__c, thisClass::IsA());
   } else {
      R__c = R__b.WriteVersion(thisClass::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << _eventNumber;
      R__b << _index;
      R__b << _runNumber;
      R__b << _ncamera;
      R__b << _stitched;
      R__b << _s3;
      R__b << _s4;
      {
         vector<std::vector<int> > &R__stl =  _burnin_base;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("_burnin_base streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
            vector<std::vector<int> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<int,allocator<int> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<std::vector<int> > &R__stl =  _burnin_this_index;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("_burnin_this_index streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
            vector<std::vector<int> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<int,allocator<int> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<std::vector<int> > &R__stl =  _nburnin;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("_nburnin streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
            vector<std::vector<int> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<int,allocator<int> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<std::vector<double> > &R__stl =  _theta;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_theta streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<std::vector<double> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<std::vector<double> > &R__stl =  _range;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_range streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<std::vector<double> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<std::vector<double> > &R__stl =  _diffusedRange;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_diffusedRange streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<std::vector<double> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<std::vector<double> > &R__stl =  _phi;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_phi streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<std::vector<double> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<std::vector<double> > &R__stl =  _majoraxis;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_majoraxis streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<std::vector<double> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<std::vector<double> > &R__stl =  _minoraxis;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_minoraxis streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<std::vector<double> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<std::vector<double> > &R__stl =  _E;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_E streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<std::vector<double> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<std::vector<double> > &R__stl =  _EGainMap;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_EGainMap streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<std::vector<double> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<std::vector<double> > &R__stl =  _r;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_r streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<std::vector<double> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<std::vector<double> > &R__stl =  _x;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_x streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<std::vector<double> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<std::vector<double> > &R__stl =  _y;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_y streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<std::vector<double> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<std::vector<double> > &R__stl =  _skewness;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_skewness streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<std::vector<double> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<std::vector<bool> > &R__stl =  _edge;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<bool,allocator<bool> >));
         if (R__tcl1==0) {
            Error("_edge streamer","Missing the TClass object for vector<bool,allocator<bool> >!");
            return;
         }
            vector<std::vector<bool> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<bool,allocator<bool> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<std::vector<double> > &R__stl =  _cluster_mean;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_cluster_mean streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<std::vector<double> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<std::vector<double> > &R__stl =  _cluster_rms;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_cluster_rms streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<std::vector<double> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<std::vector<int> > &R__stl =  _neighbors;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("_neighbors streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
            vector<std::vector<int> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<int,allocator<int> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<std::vector<double> > &R__stl =  _maxpixel;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_maxpixel streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<std::vector<double> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<std::vector<double> > &R__stl =  _cygnus_angle;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_cygnus_angle streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<std::vector<double> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<std::vector<int> > &R__stl =  _npixel;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("_npixel streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
            vector<std::vector<int> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<int,allocator<int> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<std::vector<int> > &R__stl =  _npixel_red;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("_npixel_red streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
            vector<std::vector<int> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<int,allocator<int> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<std::vector<std::vector<double> > > &R__stl =  _moments;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >));
         if (R__tcl1==0) {
            Error("_moments streamer","Missing the TClass object for vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >!");
            return;
         }
            vector<std::vector<std::vector<double> > >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<std::vector<std::vector<double> > > &R__stl =  _transverse_moments;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >));
         if (R__tcl1==0) {
            Error("_transverse_moments streamer","Missing the TClass object for vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >!");
            return;
         }
            vector<std::vector<std::vector<double> > >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<std::vector<double> > &R__stl =  _ra;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_ra streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<std::vector<double> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<std::vector<double> > &R__stl =  _dec;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_dec streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<std::vector<double> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<std::vector<double> > &R__stl =  _glat;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_glat streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<std::vector<double> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<std::vector<double> > &R__stl =  _glon;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_glon streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<std::vector<double> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<std::vector<double> > &R__stl =  _inactive;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_inactive streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<std::vector<double> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<std::vector<double> > &R__stl =  _crossing;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_crossing streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<std::vector<double> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<int> &R__stl =  _ntracks;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<int>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<bool> &R__stl =  _spark;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<bool>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<int> &R__stl =  _lastspark;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<int>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  _integral;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  _image_mean;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<int> &R__stl =  _pixels_killed;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<int>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  _image_rms;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<int> &R__stl =  _nsparkref;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<int>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<int> &R__stl =  _sparkref_base;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<int>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<TString> &R__stl =  _cameraSerialNumber;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<TString>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            ((TString&)(*R__k)).Streamer(R__b);
            }
         }
      }
      R__b.WriteFastArray(_burnin,_s3);
      R__b.WriteFastArray(_sparkref,_s4);
      {
         vector<dmtpc::waveform::WaveformVector*> &R__stl =  _waveform_vectors;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<dmtpc::waveform::WaveformVector*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<dmtpc::waveform::CspWfVector*> &R__stl =  _cspwf_vectors;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<dmtpc::waveform::CspWfVector*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<dmtpc::waveform::FastWfVector*> &R__stl =  _fastwf_vectors;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<dmtpc::waveform::FastWfVector*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<dmtpc::waveform::PMTWfVector*> &R__stl =  _pmtwf_vectors;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<dmtpc::waveform::PMTWfVector*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<ClusterImage*> &R__stl =  _clusters;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<ClusterImage*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<std::vector<double> > &R__stl =  _nearest_spacer_distance;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_nearest_spacer_distance streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<std::vector<double> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<std::vector<int> > &R__stl =  _nearest_spacer;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("_nearest_spacer streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
            vector<std::vector<int> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<int,allocator<int> >*)&(*R__k),R__tcl1);
            }
         }
      }
      R__b.SetByteCount(R__c, kTRUE);
   }
}

} // namespace dmtpc::analysis
} // namespace dmtpc::analysis
//______________________________________________________________________________
      namespace dmtpc {
         namespace analysis {
void SkimEvent::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class dmtpc::analysis::SkimEvent.
      TClass *R__cl = ::dmtpc::analysis::SkimEvent::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_eventNumber", &_eventNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_index", &_index);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_runNumber", &_runNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_ncamera", &_ncamera);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_stitched", &_stitched);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_s3", &_s3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_s4", &_s4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_burnin_base", (void*)&_burnin_base);
      R__insp.InspectMember("vector<std::vector<int> >", (void*)&_burnin_base, "_burnin_base.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_burnin_this_index", (void*)&_burnin_this_index);
      R__insp.InspectMember("vector<std::vector<int> >", (void*)&_burnin_this_index, "_burnin_this_index.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_nburnin", (void*)&_nburnin);
      R__insp.InspectMember("vector<std::vector<int> >", (void*)&_nburnin, "_nburnin.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_theta", (void*)&_theta);
      R__insp.InspectMember("vector<std::vector<double> >", (void*)&_theta, "_theta.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_range", (void*)&_range);
      R__insp.InspectMember("vector<std::vector<double> >", (void*)&_range, "_range.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_diffusedRange", (void*)&_diffusedRange);
      R__insp.InspectMember("vector<std::vector<double> >", (void*)&_diffusedRange, "_diffusedRange.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_phi", (void*)&_phi);
      R__insp.InspectMember("vector<std::vector<double> >", (void*)&_phi, "_phi.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_majoraxis", (void*)&_majoraxis);
      R__insp.InspectMember("vector<std::vector<double> >", (void*)&_majoraxis, "_majoraxis.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_minoraxis", (void*)&_minoraxis);
      R__insp.InspectMember("vector<std::vector<double> >", (void*)&_minoraxis, "_minoraxis.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_E", (void*)&_E);
      R__insp.InspectMember("vector<std::vector<double> >", (void*)&_E, "_E.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_EGainMap", (void*)&_EGainMap);
      R__insp.InspectMember("vector<std::vector<double> >", (void*)&_EGainMap, "_EGainMap.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_r", (void*)&_r);
      R__insp.InspectMember("vector<std::vector<double> >", (void*)&_r, "_r.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_x", (void*)&_x);
      R__insp.InspectMember("vector<std::vector<double> >", (void*)&_x, "_x.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_y", (void*)&_y);
      R__insp.InspectMember("vector<std::vector<double> >", (void*)&_y, "_y.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_skewness", (void*)&_skewness);
      R__insp.InspectMember("vector<std::vector<double> >", (void*)&_skewness, "_skewness.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_edge", (void*)&_edge);
      R__insp.InspectMember("vector<std::vector<bool> >", (void*)&_edge, "_edge.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_cluster_mean", (void*)&_cluster_mean);
      R__insp.InspectMember("vector<std::vector<double> >", (void*)&_cluster_mean, "_cluster_mean.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_cluster_rms", (void*)&_cluster_rms);
      R__insp.InspectMember("vector<std::vector<double> >", (void*)&_cluster_rms, "_cluster_rms.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_neighbors", (void*)&_neighbors);
      R__insp.InspectMember("vector<std::vector<int> >", (void*)&_neighbors, "_neighbors.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_maxpixel", (void*)&_maxpixel);
      R__insp.InspectMember("vector<std::vector<double> >", (void*)&_maxpixel, "_maxpixel.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_cygnus_angle", (void*)&_cygnus_angle);
      R__insp.InspectMember("vector<std::vector<double> >", (void*)&_cygnus_angle, "_cygnus_angle.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_npixel", (void*)&_npixel);
      R__insp.InspectMember("vector<std::vector<int> >", (void*)&_npixel, "_npixel.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_npixel_red", (void*)&_npixel_red);
      R__insp.InspectMember("vector<std::vector<int> >", (void*)&_npixel_red, "_npixel_red.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_moments", (void*)&_moments);
      R__insp.InspectMember("vector<std::vector<std::vector<double> > >", (void*)&_moments, "_moments.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_transverse_moments", (void*)&_transverse_moments);
      R__insp.InspectMember("vector<std::vector<std::vector<double> > >", (void*)&_transverse_moments, "_transverse_moments.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_ra", (void*)&_ra);
      R__insp.InspectMember("vector<std::vector<double> >", (void*)&_ra, "_ra.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_dec", (void*)&_dec);
      R__insp.InspectMember("vector<std::vector<double> >", (void*)&_dec, "_dec.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_glat", (void*)&_glat);
      R__insp.InspectMember("vector<std::vector<double> >", (void*)&_glat, "_glat.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_glon", (void*)&_glon);
      R__insp.InspectMember("vector<std::vector<double> >", (void*)&_glon, "_glon.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_inactive", (void*)&_inactive);
      R__insp.InspectMember("vector<std::vector<double> >", (void*)&_inactive, "_inactive.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_crossing", (void*)&_crossing);
      R__insp.InspectMember("vector<std::vector<double> >", (void*)&_crossing, "_crossing.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_ntracks", (void*)&_ntracks);
      R__insp.InspectMember("vector<int>", (void*)&_ntracks, "_ntracks.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_spark", (void*)&_spark);
      R__insp.InspectMember("vector<bool>", (void*)&_spark, "_spark.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_lastspark", (void*)&_lastspark);
      R__insp.InspectMember("vector<int>", (void*)&_lastspark, "_lastspark.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_integral", (void*)&_integral);
      R__insp.InspectMember("vector<double>", (void*)&_integral, "_integral.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_image_mean", (void*)&_image_mean);
      R__insp.InspectMember("vector<double>", (void*)&_image_mean, "_image_mean.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_pixels_killed", (void*)&_pixels_killed);
      R__insp.InspectMember("vector<int>", (void*)&_pixels_killed, "_pixels_killed.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_image_rms", (void*)&_image_rms);
      R__insp.InspectMember("vector<double>", (void*)&_image_rms, "_image_rms.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_nsparkref", (void*)&_nsparkref);
      R__insp.InspectMember("vector<int>", (void*)&_nsparkref, "_nsparkref.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_sparkref_base", (void*)&_sparkref_base);
      R__insp.InspectMember("vector<int>", (void*)&_sparkref_base, "_sparkref_base.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_cameraSerialNumber", (void*)&_cameraSerialNumber);
      R__insp.InspectMember("vector<TString>", (void*)&_cameraSerialNumber, "_cameraSerialNumber.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_burnin", &_burnin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_sparkref", &_sparkref);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_waveform_vectors", (void*)&_waveform_vectors);
      R__insp.InspectMember("vector<dmtpc::waveform::WaveformVector*>", (void*)&_waveform_vectors, "_waveform_vectors.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_cspwf_vectors", (void*)&_cspwf_vectors);
      R__insp.InspectMember("vector<dmtpc::waveform::CspWfVector*>", (void*)&_cspwf_vectors, "_cspwf_vectors.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_fastwf_vectors", (void*)&_fastwf_vectors);
      R__insp.InspectMember("vector<dmtpc::waveform::FastWfVector*>", (void*)&_fastwf_vectors, "_fastwf_vectors.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_pmtwf_vectors", (void*)&_pmtwf_vectors);
      R__insp.InspectMember("vector<dmtpc::waveform::PMTWfVector*>", (void*)&_pmtwf_vectors, "_pmtwf_vectors.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_clusters", (void*)&_clusters);
      R__insp.InspectMember("vector<ClusterImage*>", (void*)&_clusters, "_clusters.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_nearest_spacer_distance", (void*)&_nearest_spacer_distance);
      R__insp.InspectMember("vector<std::vector<double> >", (void*)&_nearest_spacer_distance, "_nearest_spacer_distance.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_nearest_spacer", (void*)&_nearest_spacer);
      R__insp.InspectMember("vector<std::vector<int> >", (void*)&_nearest_spacer, "_nearest_spacer.", false);
      TObject::ShowMembers(R__insp);
}

} // namespace dmtpc::analysis
} // namespace dmtpc::analysis
namespace ROOTDict {
   // Wrappers around operator new
   static void *new_dmtpccLcLanalysiscLcLSkimEvent(void *p) {
      return  p ? new(p) ::dmtpc::analysis::SkimEvent : new ::dmtpc::analysis::SkimEvent;
   }
   static void *newArray_dmtpccLcLanalysiscLcLSkimEvent(Long_t nElements, void *p) {
      return p ? new(p) ::dmtpc::analysis::SkimEvent[nElements] : new ::dmtpc::analysis::SkimEvent[nElements];
   }
   // Wrapper around operator delete
   static void delete_dmtpccLcLanalysiscLcLSkimEvent(void *p) {
      delete ((::dmtpc::analysis::SkimEvent*)p);
   }
   static void deleteArray_dmtpccLcLanalysiscLcLSkimEvent(void *p) {
      delete [] ((::dmtpc::analysis::SkimEvent*)p);
   }
   static void destruct_dmtpccLcLanalysiscLcLSkimEvent(void *p) {
      typedef ::dmtpc::analysis::SkimEvent current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_dmtpccLcLanalysiscLcLSkimEvent(TBuffer &buf, void *obj) {
      ((::dmtpc::analysis::SkimEvent*)obj)->::dmtpc::analysis::SkimEvent::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::dmtpc::analysis::SkimEvent

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_dmtpccLcLanalysiscLcLSkimDataset(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::dmtpc::analysis::SkimDataset : new ::dmtpc::analysis::SkimDataset;
   }
   static void *newArray_dmtpccLcLanalysiscLcLSkimDataset(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::dmtpc::analysis::SkimDataset[nElements] : new ::dmtpc::analysis::SkimDataset[nElements];
   }
   // Wrapper around operator delete
   static void delete_dmtpccLcLanalysiscLcLSkimDataset(void *p) {
      delete ((::dmtpc::analysis::SkimDataset*)p);
   }
   static void deleteArray_dmtpccLcLanalysiscLcLSkimDataset(void *p) {
      delete [] ((::dmtpc::analysis::SkimDataset*)p);
   }
   static void destruct_dmtpccLcLanalysiscLcLSkimDataset(void *p) {
      typedef ::dmtpc::analysis::SkimDataset current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::dmtpc::analysis::SkimDataset

      namespace dmtpc {
         namespace analysis {
//______________________________________________________________________________
void Stitcher::Streamer(TBuffer &R__b)
{
   // Stream an object of class dmtpc::analysis::Stitcher.

   //This works around a msvc bug and should be harmless on other platforms
   typedef ::dmtpc::analysis::Stitcher thisClass;
   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      R__b >> _isInit;
      R__b >> _nImages;
      R__b >> _edge_low_thresh;
      R__b >> _edge_high_thresh;
      R__b >> _edge_blur_level;
      R__b >> _min_edge_neighbors;
      R__b >> _img_high_thresh;
      R__b >> _linear_hough_r_bins;
      R__b >> _linear_hough_theta_bins;
      R__b >> _linear_hough_min_votes;
      R__b >> _spacer_join_theta_thresh;
      R__b >> _spacer_join_r_thresh;
      R__b.ReadStaticArray((int*)_nbins_first_pass);
      R__b.ReadStaticArray((int*)_nbins_second_pass);
      R__b.ReadStaticArray((double*)_mins_first_pass);
      R__b.ReadStaticArray((double*)_maxs_first_pass);
      R__b >> _nwidths_second_pass;
      R__b >> _median_nbins;
      R__b >> _median_niter;
      void *ptr_scaleMethod = (void*)&scaleMethod;
      R__b >> *reinterpret_cast<Int_t*>(ptr_scaleMethod);
      R__b >> _led;
      R__b >> _led_thresh;
      R__b >> _led_border;
      R__b >> _spacer_theta_thresh;
      R__b >> _nspectr_peaks;
      {
         vector<double> &R__stl =  _xCenters;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  _yCenters;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  _innerRadius;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  _outerRadius;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  _weights;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<std::vector<double> > &R__stl =  _spacers_r;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_spacers_r streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<std::vector<double> > &R__stl =  _spacers_theta;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_spacers_theta streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  _rotations;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  _scales;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b >> _stitch_info_1024;
      R__b >> _stitch_info_512;
      R__b >> _stitch_info_256;
      {
         vector<TObjString> &R__stl =  _serials;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            TObjString R__t;
            R__t.Streamer(R__b);
            R__stl.push_back(R__t);
         }
      }
      R__b >> _lens;
      R__b.CheckByteCount(R__s, R__c, thisClass::IsA());
   } else {
      R__c = R__b.WriteVersion(thisClass::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      R__b << _isInit;
      R__b << _nImages;
      R__b << _edge_low_thresh;
      R__b << _edge_high_thresh;
      R__b << _edge_blur_level;
      R__b << _min_edge_neighbors;
      R__b << _img_high_thresh;
      R__b << _linear_hough_r_bins;
      R__b << _linear_hough_theta_bins;
      R__b << _linear_hough_min_votes;
      R__b << _spacer_join_theta_thresh;
      R__b << _spacer_join_r_thresh;
      R__b.WriteArray(_nbins_first_pass, 3);
      R__b.WriteArray(_nbins_second_pass, 3);
      R__b.WriteArray(_mins_first_pass, 3);
      R__b.WriteArray(_maxs_first_pass, 3);
      R__b << _nwidths_second_pass;
      R__b << _median_nbins;
      R__b << _median_niter;
      R__b << (Int_t)scaleMethod;
      R__b << _led;
      R__b << _led_thresh;
      R__b << _led_border;
      R__b << _spacer_theta_thresh;
      R__b << _nspectr_peaks;
      {
         vector<double> &R__stl =  _xCenters;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  _yCenters;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  _innerRadius;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  _outerRadius;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  _weights;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<std::vector<double> > &R__stl =  _spacers_r;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_spacers_r streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<std::vector<double> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<std::vector<double> > &R__stl =  _spacers_theta;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_spacers_theta streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<std::vector<double> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<double> &R__stl =  _rotations;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  _scales;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b << _stitch_info_1024;
      R__b << _stitch_info_512;
      R__b << _stitch_info_256;
      {
         vector<TObjString> &R__stl =  _serials;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<TObjString>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            ((TObjString&)(*R__k)).Streamer(R__b);
            }
         }
      }
      R__b << _lens;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

} // namespace dmtpc::analysis
} // namespace dmtpc::analysis
//______________________________________________________________________________
      namespace dmtpc {
         namespace analysis {
void Stitcher::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class dmtpc::analysis::Stitcher.
      TClass *R__cl = ::dmtpc::analysis::Stitcher::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_isInit", &_isInit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_nImages", &_nImages);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_edge_low_thresh", &_edge_low_thresh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_edge_high_thresh", &_edge_high_thresh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_edge_blur_level", &_edge_blur_level);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_min_edge_neighbors", &_min_edge_neighbors);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_img_high_thresh", &_img_high_thresh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_linear_hough_r_bins", &_linear_hough_r_bins);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_linear_hough_theta_bins", &_linear_hough_theta_bins);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_linear_hough_min_votes", &_linear_hough_min_votes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_spacer_join_theta_thresh", &_spacer_join_theta_thresh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_spacer_join_r_thresh", &_spacer_join_r_thresh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_nbins_first_pass[3]", _nbins_first_pass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_nbins_second_pass[3]", _nbins_second_pass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_mins_first_pass[3]", _mins_first_pass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_maxs_first_pass[3]", _maxs_first_pass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_nwidths_second_pass", &_nwidths_second_pass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_median_nbins", &_median_nbins);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_median_niter", &_median_niter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "scaleMethod", &scaleMethod);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_led", &_led);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_led_thresh", &_led_thresh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_led_border", &_led_border);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_spacer_theta_thresh", &_spacer_theta_thresh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_nspectr_peaks", &_nspectr_peaks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_xCenters", (void*)&_xCenters);
      R__insp.InspectMember("vector<double>", (void*)&_xCenters, "_xCenters.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_yCenters", (void*)&_yCenters);
      R__insp.InspectMember("vector<double>", (void*)&_yCenters, "_yCenters.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_innerRadius", (void*)&_innerRadius);
      R__insp.InspectMember("vector<double>", (void*)&_innerRadius, "_innerRadius.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_outerRadius", (void*)&_outerRadius);
      R__insp.InspectMember("vector<double>", (void*)&_outerRadius, "_outerRadius.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_weights", (void*)&_weights);
      R__insp.InspectMember("vector<double>", (void*)&_weights, "_weights.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_spacers_r", (void*)&_spacers_r);
      R__insp.InspectMember("vector<std::vector<double> >", (void*)&_spacers_r, "_spacers_r.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_spacers_theta", (void*)&_spacers_theta);
      R__insp.InspectMember("vector<std::vector<double> >", (void*)&_spacers_theta, "_spacers_theta.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_rotations", (void*)&_rotations);
      R__insp.InspectMember("vector<double>", (void*)&_rotations, "_rotations.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_scales", (void*)&_scales);
      R__insp.InspectMember("vector<double>", (void*)&_scales, "_scales.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_stitch_info_1024", &_stitch_info_1024);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_stitch_info_512", &_stitch_info_512);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_stitch_info_256", &_stitch_info_256);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_stitch_info_other", &_stitch_info_other);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "medianed", (void*)&medianed);
      R__insp.InspectMember("vector<TH2F*>", (void*)&medianed, "medianed.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "edges", (void*)&edges);
      R__insp.InspectMember("vector<TH2C*>", (void*)&edges, "edges.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "polars", (void*)&polars);
      R__insp.InspectMember("vector<TH2D*>", (void*)&polars, "polars.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rprojs", (void*)&rprojs);
      R__insp.InspectMember("vector<TH1*>", (void*)&rprojs, "rprojs.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "orig", (void*)&orig);
      R__insp.InspectMember("vector<TH2F*>", (void*)&orig, "orig.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_serials", (void*)&_serials);
      R__insp.InspectMember("vector<TObjString>", (void*)&_serials, "_serials.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_lens", &_lens);
      TNamed::ShowMembers(R__insp);
}

} // namespace dmtpc::analysis
} // namespace dmtpc::analysis
namespace ROOTDict {
   // Wrappers around operator new
   static void *new_dmtpccLcLanalysiscLcLStitcher(void *p) {
      return  p ? new(p) ::dmtpc::analysis::Stitcher : new ::dmtpc::analysis::Stitcher;
   }
   static void *newArray_dmtpccLcLanalysiscLcLStitcher(Long_t nElements, void *p) {
      return p ? new(p) ::dmtpc::analysis::Stitcher[nElements] : new ::dmtpc::analysis::Stitcher[nElements];
   }
   // Wrapper around operator delete
   static void delete_dmtpccLcLanalysiscLcLStitcher(void *p) {
      delete ((::dmtpc::analysis::Stitcher*)p);
   }
   static void deleteArray_dmtpccLcLanalysiscLcLStitcher(void *p) {
      delete [] ((::dmtpc::analysis::Stitcher*)p);
   }
   static void destruct_dmtpccLcLanalysiscLcLStitcher(void *p) {
      typedef ::dmtpc::analysis::Stitcher current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_dmtpccLcLanalysiscLcLStitcher(TBuffer &buf, void *obj) {
      ((::dmtpc::analysis::Stitcher*)obj)->::dmtpc::analysis::Stitcher::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::dmtpc::analysis::Stitcher

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_dmtpccLcLanalysiscLcLcleanskimcLcLConfig(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::dmtpc::analysis::cleanskim::Config : new ::dmtpc::analysis::cleanskim::Config;
   }
   static void *newArray_dmtpccLcLanalysiscLcLcleanskimcLcLConfig(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::dmtpc::analysis::cleanskim::Config[nElements] : new ::dmtpc::analysis::cleanskim::Config[nElements];
   }
   // Wrapper around operator delete
   static void delete_dmtpccLcLanalysiscLcLcleanskimcLcLConfig(void *p) {
      delete ((::dmtpc::analysis::cleanskim::Config*)p);
   }
   static void deleteArray_dmtpccLcLanalysiscLcLcleanskimcLcLConfig(void *p) {
      delete [] ((::dmtpc::analysis::cleanskim::Config*)p);
   }
   static void destruct_dmtpccLcLanalysiscLcLcleanskimcLcLConfig(void *p) {
      typedef ::dmtpc::analysis::cleanskim::Config current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::dmtpc::analysis::cleanskim::Config

      namespace dmtpc {
         namespace analysis {
//______________________________________________________________________________
void TrackFitter::Streamer(TBuffer &R__b)
{
   // Stream an object of class dmtpc::analysis::TrackFitter.

   ::Error("dmtpc::analysis::TrackFitter::Streamer", "version id <=0 in ClassDef, dummy Streamer() called"); if (R__b.IsReading()) { }
}

} // namespace dmtpc::analysis
} // namespace dmtpc::analysis
//______________________________________________________________________________
      namespace dmtpc {
         namespace analysis {
void TrackFitter::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class dmtpc::analysis::TrackFitter.
      TClass *R__cl = ::dmtpc::analysis::TrackFitter::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*min", &min);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minfn", (void*)&minfn);
      R__insp.InspectMember("ROOT::Math::Functor", (void*)&minfn, "minfn.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gain", &gain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lengthcal", &lengthcal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "use_gainmap_error", &use_gainmap_error);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*gainMap", &gainMap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*gainMap_blurred", &gainMap_blurred);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "min_gain", &min_gain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*result", &result);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fitfn", &fitfn);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*wrapped_fitfn", &wrapped_fitfn);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fit_integrator", &fit_integrator);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*srim", &srim);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*canvas", &canvas);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minheight", &minheight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxheight", &maxheight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "binwidth", &binwidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "read_noise", &read_noise);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fithist", &fithist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*local_gainmap", &local_gainmap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*local_gainmap_e", &local_gainmap_e);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "padding", &padding);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "force_decreasing", &force_decreasing);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zero_out", &zero_out);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "verbose", &verbose);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "draw", &draw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "do_integral", &do_integral);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "do_likelihood", &do_likelihood);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "likelihood_flip", &likelihood_flip);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "integral_abstol", &integral_abstol);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "integral_reltol", &integral_reltol);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "integral_nsigma", &integral_nsigma);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "integral_ncalls", &integral_ncalls);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "always_minos", &always_minos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minos_thresh", &minos_thresh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "conversion_gain", &conversion_gain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*arrow", &arrow);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fitter_id", &fitter_id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "quickeval", &quickeval);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "enable_cauchy", &enable_cauchy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "enable_second_gaus", &enable_second_gaus);
}

} // namespace dmtpc::analysis
} // namespace dmtpc::analysis
namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_dmtpccLcLanalysiscLcLTrackFitter(void *p) {
      delete ((::dmtpc::analysis::TrackFitter*)p);
   }
   static void deleteArray_dmtpccLcLanalysiscLcLTrackFitter(void *p) {
      delete [] ((::dmtpc::analysis::TrackFitter*)p);
   }
   static void destruct_dmtpccLcLanalysiscLcLTrackFitter(void *p) {
      typedef ::dmtpc::analysis::TrackFitter current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_dmtpccLcLanalysiscLcLTrackFitter(TBuffer &buf, void *obj) {
      ((::dmtpc::analysis::TrackFitter*)obj)->::dmtpc::analysis::TrackFitter::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::dmtpc::analysis::TrackFitter

      namespace dmtpc {
         namespace analysis {
//______________________________________________________________________________
void TrackFitter::Param::Streamer(TBuffer &R__b)
{
   // Stream an object of class dmtpc::analysis::TrackFitter::Param.

   //This works around a msvc bug and should be harmless on other platforms
   typedef ::dmtpc::analysis::TrackFitter::Param thisClass;
   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      R__b >> val;
      R__b >> err;
      R__b >> errUp;
      R__b >> errDn;
      R__b.CheckByteCount(R__s, R__c, thisClass::IsA());
   } else {
      R__c = R__b.WriteVersion(thisClass::IsA(), kTRUE);
      R__b << val;
      R__b << err;
      R__b << errUp;
      R__b << errDn;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

} // namespace dmtpc::analysis
} // namespace dmtpc::analysis
//______________________________________________________________________________
      namespace dmtpc {
         namespace analysis {
void TrackFitter::Param::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class dmtpc::analysis::TrackFitter::Param.
      TClass *R__cl = ::dmtpc::analysis::TrackFitter::Param::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "val", &val);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "err", &err);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "errUp", &errUp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "errDn", &errDn);
}

} // namespace dmtpc::analysis
} // namespace dmtpc::analysis
namespace ROOTDict {
   // Wrappers around operator new
   static void *new_dmtpccLcLanalysiscLcLTrackFittercLcLParam(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::dmtpc::analysis::TrackFitter::Param : new ::dmtpc::analysis::TrackFitter::Param;
   }
   static void *newArray_dmtpccLcLanalysiscLcLTrackFittercLcLParam(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::dmtpc::analysis::TrackFitter::Param[nElements] : new ::dmtpc::analysis::TrackFitter::Param[nElements];
   }
   // Wrapper around operator delete
   static void delete_dmtpccLcLanalysiscLcLTrackFittercLcLParam(void *p) {
      delete ((::dmtpc::analysis::TrackFitter::Param*)p);
   }
   static void deleteArray_dmtpccLcLanalysiscLcLTrackFittercLcLParam(void *p) {
      delete [] ((::dmtpc::analysis::TrackFitter::Param*)p);
   }
   static void destruct_dmtpccLcLanalysiscLcLTrackFittercLcLParam(void *p) {
      typedef ::dmtpc::analysis::TrackFitter::Param current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_dmtpccLcLanalysiscLcLTrackFittercLcLParam(TBuffer &buf, void *obj) {
      ((::dmtpc::analysis::TrackFitter::Param*)obj)->::dmtpc::analysis::TrackFitter::Param::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::dmtpc::analysis::TrackFitter::Param

      namespace dmtpc {
         namespace analysis {
//______________________________________________________________________________
void TrackFitter::Result::Streamer(TBuffer &R__b)
{
   // Stream an object of class dmtpc::analysis::TrackFitter::Result.

   //This works around a msvc bug and should be harmless on other platforms
   typedef ::dmtpc::analysis::TrackFitter::Result thisClass;
   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      phi.Streamer(R__b);
      htphi.Streamer(R__b);
      fitE.Streamer(R__b);
      E.Streamer(R__b);
      Ephys.Streamer(R__b);
      range.Streamer(R__b);
      sigma.Streamer(R__b);
      sigma2.Streamer(R__b);
      x0.Streamer(R__b);
      y0.Streamer(R__b);
      z0.Streamer(R__b);
      z1.Streamer(R__b);
      delta_z.Streamer(R__b);
      R__b >> chisq;
      R__b >> gain;
      R__b >> likelyIntegralSame;
      R__b >> likelyIntegralSameError;
      R__b >> likelyIntegralTotal;
      R__b >> likelyIntegralTotalError;
      R__b >> prob;
      R__b >> probError;
      R__b >> probFast;
      R__b >> ndof;
      R__b >> success;
      R__b >> flip;
      R__b >> minos;
      R__b >> integralProb;
      R__b >> likelihoodProb;
      R__b >> alt_chisq;
      R__b >> prob2;
      R__b.ReadStaticArray((double*)covar);
      second_width.Streamer(R__b);
      second_width_ratio.Streamer(R__b);
      unused.Streamer(R__b);
      R__b >> second_width_is_cauchy;
      R__b.CheckByteCount(R__s, R__c, thisClass::IsA());
   } else {
      R__c = R__b.WriteVersion(thisClass::IsA(), kTRUE);
      phi.Streamer(R__b);
      htphi.Streamer(R__b);
      fitE.Streamer(R__b);
      E.Streamer(R__b);
      Ephys.Streamer(R__b);
      range.Streamer(R__b);
      sigma.Streamer(R__b);
      sigma2.Streamer(R__b);
      x0.Streamer(R__b);
      y0.Streamer(R__b);
      z0.Streamer(R__b);
      z1.Streamer(R__b);
      delta_z.Streamer(R__b);
      R__b << chisq;
      R__b << gain;
      R__b << likelyIntegralSame;
      R__b << likelyIntegralSameError;
      R__b << likelyIntegralTotal;
      R__b << likelyIntegralTotalError;
      R__b << prob;
      R__b << probError;
      R__b << probFast;
      R__b << ndof;
      R__b << success;
      R__b << flip;
      R__b << minos;
      R__b << integralProb;
      R__b << likelihoodProb;
      R__b << alt_chisq;
      R__b << prob2;
      R__b.WriteArray((double*)covar, 81);
      second_width.Streamer(R__b);
      second_width_ratio.Streamer(R__b);
      unused.Streamer(R__b);
      R__b << second_width_is_cauchy;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

} // namespace dmtpc::analysis
} // namespace dmtpc::analysis
//______________________________________________________________________________
      namespace dmtpc {
         namespace analysis {
void TrackFitter::Result::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class dmtpc::analysis::TrackFitter::Result.
      TClass *R__cl = ::dmtpc::analysis::TrackFitter::Result::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi", &phi);
      R__insp.InspectMember(phi, "phi.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "htphi", &htphi);
      R__insp.InspectMember(htphi, "htphi.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fitE", &fitE);
      R__insp.InspectMember(fitE, "fitE.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "E", &E);
      R__insp.InspectMember(E, "E.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Ephys", &Ephys);
      R__insp.InspectMember(Ephys, "Ephys.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "range", &range);
      R__insp.InspectMember(range, "range.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigma", &sigma);
      R__insp.InspectMember(sigma, "sigma.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigma2", &sigma2);
      R__insp.InspectMember(sigma2, "sigma2.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x0", &x0);
      R__insp.InspectMember(x0, "x0.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y0", &y0);
      R__insp.InspectMember(y0, "y0.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z0", &z0);
      R__insp.InspectMember(z0, "z0.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z1", &z1);
      R__insp.InspectMember(z1, "z1.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "delta_z", &delta_z);
      R__insp.InspectMember(delta_z, "delta_z.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chisq", &chisq);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gain", &gain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "likelyIntegralSame", &likelyIntegralSame);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "likelyIntegralSameError", &likelyIntegralSameError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "likelyIntegralTotal", &likelyIntegralTotal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "likelyIntegralTotalError", &likelyIntegralTotalError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "prob", &prob);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "probError", &probError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "probFast", &probFast);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ndof", &ndof);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "success", &success);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "flip", &flip);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minos", &minos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "integralProb", &integralProb);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "likelihoodProb", &likelihoodProb);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "alt_chisq", &alt_chisq);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "prob2", &prob2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "covar[9][9]", covar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "second_width", &second_width);
      R__insp.InspectMember(second_width, "second_width.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "second_width_ratio", &second_width_ratio);
      R__insp.InspectMember(second_width_ratio, "second_width_ratio.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "unused", &unused);
      R__insp.InspectMember(unused, "unused.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "second_width_is_cauchy", &second_width_is_cauchy);
}

} // namespace dmtpc::analysis
} // namespace dmtpc::analysis
namespace ROOTDict {
   // Wrappers around operator new
   static void *new_dmtpccLcLanalysiscLcLTrackFittercLcLResult(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::dmtpc::analysis::TrackFitter::Result : new ::dmtpc::analysis::TrackFitter::Result;
   }
   static void *newArray_dmtpccLcLanalysiscLcLTrackFittercLcLResult(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::dmtpc::analysis::TrackFitter::Result[nElements] : new ::dmtpc::analysis::TrackFitter::Result[nElements];
   }
   // Wrapper around operator delete
   static void delete_dmtpccLcLanalysiscLcLTrackFittercLcLResult(void *p) {
      delete ((::dmtpc::analysis::TrackFitter::Result*)p);
   }
   static void deleteArray_dmtpccLcLanalysiscLcLTrackFittercLcLResult(void *p) {
      delete [] ((::dmtpc::analysis::TrackFitter::Result*)p);
   }
   static void destruct_dmtpccLcLanalysiscLcLTrackFittercLcLResult(void *p) {
      typedef ::dmtpc::analysis::TrackFitter::Result current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_dmtpccLcLanalysiscLcLTrackFittercLcLResult(TBuffer &buf, void *obj) {
      ((::dmtpc::analysis::TrackFitter::Result*)obj)->::dmtpc::analysis::TrackFitter::Result::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::dmtpc::analysis::TrackFitter::Result

      namespace dmtpc {
         namespace analysis {
//______________________________________________________________________________
void GainMap::Streamer(TBuffer &R__b)
{
   // Stream an object of class dmtpc::analysis::GainMap.

   //This works around a msvc bug and should be harmless on other platforms
   typedef ::dmtpc::analysis::GainMap thisClass;
   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      R__b >> _gainMap;
      R__b >> _spacers;
      R__b >> _nSpacers;
      R__b.CheckByteCount(R__s, R__c, thisClass::IsA());
   } else {
      R__c = R__b.WriteVersion(thisClass::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      R__b << (TObject*)_gainMap;
      R__b << _spacers;
      R__b << _nSpacers;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

} // namespace dmtpc::analysis
} // namespace dmtpc::analysis
//______________________________________________________________________________
      namespace dmtpc {
         namespace analysis {
void GainMap::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class dmtpc::analysis::GainMap.
      TClass *R__cl = ::dmtpc::analysis::GainMap::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_gainMap", &_gainMap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_spacers", &_spacers);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_nSpacers", &_nSpacers);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_error_estimate", &_error_estimate);
      TNamed::ShowMembers(R__insp);
}

} // namespace dmtpc::analysis
} // namespace dmtpc::analysis
namespace ROOTDict {
   // Wrappers around operator new
   static void *new_dmtpccLcLanalysiscLcLGainMap(void *p) {
      return  p ? new(p) ::dmtpc::analysis::GainMap : new ::dmtpc::analysis::GainMap;
   }
   static void *newArray_dmtpccLcLanalysiscLcLGainMap(Long_t nElements, void *p) {
      return p ? new(p) ::dmtpc::analysis::GainMap[nElements] : new ::dmtpc::analysis::GainMap[nElements];
   }
   // Wrapper around operator delete
   static void delete_dmtpccLcLanalysiscLcLGainMap(void *p) {
      delete ((::dmtpc::analysis::GainMap*)p);
   }
   static void deleteArray_dmtpccLcLanalysiscLcLGainMap(void *p) {
      delete [] ((::dmtpc::analysis::GainMap*)p);
   }
   static void destruct_dmtpccLcLanalysiscLcLGainMap(void *p) {
      typedef ::dmtpc::analysis::GainMap current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_dmtpccLcLanalysiscLcLGainMap(TBuffer &buf, void *obj) {
      ((::dmtpc::analysis::GainMap*)obj)->::dmtpc::analysis::GainMap::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::dmtpc::analysis::GainMap

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_dmtpccLcLanalysiscLcLAnalysisConfig(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::dmtpc::analysis::AnalysisConfig : new ::dmtpc::analysis::AnalysisConfig;
   }
   static void *newArray_dmtpccLcLanalysiscLcLAnalysisConfig(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::dmtpc::analysis::AnalysisConfig[nElements] : new ::dmtpc::analysis::AnalysisConfig[nElements];
   }
   // Wrapper around operator delete
   static void delete_dmtpccLcLanalysiscLcLAnalysisConfig(void *p) {
      delete ((::dmtpc::analysis::AnalysisConfig*)p);
   }
   static void deleteArray_dmtpccLcLanalysiscLcLAnalysisConfig(void *p) {
      delete [] ((::dmtpc::analysis::AnalysisConfig*)p);
   }
   static void destruct_dmtpccLcLanalysiscLcLAnalysisConfig(void *p) {
      typedef ::dmtpc::analysis::AnalysisConfig current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::dmtpc::analysis::AnalysisConfig

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_dmtpccLcLanalysiscLcLHVLog(void *p) {
      delete ((::dmtpc::analysis::HVLog*)p);
   }
   static void deleteArray_dmtpccLcLanalysiscLcLHVLog(void *p) {
      delete [] ((::dmtpc::analysis::HVLog*)p);
   }
   static void destruct_dmtpccLcLanalysiscLcLHVLog(void *p) {
      typedef ::dmtpc::analysis::HVLog current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::dmtpc::analysis::HVLog

      namespace dmtpc {
         namespace analysis {
//______________________________________________________________________________
void Cluster::Streamer(TBuffer &R__b)
{
   // Stream an object of class dmtpc::analysis::Cluster.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(dmtpc::analysis::Cluster::Class(),this);
   } else {
      R__b.WriteClassBuffer(dmtpc::analysis::Cluster::Class(),this);
   }
}

} // namespace dmtpc::analysis
} // namespace dmtpc::analysis
//______________________________________________________________________________
      namespace dmtpc {
         namespace analysis {
void Cluster::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class dmtpc::analysis::Cluster.
      TClass *R__cl = ::dmtpc::analysis::Cluster::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pixels", (void*)&pixels);
      R__insp.InspectMember("vector<int>", (void*)&pixels, "pixels.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "reduced_pixels", (void*)&reduced_pixels);
      R__insp.InspectMember("vector<int>", (void*)&reduced_pixels, "reduced_pixels.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*img", &img);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "i", &i);
      TObject::ShowMembers(R__insp);
}

} // namespace dmtpc::analysis
} // namespace dmtpc::analysis
namespace ROOTDict {
   // Wrappers around operator new
   static void *new_dmtpccLcLanalysiscLcLCluster(void *p) {
      return  p ? new(p) ::dmtpc::analysis::Cluster : new ::dmtpc::analysis::Cluster;
   }
   static void *newArray_dmtpccLcLanalysiscLcLCluster(Long_t nElements, void *p) {
      return p ? new(p) ::dmtpc::analysis::Cluster[nElements] : new ::dmtpc::analysis::Cluster[nElements];
   }
   // Wrapper around operator delete
   static void delete_dmtpccLcLanalysiscLcLCluster(void *p) {
      delete ((::dmtpc::analysis::Cluster*)p);
   }
   static void deleteArray_dmtpccLcLanalysiscLcLCluster(void *p) {
      delete [] ((::dmtpc::analysis::Cluster*)p);
   }
   static void destruct_dmtpccLcLanalysiscLcLCluster(void *p) {
      typedef ::dmtpc::analysis::Cluster current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::dmtpc::analysis::Cluster

      namespace dmtpc {
         namespace analysis {
//______________________________________________________________________________
void ClusterImage::Streamer(TBuffer &R__b)
{
   // Stream an object of class dmtpc::analysis::ClusterImage.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(dmtpc::analysis::ClusterImage::Class(),this);
   } else {
      R__b.WriteClassBuffer(dmtpc::analysis::ClusterImage::Class(),this);
   }
}

} // namespace dmtpc::analysis
} // namespace dmtpc::analysis
//______________________________________________________________________________
      namespace dmtpc {
         namespace analysis {
void ClusterImage::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class dmtpc::analysis::ClusterImage.
      TClass *R__cl = ::dmtpc::analysis::ClusterImage::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*img", &img);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "clusters", (void*)&clusters);
      R__insp.InspectMember("vector<Cluster>", (void*)&clusters, "clusters.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time", &time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "image_rms", &image_rms);
      TObject::ShowMembers(R__insp);
}

} // namespace dmtpc::analysis
} // namespace dmtpc::analysis
namespace ROOTDict {
   // Wrappers around operator new
   static void *new_dmtpccLcLanalysiscLcLClusterImage(void *p) {
      return  p ? new(p) ::dmtpc::analysis::ClusterImage : new ::dmtpc::analysis::ClusterImage;
   }
   static void *newArray_dmtpccLcLanalysiscLcLClusterImage(Long_t nElements, void *p) {
      return p ? new(p) ::dmtpc::analysis::ClusterImage[nElements] : new ::dmtpc::analysis::ClusterImage[nElements];
   }
   // Wrapper around operator delete
   static void delete_dmtpccLcLanalysiscLcLClusterImage(void *p) {
      delete ((::dmtpc::analysis::ClusterImage*)p);
   }
   static void deleteArray_dmtpccLcLanalysiscLcLClusterImage(void *p) {
      delete [] ((::dmtpc::analysis::ClusterImage*)p);
   }
   static void destruct_dmtpccLcLanalysiscLcLClusterImage(void *p) {
      typedef ::dmtpc::analysis::ClusterImage current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::dmtpc::analysis::ClusterImage

      namespace dmtpc {
         namespace analysis {
//______________________________________________________________________________
void MCTruth::Streamer(TBuffer &R__b)
{
   // Stream an object of class dmtpc::analysis::MCTruth.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(dmtpc::analysis::MCTruth::Class(),this);
   } else {
      R__b.WriteClassBuffer(dmtpc::analysis::MCTruth::Class(),this);
   }
}

} // namespace dmtpc::analysis
} // namespace dmtpc::analysis
//______________________________________________________________________________
      namespace dmtpc {
         namespace analysis {
void MCTruth::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class dmtpc::analysis::MCTruth.
      TClass *R__cl = ::dmtpc::analysis::MCTruth::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "recoilEnergy", &recoilEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x0", &x0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y0", &y0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z0", &z0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time", &time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dx", &dx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dy", &dy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dz", &dz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "species", &species);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pdx", &pdx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pdy", &pdy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pdz", &pdz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pE", &pE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cosThetaCM", &cosThetaCM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sdx", &sdx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sdy", &sdy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sdz", &sdz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ionization", &ionization);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nprimary", &nprimary);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "primary_electron_x", (void*)&primary_electron_x);
      R__insp.InspectMember("vector<double>", (void*)&primary_electron_x, "primary_electron_x.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "primary_electron_y", (void*)&primary_electron_y);
      R__insp.InspectMember("vector<double>", (void*)&primary_electron_y, "primary_electron_y.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "primary_electron_z", (void*)&primary_electron_z);
      R__insp.InspectMember("vector<double>", (void*)&primary_electron_z, "primary_electron_z.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "diffused_electron_x", (void*)&diffused_electron_x);
      R__insp.InspectMember("vector<double>", (void*)&diffused_electron_x, "diffused_electron_x.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "diffused_electron_y", (void*)&diffused_electron_y);
      R__insp.InspectMember("vector<double>", (void*)&diffused_electron_y, "diffused_electron_y.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "diffused_electron_z", (void*)&diffused_electron_z);
      R__insp.InspectMember("vector<double>", (void*)&diffused_electron_z, "diffused_electron_z.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*avalanche_visible_photon_xy", &avalanche_visible_photon_xy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*avalanche_visible_photon_t", &avalanche_visible_photon_t);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ne_in_avalanche", &ne_in_avalanche);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nphotons_from_avalanche", &nphotons_from_avalanche);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nvisible_photons_from_avalanche", &nvisible_photons_from_avalanche);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "truth_images", (void*)&truth_images);
      R__insp.InspectMember("vector<TH2I*>", (void*)&truth_images, "truth_images.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "truth_traces", (void*)&truth_traces);
      R__insp.InspectMember("vector<TH1S*>", (void*)&truth_traces, "truth_traces.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nphoton", (void*)&nphoton);
      R__insp.InspectMember("vector<int>", (void*)&nphoton, "nphoton.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nadu", (void*)&nadu);
      R__insp.InspectMember("vector<int>", (void*)&nadu, "nadu.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nadu_raw", (void*)&nadu_raw);
      R__insp.InspectMember("vector<int>", (void*)&nadu_raw, "nadu_raw.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rotation", (void*)&rotation);
      R__insp.InspectMember("vector<double>", (void*)&rotation, "rotation.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xoffsets", (void*)&xoffsets);
      R__insp.InspectMember("vector<double>", (void*)&xoffsets, "xoffsets.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yoffsets", (void*)&yoffsets);
      R__insp.InspectMember("vector<double>", (void*)&yoffsets, "yoffsets.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xscale", (void*)&xscale);
      R__insp.InspectMember("vector<double>", (void*)&xscale, "xscale.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yscale", (void*)&yscale);
      R__insp.InspectMember("vector<double>", (void*)&yscale, "yscale.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "noise", (void*)&noise);
      R__insp.InspectMember("vector<double>", (void*)&noise, "noise.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "conversion_gain", (void*)&conversion_gain);
      R__insp.InspectMember("vector<double>", (void*)&conversion_gain, "conversion_gain.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pressure", &pressure);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "edge", &edge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pM", &pM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "individual_avalanche_gain", (void*)&individual_avalanche_gain);
      R__insp.InspectMember("vector<uint32_t>", (void*)&individual_avalanche_gain, "individual_avalanche_gain.", false);
}

} // namespace dmtpc::analysis
} // namespace dmtpc::analysis
namespace ROOTDict {
   // Wrappers around operator new
   static void *new_dmtpccLcLanalysiscLcLMCTruth(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::dmtpc::analysis::MCTruth : new ::dmtpc::analysis::MCTruth;
   }
   static void *newArray_dmtpccLcLanalysiscLcLMCTruth(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::dmtpc::analysis::MCTruth[nElements] : new ::dmtpc::analysis::MCTruth[nElements];
   }
   // Wrapper around operator delete
   static void delete_dmtpccLcLanalysiscLcLMCTruth(void *p) {
      delete ((::dmtpc::analysis::MCTruth*)p);
   }
   static void deleteArray_dmtpccLcLanalysiscLcLMCTruth(void *p) {
      delete [] ((::dmtpc::analysis::MCTruth*)p);
   }
   static void destruct_dmtpccLcLanalysiscLcLMCTruth(void *p) {
      typedef ::dmtpc::analysis::MCTruth current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::dmtpc::analysis::MCTruth

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_dmtpccLcLanalysiscLcLMCTPCDataset(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::dmtpc::analysis::MCTPCDataset : new ::dmtpc::analysis::MCTPCDataset;
   }
   static void *newArray_dmtpccLcLanalysiscLcLMCTPCDataset(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::dmtpc::analysis::MCTPCDataset[nElements] : new ::dmtpc::analysis::MCTPCDataset[nElements];
   }
   // Wrapper around operator delete
   static void delete_dmtpccLcLanalysiscLcLMCTPCDataset(void *p) {
      delete ((::dmtpc::analysis::MCTPCDataset*)p);
   }
   static void deleteArray_dmtpccLcLanalysiscLcLMCTPCDataset(void *p) {
      delete [] ((::dmtpc::analysis::MCTPCDataset*)p);
   }
   static void destruct_dmtpccLcLanalysiscLcLMCTPCDataset(void *p) {
      typedef ::dmtpc::analysis::MCTPCDataset current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::dmtpc::analysis::MCTPCDataset

      namespace dmtpc {
         namespace analysis {
//______________________________________________________________________________
void GainTree::Streamer(TBuffer &R__b)
{
   // Stream an object of class dmtpc::analysis::GainTree.

   //This works around a msvc bug and should be harmless on other platforms
   typedef ::dmtpc::analysis::GainTree thisClass;
   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      {
         vector<double> &R__stl =  BaseMean;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  BaseSigma;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  RmsMean;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  RmsSigma;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  PeakBinMean;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  PeakBinSigma;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  StartBinMean;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  StartBinSigma;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  PeakStartDiffMean;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  PeakStartDiffSigma;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b >> hPeak;
      R__b >> hRMS;
      R__b >> hBase;
      R__b >> hPeakBin;
      R__b >> hStartBin;
      R__b >> hEndBin;
      R__b >> hIntegral;
      R__b >> hPeakStartDiff;
      R__b >> hIntegralOverR10;
      R__b >> hR10;
      R__b >> hR25;
      R__b >> hR50;
      R__b >> hR75;
      R__b >> hR90;
      R__b >> hF10;
      R__b >> hF25;
      R__b >> hF50;
      R__b >> hF75;
      R__b >> hF90;
      R__b >> hPeak_cuts;
      R__b >> hRMS_cuts;
      R__b >> hBase_cuts;
      R__b >> hPeakBin_cuts;
      R__b >> hStartBin_cuts;
      R__b >> hEndBin_cuts;
      R__b >> hIntegral_cuts;
      R__b >> hPeakStartDiff_cuts;
      R__b >> hIntegralOverR10_cuts;
      R__b >> hR10_cuts;
      R__b >> hR25_cuts;
      R__b >> hR50_cuts;
      R__b >> hR75_cuts;
      R__b >> hR90_cuts;
      R__b >> hF10_cuts;
      R__b >> hF25_cuts;
      R__b >> hF50_cuts;
      R__b >> hF75_cuts;
      R__b >> hF90_cuts;
      R__b >> hPeak_nobias;
      R__b >> hBase_nobias;
      R__b >> hRMS_nobias;
      R__b >> hPeakBin_nobias;
      R__b >> hStartBin_nobias;
      R__b >> hEndBin_nobias;
      R__b >> hIntegral_nobias;
      R__b >> hPeakStartDiff_nobias;
      R__b >> hIntegralOverR10_nobias;
      {
         vector<TH1*> &R__stl =  vhPeak;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(TH1));
         if (R__tcl1==0) {
            Error("vhPeak streamer","Missing the TClass object for TH1!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            TH1* R__t;
            R__t = (TH1*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<TH1*> &R__stl =  vhRMS;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(TH1));
         if (R__tcl1==0) {
            Error("vhRMS streamer","Missing the TClass object for TH1!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            TH1* R__t;
            R__t = (TH1*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<TH1*> &R__stl =  vhBase;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(TH1));
         if (R__tcl1==0) {
            Error("vhBase streamer","Missing the TClass object for TH1!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            TH1* R__t;
            R__t = (TH1*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<TH1*> &R__stl =  vhPeakBin;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(TH1));
         if (R__tcl1==0) {
            Error("vhPeakBin streamer","Missing the TClass object for TH1!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            TH1* R__t;
            R__t = (TH1*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<TH1*> &R__stl =  vhStartBin;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(TH1));
         if (R__tcl1==0) {
            Error("vhStartBin streamer","Missing the TClass object for TH1!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            TH1* R__t;
            R__t = (TH1*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<TH1*> &R__stl =  vhEndBin;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(TH1));
         if (R__tcl1==0) {
            Error("vhEndBin streamer","Missing the TClass object for TH1!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            TH1* R__t;
            R__t = (TH1*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<TH1*> &R__stl =  vhIntegral;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(TH1));
         if (R__tcl1==0) {
            Error("vhIntegral streamer","Missing the TClass object for TH1!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            TH1* R__t;
            R__t = (TH1*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<TH1*> &R__stl =  vhPeakStartDiff;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(TH1));
         if (R__tcl1==0) {
            Error("vhPeakStartDiff streamer","Missing the TClass object for TH1!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            TH1* R__t;
            R__t = (TH1*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<TH1*> &R__stl =  vhIntegralOverR10;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(TH1));
         if (R__tcl1==0) {
            Error("vhIntegralOverR10 streamer","Missing the TClass object for TH1!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            TH1* R__t;
            R__t = (TH1*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<TH1*> &R__stl =  vhR10;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(TH1));
         if (R__tcl1==0) {
            Error("vhR10 streamer","Missing the TClass object for TH1!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            TH1* R__t;
            R__t = (TH1*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<TH1*> &R__stl =  vhR25;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(TH1));
         if (R__tcl1==0) {
            Error("vhR25 streamer","Missing the TClass object for TH1!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            TH1* R__t;
            R__t = (TH1*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<TH1*> &R__stl =  vhR50;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(TH1));
         if (R__tcl1==0) {
            Error("vhR50 streamer","Missing the TClass object for TH1!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            TH1* R__t;
            R__t = (TH1*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<TH1*> &R__stl =  vhR75;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(TH1));
         if (R__tcl1==0) {
            Error("vhR75 streamer","Missing the TClass object for TH1!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            TH1* R__t;
            R__t = (TH1*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<TH1*> &R__stl =  vhR90;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(TH1));
         if (R__tcl1==0) {
            Error("vhR90 streamer","Missing the TClass object for TH1!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            TH1* R__t;
            R__t = (TH1*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<TH1*> &R__stl =  vhF10;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(TH1));
         if (R__tcl1==0) {
            Error("vhF10 streamer","Missing the TClass object for TH1!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            TH1* R__t;
            R__t = (TH1*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<TH1*> &R__stl =  vhF25;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(TH1));
         if (R__tcl1==0) {
            Error("vhF25 streamer","Missing the TClass object for TH1!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            TH1* R__t;
            R__t = (TH1*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<TH1*> &R__stl =  vhF50;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(TH1));
         if (R__tcl1==0) {
            Error("vhF50 streamer","Missing the TClass object for TH1!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            TH1* R__t;
            R__t = (TH1*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<TH1*> &R__stl =  vhF75;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(TH1));
         if (R__tcl1==0) {
            Error("vhF75 streamer","Missing the TClass object for TH1!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            TH1* R__t;
            R__t = (TH1*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<TH1*> &R__stl =  vhF90;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(TH1));
         if (R__tcl1==0) {
            Error("vhF90 streamer","Missing the TClass object for TH1!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            TH1* R__t;
            R__t = (TH1*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<TH1*> &R__stl =  vhPeak_cuts;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(TH1));
         if (R__tcl1==0) {
            Error("vhPeak_cuts streamer","Missing the TClass object for TH1!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            TH1* R__t;
            R__t = (TH1*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<TH1*> &R__stl =  vhRMS_cuts;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(TH1));
         if (R__tcl1==0) {
            Error("vhRMS_cuts streamer","Missing the TClass object for TH1!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            TH1* R__t;
            R__t = (TH1*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<TH1*> &R__stl =  vhBase_cuts;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(TH1));
         if (R__tcl1==0) {
            Error("vhBase_cuts streamer","Missing the TClass object for TH1!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            TH1* R__t;
            R__t = (TH1*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<TH1*> &R__stl =  vhPeakBin_cuts;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(TH1));
         if (R__tcl1==0) {
            Error("vhPeakBin_cuts streamer","Missing the TClass object for TH1!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            TH1* R__t;
            R__t = (TH1*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<TH1*> &R__stl =  vhStartBin_cuts;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(TH1));
         if (R__tcl1==0) {
            Error("vhStartBin_cuts streamer","Missing the TClass object for TH1!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            TH1* R__t;
            R__t = (TH1*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<TH1*> &R__stl =  vhEndBin_cuts;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(TH1));
         if (R__tcl1==0) {
            Error("vhEndBin_cuts streamer","Missing the TClass object for TH1!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            TH1* R__t;
            R__t = (TH1*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<TH1*> &R__stl =  vhIntegral_cuts;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(TH1));
         if (R__tcl1==0) {
            Error("vhIntegral_cuts streamer","Missing the TClass object for TH1!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            TH1* R__t;
            R__t = (TH1*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<TH1*> &R__stl =  vhPeakStartDiff_cuts;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(TH1));
         if (R__tcl1==0) {
            Error("vhPeakStartDiff_cuts streamer","Missing the TClass object for TH1!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            TH1* R__t;
            R__t = (TH1*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<TH1*> &R__stl =  vhIntegralOverR10_cuts;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(TH1));
         if (R__tcl1==0) {
            Error("vhIntegralOverR10_cuts streamer","Missing the TClass object for TH1!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            TH1* R__t;
            R__t = (TH1*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<TH1*> &R__stl =  vhR10_cuts;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(TH1));
         if (R__tcl1==0) {
            Error("vhR10_cuts streamer","Missing the TClass object for TH1!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            TH1* R__t;
            R__t = (TH1*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<TH1*> &R__stl =  vhR25_cuts;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(TH1));
         if (R__tcl1==0) {
            Error("vhR25_cuts streamer","Missing the TClass object for TH1!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            TH1* R__t;
            R__t = (TH1*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<TH1*> &R__stl =  vhR50_cuts;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(TH1));
         if (R__tcl1==0) {
            Error("vhR50_cuts streamer","Missing the TClass object for TH1!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            TH1* R__t;
            R__t = (TH1*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<TH1*> &R__stl =  vhR75_cuts;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(TH1));
         if (R__tcl1==0) {
            Error("vhR75_cuts streamer","Missing the TClass object for TH1!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            TH1* R__t;
            R__t = (TH1*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<TH1*> &R__stl =  vhR90_cuts;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(TH1));
         if (R__tcl1==0) {
            Error("vhR90_cuts streamer","Missing the TClass object for TH1!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            TH1* R__t;
            R__t = (TH1*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<TH1*> &R__stl =  vhF10_cuts;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(TH1));
         if (R__tcl1==0) {
            Error("vhF10_cuts streamer","Missing the TClass object for TH1!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            TH1* R__t;
            R__t = (TH1*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<TH1*> &R__stl =  vhF25_cuts;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(TH1));
         if (R__tcl1==0) {
            Error("vhF25_cuts streamer","Missing the TClass object for TH1!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            TH1* R__t;
            R__t = (TH1*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<TH1*> &R__stl =  vhF50_cuts;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(TH1));
         if (R__tcl1==0) {
            Error("vhF50_cuts streamer","Missing the TClass object for TH1!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            TH1* R__t;
            R__t = (TH1*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<TH1*> &R__stl =  vhF75_cuts;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(TH1));
         if (R__tcl1==0) {
            Error("vhF75_cuts streamer","Missing the TClass object for TH1!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            TH1* R__t;
            R__t = (TH1*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<TH1*> &R__stl =  vhF90_cuts;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(TH1));
         if (R__tcl1==0) {
            Error("vhF90_cuts streamer","Missing the TClass object for TH1!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            TH1* R__t;
            R__t = (TH1*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<TH1*> &R__stl =  vhPeak_nobias;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(TH1));
         if (R__tcl1==0) {
            Error("vhPeak_nobias streamer","Missing the TClass object for TH1!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            TH1* R__t;
            R__t = (TH1*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<TH1*> &R__stl =  vhBase_nobias;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(TH1));
         if (R__tcl1==0) {
            Error("vhBase_nobias streamer","Missing the TClass object for TH1!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            TH1* R__t;
            R__t = (TH1*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<TH1*> &R__stl =  vhRMS_nobias;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(TH1));
         if (R__tcl1==0) {
            Error("vhRMS_nobias streamer","Missing the TClass object for TH1!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            TH1* R__t;
            R__t = (TH1*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<TH1*> &R__stl =  vhPeakBin_nobias;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(TH1));
         if (R__tcl1==0) {
            Error("vhPeakBin_nobias streamer","Missing the TClass object for TH1!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            TH1* R__t;
            R__t = (TH1*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<TH1*> &R__stl =  vhStartBin_nobias;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(TH1));
         if (R__tcl1==0) {
            Error("vhStartBin_nobias streamer","Missing the TClass object for TH1!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            TH1* R__t;
            R__t = (TH1*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<TH1*> &R__stl =  vhEndBin_nobias;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(TH1));
         if (R__tcl1==0) {
            Error("vhEndBin_nobias streamer","Missing the TClass object for TH1!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            TH1* R__t;
            R__t = (TH1*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<TH1*> &R__stl =  vhIntegral_nobias;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(TH1));
         if (R__tcl1==0) {
            Error("vhIntegral_nobias streamer","Missing the TClass object for TH1!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            TH1* R__t;
            R__t = (TH1*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<TH1*> &R__stl =  vhPeakStartDiff_nobias;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(TH1));
         if (R__tcl1==0) {
            Error("vhPeakStartDiff_nobias streamer","Missing the TClass object for TH1!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            TH1* R__t;
            R__t = (TH1*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<TH1*> &R__stl =  vhIntegralOverR10_nobias;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(TH1));
         if (R__tcl1==0) {
            Error("vhIntegralOverR10_nobias streamer","Missing the TClass object for TH1!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            TH1* R__t;
            R__t = (TH1*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      R__b >> hPeakBin_Peak;
      R__b >> hPeakBin_Peak_cuts;
      R__b >> hXtalk_Peak_Peak;
      R__b >> hXtalk_Peak_Peak_cuts;
      R__b >> hXtalk_DeltaT_PeakRatio;
      R__b >> hXtalk_DeltaT_PeakRatio_cuts;
      R__b.CheckByteCount(R__s, R__c, thisClass::IsA());
   } else {
      R__c = R__b.WriteVersion(thisClass::IsA(), kTRUE);
      {
         vector<double> &R__stl =  BaseMean;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  BaseSigma;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  RmsMean;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  RmsSigma;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  PeakBinMean;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  PeakBinSigma;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  StartBinMean;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  StartBinSigma;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  PeakStartDiffMean;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  PeakStartDiffSigma;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b << (TObject*)hPeak;
      R__b << (TObject*)hRMS;
      R__b << (TObject*)hBase;
      R__b << (TObject*)hPeakBin;
      R__b << (TObject*)hStartBin;
      R__b << (TObject*)hEndBin;
      R__b << (TObject*)hIntegral;
      R__b << (TObject*)hPeakStartDiff;
      R__b << (TObject*)hIntegralOverR10;
      R__b << (TObject*)hR10;
      R__b << (TObject*)hR25;
      R__b << (TObject*)hR50;
      R__b << (TObject*)hR75;
      R__b << (TObject*)hR90;
      R__b << (TObject*)hF10;
      R__b << (TObject*)hF25;
      R__b << (TObject*)hF50;
      R__b << (TObject*)hF75;
      R__b << (TObject*)hF90;
      R__b << (TObject*)hPeak_cuts;
      R__b << (TObject*)hRMS_cuts;
      R__b << (TObject*)hBase_cuts;
      R__b << (TObject*)hPeakBin_cuts;
      R__b << (TObject*)hStartBin_cuts;
      R__b << (TObject*)hEndBin_cuts;
      R__b << (TObject*)hIntegral_cuts;
      R__b << (TObject*)hPeakStartDiff_cuts;
      R__b << (TObject*)hIntegralOverR10_cuts;
      R__b << (TObject*)hR10_cuts;
      R__b << (TObject*)hR25_cuts;
      R__b << (TObject*)hR50_cuts;
      R__b << (TObject*)hR75_cuts;
      R__b << (TObject*)hR90_cuts;
      R__b << (TObject*)hF10_cuts;
      R__b << (TObject*)hF25_cuts;
      R__b << (TObject*)hF50_cuts;
      R__b << (TObject*)hF75_cuts;
      R__b << (TObject*)hF90_cuts;
      R__b << (TObject*)hPeak_nobias;
      R__b << (TObject*)hBase_nobias;
      R__b << (TObject*)hRMS_nobias;
      R__b << (TObject*)hPeakBin_nobias;
      R__b << (TObject*)hStartBin_nobias;
      R__b << (TObject*)hEndBin_nobias;
      R__b << (TObject*)hIntegral_nobias;
      R__b << (TObject*)hPeakStartDiff_nobias;
      R__b << (TObject*)hIntegralOverR10_nobias;
      {
         vector<TH1*> &R__stl =  vhPeak;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<TH1*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<TH1*> &R__stl =  vhRMS;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<TH1*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<TH1*> &R__stl =  vhBase;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<TH1*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<TH1*> &R__stl =  vhPeakBin;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<TH1*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<TH1*> &R__stl =  vhStartBin;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<TH1*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<TH1*> &R__stl =  vhEndBin;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<TH1*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<TH1*> &R__stl =  vhIntegral;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<TH1*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<TH1*> &R__stl =  vhPeakStartDiff;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<TH1*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<TH1*> &R__stl =  vhIntegralOverR10;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<TH1*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<TH1*> &R__stl =  vhR10;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<TH1*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<TH1*> &R__stl =  vhR25;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<TH1*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<TH1*> &R__stl =  vhR50;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<TH1*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<TH1*> &R__stl =  vhR75;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<TH1*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<TH1*> &R__stl =  vhR90;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<TH1*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<TH1*> &R__stl =  vhF10;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<TH1*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<TH1*> &R__stl =  vhF25;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<TH1*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<TH1*> &R__stl =  vhF50;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<TH1*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<TH1*> &R__stl =  vhF75;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<TH1*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<TH1*> &R__stl =  vhF90;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<TH1*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<TH1*> &R__stl =  vhPeak_cuts;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<TH1*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<TH1*> &R__stl =  vhRMS_cuts;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<TH1*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<TH1*> &R__stl =  vhBase_cuts;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<TH1*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<TH1*> &R__stl =  vhPeakBin_cuts;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<TH1*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<TH1*> &R__stl =  vhStartBin_cuts;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<TH1*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<TH1*> &R__stl =  vhEndBin_cuts;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<TH1*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<TH1*> &R__stl =  vhIntegral_cuts;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<TH1*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<TH1*> &R__stl =  vhPeakStartDiff_cuts;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<TH1*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<TH1*> &R__stl =  vhIntegralOverR10_cuts;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<TH1*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<TH1*> &R__stl =  vhR10_cuts;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<TH1*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<TH1*> &R__stl =  vhR25_cuts;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<TH1*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<TH1*> &R__stl =  vhR50_cuts;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<TH1*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<TH1*> &R__stl =  vhR75_cuts;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<TH1*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<TH1*> &R__stl =  vhR90_cuts;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<TH1*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<TH1*> &R__stl =  vhF10_cuts;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<TH1*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<TH1*> &R__stl =  vhF25_cuts;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<TH1*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<TH1*> &R__stl =  vhF50_cuts;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<TH1*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<TH1*> &R__stl =  vhF75_cuts;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<TH1*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<TH1*> &R__stl =  vhF90_cuts;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<TH1*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<TH1*> &R__stl =  vhPeak_nobias;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<TH1*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<TH1*> &R__stl =  vhBase_nobias;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<TH1*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<TH1*> &R__stl =  vhRMS_nobias;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<TH1*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<TH1*> &R__stl =  vhPeakBin_nobias;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<TH1*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<TH1*> &R__stl =  vhStartBin_nobias;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<TH1*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<TH1*> &R__stl =  vhEndBin_nobias;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<TH1*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<TH1*> &R__stl =  vhIntegral_nobias;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<TH1*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<TH1*> &R__stl =  vhPeakStartDiff_nobias;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<TH1*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<TH1*> &R__stl =  vhIntegralOverR10_nobias;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<TH1*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b << (TObject*)hPeakBin_Peak;
      R__b << (TObject*)hPeakBin_Peak_cuts;
      R__b << (TObject*)hXtalk_Peak_Peak;
      R__b << (TObject*)hXtalk_Peak_Peak_cuts;
      R__b << (TObject*)hXtalk_DeltaT_PeakRatio;
      R__b << (TObject*)hXtalk_DeltaT_PeakRatio_cuts;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

} // namespace dmtpc::analysis
} // namespace dmtpc::analysis
//______________________________________________________________________________
      namespace dmtpc {
         namespace analysis {
void GainTree::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class dmtpc::analysis::GainTree.
      TClass *R__cl = ::dmtpc::analysis::GainTree::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BaseMean", (void*)&BaseMean);
      R__insp.InspectMember("vector<double>", (void*)&BaseMean, "BaseMean.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BaseSigma", (void*)&BaseSigma);
      R__insp.InspectMember("vector<double>", (void*)&BaseSigma, "BaseSigma.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "RmsMean", (void*)&RmsMean);
      R__insp.InspectMember("vector<double>", (void*)&RmsMean, "RmsMean.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "RmsSigma", (void*)&RmsSigma);
      R__insp.InspectMember("vector<double>", (void*)&RmsSigma, "RmsSigma.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PeakBinMean", (void*)&PeakBinMean);
      R__insp.InspectMember("vector<double>", (void*)&PeakBinMean, "PeakBinMean.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PeakBinSigma", (void*)&PeakBinSigma);
      R__insp.InspectMember("vector<double>", (void*)&PeakBinSigma, "PeakBinSigma.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "StartBinMean", (void*)&StartBinMean);
      R__insp.InspectMember("vector<double>", (void*)&StartBinMean, "StartBinMean.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "StartBinSigma", (void*)&StartBinSigma);
      R__insp.InspectMember("vector<double>", (void*)&StartBinSigma, "StartBinSigma.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PeakStartDiffMean", (void*)&PeakStartDiffMean);
      R__insp.InspectMember("vector<double>", (void*)&PeakStartDiffMean, "PeakStartDiffMean.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PeakStartDiffSigma", (void*)&PeakStartDiffSigma);
      R__insp.InspectMember("vector<double>", (void*)&PeakStartDiffSigma, "PeakStartDiffSigma.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hPeak", &hPeak);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hRMS", &hRMS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hBase", &hBase);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hPeakBin", &hPeakBin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hStartBin", &hStartBin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hEndBin", &hEndBin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hIntegral", &hIntegral);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hPeakStartDiff", &hPeakStartDiff);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hIntegralOverR10", &hIntegralOverR10);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hR10", &hR10);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hR25", &hR25);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hR50", &hR50);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hR75", &hR75);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hR90", &hR90);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hF10", &hF10);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hF25", &hF25);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hF50", &hF50);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hF75", &hF75);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hF90", &hF90);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hPeak_cuts", &hPeak_cuts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hRMS_cuts", &hRMS_cuts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hBase_cuts", &hBase_cuts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hPeakBin_cuts", &hPeakBin_cuts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hStartBin_cuts", &hStartBin_cuts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hEndBin_cuts", &hEndBin_cuts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hIntegral_cuts", &hIntegral_cuts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hPeakStartDiff_cuts", &hPeakStartDiff_cuts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hIntegralOverR10_cuts", &hIntegralOverR10_cuts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hR10_cuts", &hR10_cuts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hR25_cuts", &hR25_cuts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hR50_cuts", &hR50_cuts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hR75_cuts", &hR75_cuts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hR90_cuts", &hR90_cuts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hF10_cuts", &hF10_cuts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hF25_cuts", &hF25_cuts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hF50_cuts", &hF50_cuts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hF75_cuts", &hF75_cuts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hF90_cuts", &hF90_cuts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hPeak_nobias", &hPeak_nobias);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hBase_nobias", &hBase_nobias);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hRMS_nobias", &hRMS_nobias);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hPeakBin_nobias", &hPeakBin_nobias);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hStartBin_nobias", &hStartBin_nobias);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hEndBin_nobias", &hEndBin_nobias);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hIntegral_nobias", &hIntegral_nobias);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hPeakStartDiff_nobias", &hPeakStartDiff_nobias);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hIntegralOverR10_nobias", &hIntegralOverR10_nobias);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vhPeak", (void*)&vhPeak);
      R__insp.InspectMember("vector<TH1*>", (void*)&vhPeak, "vhPeak.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vhRMS", (void*)&vhRMS);
      R__insp.InspectMember("vector<TH1*>", (void*)&vhRMS, "vhRMS.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vhBase", (void*)&vhBase);
      R__insp.InspectMember("vector<TH1*>", (void*)&vhBase, "vhBase.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vhPeakBin", (void*)&vhPeakBin);
      R__insp.InspectMember("vector<TH1*>", (void*)&vhPeakBin, "vhPeakBin.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vhStartBin", (void*)&vhStartBin);
      R__insp.InspectMember("vector<TH1*>", (void*)&vhStartBin, "vhStartBin.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vhEndBin", (void*)&vhEndBin);
      R__insp.InspectMember("vector<TH1*>", (void*)&vhEndBin, "vhEndBin.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vhIntegral", (void*)&vhIntegral);
      R__insp.InspectMember("vector<TH1*>", (void*)&vhIntegral, "vhIntegral.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vhPeakStartDiff", (void*)&vhPeakStartDiff);
      R__insp.InspectMember("vector<TH1*>", (void*)&vhPeakStartDiff, "vhPeakStartDiff.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vhIntegralOverR10", (void*)&vhIntegralOverR10);
      R__insp.InspectMember("vector<TH1*>", (void*)&vhIntegralOverR10, "vhIntegralOverR10.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vhR10", (void*)&vhR10);
      R__insp.InspectMember("vector<TH1*>", (void*)&vhR10, "vhR10.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vhR25", (void*)&vhR25);
      R__insp.InspectMember("vector<TH1*>", (void*)&vhR25, "vhR25.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vhR50", (void*)&vhR50);
      R__insp.InspectMember("vector<TH1*>", (void*)&vhR50, "vhR50.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vhR75", (void*)&vhR75);
      R__insp.InspectMember("vector<TH1*>", (void*)&vhR75, "vhR75.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vhR90", (void*)&vhR90);
      R__insp.InspectMember("vector<TH1*>", (void*)&vhR90, "vhR90.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vhF10", (void*)&vhF10);
      R__insp.InspectMember("vector<TH1*>", (void*)&vhF10, "vhF10.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vhF25", (void*)&vhF25);
      R__insp.InspectMember("vector<TH1*>", (void*)&vhF25, "vhF25.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vhF50", (void*)&vhF50);
      R__insp.InspectMember("vector<TH1*>", (void*)&vhF50, "vhF50.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vhF75", (void*)&vhF75);
      R__insp.InspectMember("vector<TH1*>", (void*)&vhF75, "vhF75.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vhF90", (void*)&vhF90);
      R__insp.InspectMember("vector<TH1*>", (void*)&vhF90, "vhF90.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vhPeak_cuts", (void*)&vhPeak_cuts);
      R__insp.InspectMember("vector<TH1*>", (void*)&vhPeak_cuts, "vhPeak_cuts.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vhRMS_cuts", (void*)&vhRMS_cuts);
      R__insp.InspectMember("vector<TH1*>", (void*)&vhRMS_cuts, "vhRMS_cuts.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vhBase_cuts", (void*)&vhBase_cuts);
      R__insp.InspectMember("vector<TH1*>", (void*)&vhBase_cuts, "vhBase_cuts.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vhPeakBin_cuts", (void*)&vhPeakBin_cuts);
      R__insp.InspectMember("vector<TH1*>", (void*)&vhPeakBin_cuts, "vhPeakBin_cuts.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vhStartBin_cuts", (void*)&vhStartBin_cuts);
      R__insp.InspectMember("vector<TH1*>", (void*)&vhStartBin_cuts, "vhStartBin_cuts.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vhEndBin_cuts", (void*)&vhEndBin_cuts);
      R__insp.InspectMember("vector<TH1*>", (void*)&vhEndBin_cuts, "vhEndBin_cuts.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vhIntegral_cuts", (void*)&vhIntegral_cuts);
      R__insp.InspectMember("vector<TH1*>", (void*)&vhIntegral_cuts, "vhIntegral_cuts.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vhPeakStartDiff_cuts", (void*)&vhPeakStartDiff_cuts);
      R__insp.InspectMember("vector<TH1*>", (void*)&vhPeakStartDiff_cuts, "vhPeakStartDiff_cuts.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vhIntegralOverR10_cuts", (void*)&vhIntegralOverR10_cuts);
      R__insp.InspectMember("vector<TH1*>", (void*)&vhIntegralOverR10_cuts, "vhIntegralOverR10_cuts.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vhR10_cuts", (void*)&vhR10_cuts);
      R__insp.InspectMember("vector<TH1*>", (void*)&vhR10_cuts, "vhR10_cuts.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vhR25_cuts", (void*)&vhR25_cuts);
      R__insp.InspectMember("vector<TH1*>", (void*)&vhR25_cuts, "vhR25_cuts.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vhR50_cuts", (void*)&vhR50_cuts);
      R__insp.InspectMember("vector<TH1*>", (void*)&vhR50_cuts, "vhR50_cuts.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vhR75_cuts", (void*)&vhR75_cuts);
      R__insp.InspectMember("vector<TH1*>", (void*)&vhR75_cuts, "vhR75_cuts.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vhR90_cuts", (void*)&vhR90_cuts);
      R__insp.InspectMember("vector<TH1*>", (void*)&vhR90_cuts, "vhR90_cuts.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vhF10_cuts", (void*)&vhF10_cuts);
      R__insp.InspectMember("vector<TH1*>", (void*)&vhF10_cuts, "vhF10_cuts.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vhF25_cuts", (void*)&vhF25_cuts);
      R__insp.InspectMember("vector<TH1*>", (void*)&vhF25_cuts, "vhF25_cuts.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vhF50_cuts", (void*)&vhF50_cuts);
      R__insp.InspectMember("vector<TH1*>", (void*)&vhF50_cuts, "vhF50_cuts.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vhF75_cuts", (void*)&vhF75_cuts);
      R__insp.InspectMember("vector<TH1*>", (void*)&vhF75_cuts, "vhF75_cuts.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vhF90_cuts", (void*)&vhF90_cuts);
      R__insp.InspectMember("vector<TH1*>", (void*)&vhF90_cuts, "vhF90_cuts.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vhPeak_nobias", (void*)&vhPeak_nobias);
      R__insp.InspectMember("vector<TH1*>", (void*)&vhPeak_nobias, "vhPeak_nobias.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vhBase_nobias", (void*)&vhBase_nobias);
      R__insp.InspectMember("vector<TH1*>", (void*)&vhBase_nobias, "vhBase_nobias.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vhRMS_nobias", (void*)&vhRMS_nobias);
      R__insp.InspectMember("vector<TH1*>", (void*)&vhRMS_nobias, "vhRMS_nobias.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vhPeakBin_nobias", (void*)&vhPeakBin_nobias);
      R__insp.InspectMember("vector<TH1*>", (void*)&vhPeakBin_nobias, "vhPeakBin_nobias.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vhStartBin_nobias", (void*)&vhStartBin_nobias);
      R__insp.InspectMember("vector<TH1*>", (void*)&vhStartBin_nobias, "vhStartBin_nobias.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vhEndBin_nobias", (void*)&vhEndBin_nobias);
      R__insp.InspectMember("vector<TH1*>", (void*)&vhEndBin_nobias, "vhEndBin_nobias.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vhIntegral_nobias", (void*)&vhIntegral_nobias);
      R__insp.InspectMember("vector<TH1*>", (void*)&vhIntegral_nobias, "vhIntegral_nobias.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vhPeakStartDiff_nobias", (void*)&vhPeakStartDiff_nobias);
      R__insp.InspectMember("vector<TH1*>", (void*)&vhPeakStartDiff_nobias, "vhPeakStartDiff_nobias.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vhIntegralOverR10_nobias", (void*)&vhIntegralOverR10_nobias);
      R__insp.InspectMember("vector<TH1*>", (void*)&vhIntegralOverR10_nobias, "vhIntegralOverR10_nobias.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hPeakBin_Peak", &hPeakBin_Peak);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hPeakBin_Peak_cuts", &hPeakBin_Peak_cuts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hXtalk_Peak_Peak", &hXtalk_Peak_Peak);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hXtalk_Peak_Peak_cuts", &hXtalk_Peak_Peak_cuts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hXtalk_DeltaT_PeakRatio", &hXtalk_DeltaT_PeakRatio);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hXtalk_DeltaT_PeakRatio_cuts", &hXtalk_DeltaT_PeakRatio_cuts);
}

} // namespace dmtpc::analysis
} // namespace dmtpc::analysis
namespace ROOTDict {
   // Wrappers around operator new
   static void *new_dmtpccLcLanalysiscLcLGainTree(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::dmtpc::analysis::GainTree : new ::dmtpc::analysis::GainTree;
   }
   static void *newArray_dmtpccLcLanalysiscLcLGainTree(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::dmtpc::analysis::GainTree[nElements] : new ::dmtpc::analysis::GainTree[nElements];
   }
   // Wrapper around operator delete
   static void delete_dmtpccLcLanalysiscLcLGainTree(void *p) {
      delete ((::dmtpc::analysis::GainTree*)p);
   }
   static void deleteArray_dmtpccLcLanalysiscLcLGainTree(void *p) {
      delete [] ((::dmtpc::analysis::GainTree*)p);
   }
   static void destruct_dmtpccLcLanalysiscLcLGainTree(void *p) {
      typedef ::dmtpc::analysis::GainTree current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_dmtpccLcLanalysiscLcLGainTree(TBuffer &buf, void *obj) {
      ((::dmtpc::analysis::GainTree*)obj)->::dmtpc::analysis::GainTree::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::dmtpc::analysis::GainTree

namespace ROOTDict {
   void vectorlETH1mUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlETH1mUgR_Dictionary();
   static void *new_vectorlETH1mUgR(void *p = 0);
   static void *newArray_vectorlETH1mUgR(Long_t size, void *p);
   static void delete_vectorlETH1mUgR(void *p);
   static void deleteArray_vectorlETH1mUgR(void *p);
   static void destruct_vectorlETH1mUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<TH1*>*)
   {
      vector<TH1*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<TH1*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<TH1*>", -2, "prec_stl/vector", 49,
                  typeid(vector<TH1*>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlETH1mUgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<TH1*>) );
      instance.SetNew(&new_vectorlETH1mUgR);
      instance.SetNewArray(&newArray_vectorlETH1mUgR);
      instance.SetDelete(&delete_vectorlETH1mUgR);
      instance.SetDeleteArray(&deleteArray_vectorlETH1mUgR);
      instance.SetDestructor(&destruct_vectorlETH1mUgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<TH1*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<TH1*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlETH1mUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<TH1*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlETH1mUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TH1*> : new vector<TH1*>;
   }
   static void *newArray_vectorlETH1mUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TH1*>[nElements] : new vector<TH1*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlETH1mUgR(void *p) {
      delete ((vector<TH1*>*)p);
   }
   static void deleteArray_vectorlETH1mUgR(void *p) {
      delete [] ((vector<TH1*>*)p);
   }
   static void destruct_vectorlETH1mUgR(void *p) {
      typedef vector<TH1*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<TH1*>

namespace ROOTDict {
   void vectorlETH1SmUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlETH1SmUgR_Dictionary();
   static void *new_vectorlETH1SmUgR(void *p = 0);
   static void *newArray_vectorlETH1SmUgR(Long_t size, void *p);
   static void delete_vectorlETH1SmUgR(void *p);
   static void deleteArray_vectorlETH1SmUgR(void *p);
   static void destruct_vectorlETH1SmUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<TH1S*>*)
   {
      vector<TH1S*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<TH1S*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<TH1S*>", -2, "prec_stl/vector", 49,
                  typeid(vector<TH1S*>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlETH1SmUgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<TH1S*>) );
      instance.SetNew(&new_vectorlETH1SmUgR);
      instance.SetNewArray(&newArray_vectorlETH1SmUgR);
      instance.SetDelete(&delete_vectorlETH1SmUgR);
      instance.SetDeleteArray(&deleteArray_vectorlETH1SmUgR);
      instance.SetDestructor(&destruct_vectorlETH1SmUgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<TH1S*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<TH1S*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlETH1SmUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<TH1S*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlETH1SmUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TH1S*> : new vector<TH1S*>;
   }
   static void *newArray_vectorlETH1SmUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TH1S*>[nElements] : new vector<TH1S*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlETH1SmUgR(void *p) {
      delete ((vector<TH1S*>*)p);
   }
   static void deleteArray_vectorlETH1SmUgR(void *p) {
      delete [] ((vector<TH1S*>*)p);
   }
   static void destruct_vectorlETH1SmUgR(void *p) {
      typedef vector<TH1S*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<TH1S*>

namespace ROOTDict {
   void vectorlETH2ImUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlETH2ImUgR_Dictionary();
   static void *new_vectorlETH2ImUgR(void *p = 0);
   static void *newArray_vectorlETH2ImUgR(Long_t size, void *p);
   static void delete_vectorlETH2ImUgR(void *p);
   static void deleteArray_vectorlETH2ImUgR(void *p);
   static void destruct_vectorlETH2ImUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<TH2I*>*)
   {
      vector<TH2I*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<TH2I*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<TH2I*>", -2, "prec_stl/vector", 49,
                  typeid(vector<TH2I*>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlETH2ImUgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<TH2I*>) );
      instance.SetNew(&new_vectorlETH2ImUgR);
      instance.SetNewArray(&newArray_vectorlETH2ImUgR);
      instance.SetDelete(&delete_vectorlETH2ImUgR);
      instance.SetDeleteArray(&deleteArray_vectorlETH2ImUgR);
      instance.SetDestructor(&destruct_vectorlETH2ImUgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<TH2I*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<TH2I*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlETH2ImUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<TH2I*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlETH2ImUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TH2I*> : new vector<TH2I*>;
   }
   static void *newArray_vectorlETH2ImUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TH2I*>[nElements] : new vector<TH2I*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlETH2ImUgR(void *p) {
      delete ((vector<TH2I*>*)p);
   }
   static void deleteArray_vectorlETH2ImUgR(void *p) {
      delete [] ((vector<TH2I*>*)p);
   }
   static void destruct_vectorlETH2ImUgR(void *p) {
      typedef vector<TH2I*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<TH2I*>

namespace ROOTDict {
   void vectorlETObjStringgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlETObjStringgR_Dictionary();
   static void *new_vectorlETObjStringgR(void *p = 0);
   static void *newArray_vectorlETObjStringgR(Long_t size, void *p);
   static void delete_vectorlETObjStringgR(void *p);
   static void deleteArray_vectorlETObjStringgR(void *p);
   static void destruct_vectorlETObjStringgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<TObjString>*)
   {
      vector<TObjString> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<TObjString>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<TObjString>", -2, "prec_stl/vector", 49,
                  typeid(vector<TObjString>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlETObjStringgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<TObjString>) );
      instance.SetNew(&new_vectorlETObjStringgR);
      instance.SetNewArray(&newArray_vectorlETObjStringgR);
      instance.SetDelete(&delete_vectorlETObjStringgR);
      instance.SetDeleteArray(&deleteArray_vectorlETObjStringgR);
      instance.SetDestructor(&destruct_vectorlETObjStringgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<TObjString> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<TObjString>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlETObjStringgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<TObjString>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlETObjStringgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TObjString> : new vector<TObjString>;
   }
   static void *newArray_vectorlETObjStringgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TObjString>[nElements] : new vector<TObjString>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlETObjStringgR(void *p) {
      delete ((vector<TObjString>*)p);
   }
   static void deleteArray_vectorlETObjStringgR(void *p) {
      delete [] ((vector<TObjString>*)p);
   }
   static void destruct_vectorlETObjStringgR(void *p) {
      typedef vector<TObjString> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<TObjString>

namespace ROOTDict {
   void vectorlETStringgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlETStringgR_Dictionary();
   static void *new_vectorlETStringgR(void *p = 0);
   static void *newArray_vectorlETStringgR(Long_t size, void *p);
   static void delete_vectorlETStringgR(void *p);
   static void deleteArray_vectorlETStringgR(void *p);
   static void destruct_vectorlETStringgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<TString>*)
   {
      vector<TString> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<TString>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<TString>", -2, "prec_stl/vector", 49,
                  typeid(vector<TString>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlETStringgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<TString>) );
      instance.SetNew(&new_vectorlETStringgR);
      instance.SetNewArray(&newArray_vectorlETStringgR);
      instance.SetDelete(&delete_vectorlETStringgR);
      instance.SetDeleteArray(&deleteArray_vectorlETStringgR);
      instance.SetDestructor(&destruct_vectorlETStringgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<TString> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<TString>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlETStringgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<TString>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlETStringgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TString> : new vector<TString>;
   }
   static void *newArray_vectorlETStringgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TString>[nElements] : new vector<TString>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlETStringgR(void *p) {
      delete ((vector<TString>*)p);
   }
   static void deleteArray_vectorlETStringgR(void *p) {
      delete [] ((vector<TString>*)p);
   }
   static void destruct_vectorlETStringgR(void *p) {
      typedef vector<TString> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<TString>

namespace ROOTDict {
   void vectorlEboolgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEboolgR_Dictionary();
   static void *new_vectorlEboolgR(void *p = 0);
   static void *newArray_vectorlEboolgR(Long_t size, void *p);
   static void delete_vectorlEboolgR(void *p);
   static void deleteArray_vectorlEboolgR(void *p);
   static void destruct_vectorlEboolgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<bool>*)
   {
      vector<bool> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<bool>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<bool>", -2, "vectorbool.dll", 0,
                  typeid(vector<bool>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEboolgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<bool>) );
      instance.SetNew(&new_vectorlEboolgR);
      instance.SetNewArray(&newArray_vectorlEboolgR);
      instance.SetDelete(&delete_vectorlEboolgR);
      instance.SetDeleteArray(&deleteArray_vectorlEboolgR);
      instance.SetDestructor(&destruct_vectorlEboolgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<bool> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<bool>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEboolgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<bool>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEboolgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<bool> : new vector<bool>;
   }
   static void *newArray_vectorlEboolgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<bool>[nElements] : new vector<bool>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEboolgR(void *p) {
      delete ((vector<bool>*)p);
   }
   static void deleteArray_vectorlEboolgR(void *p) {
      delete [] ((vector<bool>*)p);
   }
   static void destruct_vectorlEboolgR(void *p) {
      typedef vector<bool> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<bool>

namespace ROOTDict {
   void vectorlEdmtpccLcLanalysiscLcLClustergR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEdmtpccLcLanalysiscLcLClustergR_Dictionary();
   static void *new_vectorlEdmtpccLcLanalysiscLcLClustergR(void *p = 0);
   static void *newArray_vectorlEdmtpccLcLanalysiscLcLClustergR(Long_t size, void *p);
   static void delete_vectorlEdmtpccLcLanalysiscLcLClustergR(void *p);
   static void deleteArray_vectorlEdmtpccLcLanalysiscLcLClustergR(void *p);
   static void destruct_vectorlEdmtpccLcLanalysiscLcLClustergR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<dmtpc::analysis::Cluster>*)
   {
      vector<dmtpc::analysis::Cluster> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<dmtpc::analysis::Cluster>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<dmtpc::analysis::Cluster>", -2, "prec_stl/vector", 49,
                  typeid(vector<dmtpc::analysis::Cluster>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEdmtpccLcLanalysiscLcLClustergR_Dictionary, isa_proxy, 0,
                  sizeof(vector<dmtpc::analysis::Cluster>) );
      instance.SetNew(&new_vectorlEdmtpccLcLanalysiscLcLClustergR);
      instance.SetNewArray(&newArray_vectorlEdmtpccLcLanalysiscLcLClustergR);
      instance.SetDelete(&delete_vectorlEdmtpccLcLanalysiscLcLClustergR);
      instance.SetDeleteArray(&deleteArray_vectorlEdmtpccLcLanalysiscLcLClustergR);
      instance.SetDestructor(&destruct_vectorlEdmtpccLcLanalysiscLcLClustergR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<dmtpc::analysis::Cluster> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<dmtpc::analysis::Cluster>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEdmtpccLcLanalysiscLcLClustergR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<dmtpc::analysis::Cluster>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEdmtpccLcLanalysiscLcLClustergR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<dmtpc::analysis::Cluster> : new vector<dmtpc::analysis::Cluster>;
   }
   static void *newArray_vectorlEdmtpccLcLanalysiscLcLClustergR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<dmtpc::analysis::Cluster>[nElements] : new vector<dmtpc::analysis::Cluster>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEdmtpccLcLanalysiscLcLClustergR(void *p) {
      delete ((vector<dmtpc::analysis::Cluster>*)p);
   }
   static void deleteArray_vectorlEdmtpccLcLanalysiscLcLClustergR(void *p) {
      delete [] ((vector<dmtpc::analysis::Cluster>*)p);
   }
   static void destruct_vectorlEdmtpccLcLanalysiscLcLClustergR(void *p) {
      typedef vector<dmtpc::analysis::Cluster> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<dmtpc::analysis::Cluster>

namespace ROOTDict {
   void vectorlEdmtpccLcLanalysiscLcLClusterImagemUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEdmtpccLcLanalysiscLcLClusterImagemUgR_Dictionary();
   static void *new_vectorlEdmtpccLcLanalysiscLcLClusterImagemUgR(void *p = 0);
   static void *newArray_vectorlEdmtpccLcLanalysiscLcLClusterImagemUgR(Long_t size, void *p);
   static void delete_vectorlEdmtpccLcLanalysiscLcLClusterImagemUgR(void *p);
   static void deleteArray_vectorlEdmtpccLcLanalysiscLcLClusterImagemUgR(void *p);
   static void destruct_vectorlEdmtpccLcLanalysiscLcLClusterImagemUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<dmtpc::analysis::ClusterImage*>*)
   {
      vector<dmtpc::analysis::ClusterImage*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<dmtpc::analysis::ClusterImage*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<dmtpc::analysis::ClusterImage*>", -2, "prec_stl/vector", 49,
                  typeid(vector<dmtpc::analysis::ClusterImage*>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEdmtpccLcLanalysiscLcLClusterImagemUgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<dmtpc::analysis::ClusterImage*>) );
      instance.SetNew(&new_vectorlEdmtpccLcLanalysiscLcLClusterImagemUgR);
      instance.SetNewArray(&newArray_vectorlEdmtpccLcLanalysiscLcLClusterImagemUgR);
      instance.SetDelete(&delete_vectorlEdmtpccLcLanalysiscLcLClusterImagemUgR);
      instance.SetDeleteArray(&deleteArray_vectorlEdmtpccLcLanalysiscLcLClusterImagemUgR);
      instance.SetDestructor(&destruct_vectorlEdmtpccLcLanalysiscLcLClusterImagemUgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<dmtpc::analysis::ClusterImage*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<dmtpc::analysis::ClusterImage*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEdmtpccLcLanalysiscLcLClusterImagemUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<dmtpc::analysis::ClusterImage*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEdmtpccLcLanalysiscLcLClusterImagemUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<dmtpc::analysis::ClusterImage*> : new vector<dmtpc::analysis::ClusterImage*>;
   }
   static void *newArray_vectorlEdmtpccLcLanalysiscLcLClusterImagemUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<dmtpc::analysis::ClusterImage*>[nElements] : new vector<dmtpc::analysis::ClusterImage*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEdmtpccLcLanalysiscLcLClusterImagemUgR(void *p) {
      delete ((vector<dmtpc::analysis::ClusterImage*>*)p);
   }
   static void deleteArray_vectorlEdmtpccLcLanalysiscLcLClusterImagemUgR(void *p) {
      delete [] ((vector<dmtpc::analysis::ClusterImage*>*)p);
   }
   static void destruct_vectorlEdmtpccLcLanalysiscLcLClusterImagemUgR(void *p) {
      typedef vector<dmtpc::analysis::ClusterImage*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<dmtpc::analysis::ClusterImage*>

namespace ROOTDict {
   void vectorlEdmtpccLcLwaveformcLcLCspWfVectormUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEdmtpccLcLwaveformcLcLCspWfVectormUgR_Dictionary();
   static void *new_vectorlEdmtpccLcLwaveformcLcLCspWfVectormUgR(void *p = 0);
   static void *newArray_vectorlEdmtpccLcLwaveformcLcLCspWfVectormUgR(Long_t size, void *p);
   static void delete_vectorlEdmtpccLcLwaveformcLcLCspWfVectormUgR(void *p);
   static void deleteArray_vectorlEdmtpccLcLwaveformcLcLCspWfVectormUgR(void *p);
   static void destruct_vectorlEdmtpccLcLwaveformcLcLCspWfVectormUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<dmtpc::waveform::CspWfVector*>*)
   {
      vector<dmtpc::waveform::CspWfVector*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<dmtpc::waveform::CspWfVector*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<dmtpc::waveform::CspWfVector*>", -2, "prec_stl/vector", 49,
                  typeid(vector<dmtpc::waveform::CspWfVector*>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEdmtpccLcLwaveformcLcLCspWfVectormUgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<dmtpc::waveform::CspWfVector*>) );
      instance.SetNew(&new_vectorlEdmtpccLcLwaveformcLcLCspWfVectormUgR);
      instance.SetNewArray(&newArray_vectorlEdmtpccLcLwaveformcLcLCspWfVectormUgR);
      instance.SetDelete(&delete_vectorlEdmtpccLcLwaveformcLcLCspWfVectormUgR);
      instance.SetDeleteArray(&deleteArray_vectorlEdmtpccLcLwaveformcLcLCspWfVectormUgR);
      instance.SetDestructor(&destruct_vectorlEdmtpccLcLwaveformcLcLCspWfVectormUgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<dmtpc::waveform::CspWfVector*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<dmtpc::waveform::CspWfVector*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEdmtpccLcLwaveformcLcLCspWfVectormUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<dmtpc::waveform::CspWfVector*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEdmtpccLcLwaveformcLcLCspWfVectormUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<dmtpc::waveform::CspWfVector*> : new vector<dmtpc::waveform::CspWfVector*>;
   }
   static void *newArray_vectorlEdmtpccLcLwaveformcLcLCspWfVectormUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<dmtpc::waveform::CspWfVector*>[nElements] : new vector<dmtpc::waveform::CspWfVector*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEdmtpccLcLwaveformcLcLCspWfVectormUgR(void *p) {
      delete ((vector<dmtpc::waveform::CspWfVector*>*)p);
   }
   static void deleteArray_vectorlEdmtpccLcLwaveformcLcLCspWfVectormUgR(void *p) {
      delete [] ((vector<dmtpc::waveform::CspWfVector*>*)p);
   }
   static void destruct_vectorlEdmtpccLcLwaveformcLcLCspWfVectormUgR(void *p) {
      typedef vector<dmtpc::waveform::CspWfVector*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<dmtpc::waveform::CspWfVector*>

namespace ROOTDict {
   void vectorlEdmtpccLcLwaveformcLcLFastWfVectormUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEdmtpccLcLwaveformcLcLFastWfVectormUgR_Dictionary();
   static void *new_vectorlEdmtpccLcLwaveformcLcLFastWfVectormUgR(void *p = 0);
   static void *newArray_vectorlEdmtpccLcLwaveformcLcLFastWfVectormUgR(Long_t size, void *p);
   static void delete_vectorlEdmtpccLcLwaveformcLcLFastWfVectormUgR(void *p);
   static void deleteArray_vectorlEdmtpccLcLwaveformcLcLFastWfVectormUgR(void *p);
   static void destruct_vectorlEdmtpccLcLwaveformcLcLFastWfVectormUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<dmtpc::waveform::FastWfVector*>*)
   {
      vector<dmtpc::waveform::FastWfVector*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<dmtpc::waveform::FastWfVector*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<dmtpc::waveform::FastWfVector*>", -2, "prec_stl/vector", 49,
                  typeid(vector<dmtpc::waveform::FastWfVector*>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEdmtpccLcLwaveformcLcLFastWfVectormUgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<dmtpc::waveform::FastWfVector*>) );
      instance.SetNew(&new_vectorlEdmtpccLcLwaveformcLcLFastWfVectormUgR);
      instance.SetNewArray(&newArray_vectorlEdmtpccLcLwaveformcLcLFastWfVectormUgR);
      instance.SetDelete(&delete_vectorlEdmtpccLcLwaveformcLcLFastWfVectormUgR);
      instance.SetDeleteArray(&deleteArray_vectorlEdmtpccLcLwaveformcLcLFastWfVectormUgR);
      instance.SetDestructor(&destruct_vectorlEdmtpccLcLwaveformcLcLFastWfVectormUgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<dmtpc::waveform::FastWfVector*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<dmtpc::waveform::FastWfVector*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEdmtpccLcLwaveformcLcLFastWfVectormUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<dmtpc::waveform::FastWfVector*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEdmtpccLcLwaveformcLcLFastWfVectormUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<dmtpc::waveform::FastWfVector*> : new vector<dmtpc::waveform::FastWfVector*>;
   }
   static void *newArray_vectorlEdmtpccLcLwaveformcLcLFastWfVectormUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<dmtpc::waveform::FastWfVector*>[nElements] : new vector<dmtpc::waveform::FastWfVector*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEdmtpccLcLwaveformcLcLFastWfVectormUgR(void *p) {
      delete ((vector<dmtpc::waveform::FastWfVector*>*)p);
   }
   static void deleteArray_vectorlEdmtpccLcLwaveformcLcLFastWfVectormUgR(void *p) {
      delete [] ((vector<dmtpc::waveform::FastWfVector*>*)p);
   }
   static void destruct_vectorlEdmtpccLcLwaveformcLcLFastWfVectormUgR(void *p) {
      typedef vector<dmtpc::waveform::FastWfVector*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<dmtpc::waveform::FastWfVector*>

namespace ROOTDict {
   void vectorlEdmtpccLcLwaveformcLcLPMTWfVectormUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEdmtpccLcLwaveformcLcLPMTWfVectormUgR_Dictionary();
   static void *new_vectorlEdmtpccLcLwaveformcLcLPMTWfVectormUgR(void *p = 0);
   static void *newArray_vectorlEdmtpccLcLwaveformcLcLPMTWfVectormUgR(Long_t size, void *p);
   static void delete_vectorlEdmtpccLcLwaveformcLcLPMTWfVectormUgR(void *p);
   static void deleteArray_vectorlEdmtpccLcLwaveformcLcLPMTWfVectormUgR(void *p);
   static void destruct_vectorlEdmtpccLcLwaveformcLcLPMTWfVectormUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<dmtpc::waveform::PMTWfVector*>*)
   {
      vector<dmtpc::waveform::PMTWfVector*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<dmtpc::waveform::PMTWfVector*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<dmtpc::waveform::PMTWfVector*>", -2, "prec_stl/vector", 49,
                  typeid(vector<dmtpc::waveform::PMTWfVector*>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEdmtpccLcLwaveformcLcLPMTWfVectormUgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<dmtpc::waveform::PMTWfVector*>) );
      instance.SetNew(&new_vectorlEdmtpccLcLwaveformcLcLPMTWfVectormUgR);
      instance.SetNewArray(&newArray_vectorlEdmtpccLcLwaveformcLcLPMTWfVectormUgR);
      instance.SetDelete(&delete_vectorlEdmtpccLcLwaveformcLcLPMTWfVectormUgR);
      instance.SetDeleteArray(&deleteArray_vectorlEdmtpccLcLwaveformcLcLPMTWfVectormUgR);
      instance.SetDestructor(&destruct_vectorlEdmtpccLcLwaveformcLcLPMTWfVectormUgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<dmtpc::waveform::PMTWfVector*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<dmtpc::waveform::PMTWfVector*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEdmtpccLcLwaveformcLcLPMTWfVectormUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<dmtpc::waveform::PMTWfVector*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEdmtpccLcLwaveformcLcLPMTWfVectormUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<dmtpc::waveform::PMTWfVector*> : new vector<dmtpc::waveform::PMTWfVector*>;
   }
   static void *newArray_vectorlEdmtpccLcLwaveformcLcLPMTWfVectormUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<dmtpc::waveform::PMTWfVector*>[nElements] : new vector<dmtpc::waveform::PMTWfVector*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEdmtpccLcLwaveformcLcLPMTWfVectormUgR(void *p) {
      delete ((vector<dmtpc::waveform::PMTWfVector*>*)p);
   }
   static void deleteArray_vectorlEdmtpccLcLwaveformcLcLPMTWfVectormUgR(void *p) {
      delete [] ((vector<dmtpc::waveform::PMTWfVector*>*)p);
   }
   static void destruct_vectorlEdmtpccLcLwaveformcLcLPMTWfVectormUgR(void *p) {
      typedef vector<dmtpc::waveform::PMTWfVector*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<dmtpc::waveform::PMTWfVector*>

namespace ROOTDict {
   void vectorlEdmtpccLcLwaveformcLcLWaveformVectormUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEdmtpccLcLwaveformcLcLWaveformVectormUgR_Dictionary();
   static void *new_vectorlEdmtpccLcLwaveformcLcLWaveformVectormUgR(void *p = 0);
   static void *newArray_vectorlEdmtpccLcLwaveformcLcLWaveformVectormUgR(Long_t size, void *p);
   static void delete_vectorlEdmtpccLcLwaveformcLcLWaveformVectormUgR(void *p);
   static void deleteArray_vectorlEdmtpccLcLwaveformcLcLWaveformVectormUgR(void *p);
   static void destruct_vectorlEdmtpccLcLwaveformcLcLWaveformVectormUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<dmtpc::waveform::WaveformVector*>*)
   {
      vector<dmtpc::waveform::WaveformVector*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<dmtpc::waveform::WaveformVector*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<dmtpc::waveform::WaveformVector*>", -2, "prec_stl/vector", 49,
                  typeid(vector<dmtpc::waveform::WaveformVector*>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEdmtpccLcLwaveformcLcLWaveformVectormUgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<dmtpc::waveform::WaveformVector*>) );
      instance.SetNew(&new_vectorlEdmtpccLcLwaveformcLcLWaveformVectormUgR);
      instance.SetNewArray(&newArray_vectorlEdmtpccLcLwaveformcLcLWaveformVectormUgR);
      instance.SetDelete(&delete_vectorlEdmtpccLcLwaveformcLcLWaveformVectormUgR);
      instance.SetDeleteArray(&deleteArray_vectorlEdmtpccLcLwaveformcLcLWaveformVectormUgR);
      instance.SetDestructor(&destruct_vectorlEdmtpccLcLwaveformcLcLWaveformVectormUgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<dmtpc::waveform::WaveformVector*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<dmtpc::waveform::WaveformVector*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEdmtpccLcLwaveformcLcLWaveformVectormUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<dmtpc::waveform::WaveformVector*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEdmtpccLcLwaveformcLcLWaveformVectormUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<dmtpc::waveform::WaveformVector*> : new vector<dmtpc::waveform::WaveformVector*>;
   }
   static void *newArray_vectorlEdmtpccLcLwaveformcLcLWaveformVectormUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<dmtpc::waveform::WaveformVector*>[nElements] : new vector<dmtpc::waveform::WaveformVector*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEdmtpccLcLwaveformcLcLWaveformVectormUgR(void *p) {
      delete ((vector<dmtpc::waveform::WaveformVector*>*)p);
   }
   static void deleteArray_vectorlEdmtpccLcLwaveformcLcLWaveformVectormUgR(void *p) {
      delete [] ((vector<dmtpc::waveform::WaveformVector*>*)p);
   }
   static void destruct_vectorlEdmtpccLcLwaveformcLcLWaveformVectormUgR(void *p) {
      typedef vector<dmtpc::waveform::WaveformVector*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<dmtpc::waveform::WaveformVector*>

namespace ROOTDict {
   void vectorlEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEdoublegR_Dictionary();
   static void *new_vectorlEdoublegR(void *p = 0);
   static void *newArray_vectorlEdoublegR(Long_t size, void *p);
   static void delete_vectorlEdoublegR(void *p);
   static void deleteArray_vectorlEdoublegR(void *p);
   static void destruct_vectorlEdoublegR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<double>*)
   {
      vector<double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<double>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<double>", -2, "vector.dll", 0,
                  typeid(vector<double>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEdoublegR_Dictionary, isa_proxy, 0,
                  sizeof(vector<double>) );
      instance.SetNew(&new_vectorlEdoublegR);
      instance.SetNewArray(&newArray_vectorlEdoublegR);
      instance.SetDelete(&delete_vectorlEdoublegR);
      instance.SetDeleteArray(&deleteArray_vectorlEdoublegR);
      instance.SetDestructor(&destruct_vectorlEdoublegR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<double> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEdoublegR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<double>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEdoublegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<double> : new vector<double>;
   }
   static void *newArray_vectorlEdoublegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<double>[nElements] : new vector<double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEdoublegR(void *p) {
      delete ((vector<double>*)p);
   }
   static void deleteArray_vectorlEdoublegR(void *p) {
      delete [] ((vector<double>*)p);
   }
   static void destruct_vectorlEdoublegR(void *p) {
      typedef vector<double> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<double>

namespace ROOTDict {
   void vectorlEintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEintgR_Dictionary();
   static void *new_vectorlEintgR(void *p = 0);
   static void *newArray_vectorlEintgR(Long_t size, void *p);
   static void delete_vectorlEintgR(void *p);
   static void deleteArray_vectorlEintgR(void *p);
   static void destruct_vectorlEintgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<int>*)
   {
      vector<int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<int>", -2, "prec_stl/vector", 49,
                  typeid(vector<int>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEintgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<int>) );
      instance.SetNew(&new_vectorlEintgR);
      instance.SetNewArray(&newArray_vectorlEintgR);
      instance.SetDelete(&delete_vectorlEintgR);
      instance.SetDeleteArray(&deleteArray_vectorlEintgR);
      instance.SetDestructor(&destruct_vectorlEintgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEintgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<int>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int> : new vector<int>;
   }
   static void *newArray_vectorlEintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int>[nElements] : new vector<int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEintgR(void *p) {
      delete ((vector<int>*)p);
   }
   static void deleteArray_vectorlEintgR(void *p) {
      delete [] ((vector<int>*)p);
   }
   static void destruct_vectorlEintgR(void *p) {
      typedef vector<int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<int>

namespace ROOTDict {
   void vectorlEunsignedsPintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEunsignedsPintgR_Dictionary();
   static void *new_vectorlEunsignedsPintgR(void *p = 0);
   static void *newArray_vectorlEunsignedsPintgR(Long_t size, void *p);
   static void delete_vectorlEunsignedsPintgR(void *p);
   static void deleteArray_vectorlEunsignedsPintgR(void *p);
   static void destruct_vectorlEunsignedsPintgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<unsigned int>*)
   {
      vector<unsigned int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<unsigned int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<unsigned int>", -2, "vector.dll", 0,
                  typeid(vector<unsigned int>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEunsignedsPintgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<unsigned int>) );
      instance.SetNew(&new_vectorlEunsignedsPintgR);
      instance.SetNewArray(&newArray_vectorlEunsignedsPintgR);
      instance.SetDelete(&delete_vectorlEunsignedsPintgR);
      instance.SetDeleteArray(&deleteArray_vectorlEunsignedsPintgR);
      instance.SetDestructor(&destruct_vectorlEunsignedsPintgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<unsigned int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<unsigned int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEunsignedsPintgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<unsigned int>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEunsignedsPintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<unsigned int> : new vector<unsigned int>;
   }
   static void *newArray_vectorlEunsignedsPintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<unsigned int>[nElements] : new vector<unsigned int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEunsignedsPintgR(void *p) {
      delete ((vector<unsigned int>*)p);
   }
   static void deleteArray_vectorlEunsignedsPintgR(void *p) {
      delete [] ((vector<unsigned int>*)p);
   }
   static void destruct_vectorlEunsignedsPintgR(void *p) {
      typedef vector<unsigned int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<unsigned int>

namespace ROOTDict {
   void vectorlEvectorlEboolgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEvectorlEboolgRsPgR_Dictionary();
   static void *new_vectorlEvectorlEboolgRsPgR(void *p = 0);
   static void *newArray_vectorlEvectorlEboolgRsPgR(Long_t size, void *p);
   static void delete_vectorlEvectorlEboolgRsPgR(void *p);
   static void deleteArray_vectorlEvectorlEboolgRsPgR(void *p);
   static void destruct_vectorlEvectorlEboolgRsPgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<vector<bool> >*)
   {
      vector<vector<bool> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<vector<bool> >),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<vector<bool> >", -2, "prec_stl/vector", 49,
                  typeid(vector<vector<bool> >), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEvectorlEboolgRsPgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<vector<bool> >) );
      instance.SetNew(&new_vectorlEvectorlEboolgRsPgR);
      instance.SetNewArray(&newArray_vectorlEvectorlEboolgRsPgR);
      instance.SetDelete(&delete_vectorlEvectorlEboolgRsPgR);
      instance.SetDeleteArray(&deleteArray_vectorlEvectorlEboolgRsPgR);
      instance.SetDestructor(&destruct_vectorlEvectorlEboolgRsPgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<vector<bool> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<vector<bool> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEvectorlEboolgRsPgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<vector<bool> >*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEvectorlEboolgRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<bool> > : new vector<vector<bool> >;
   }
   static void *newArray_vectorlEvectorlEboolgRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<bool> >[nElements] : new vector<vector<bool> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEvectorlEboolgRsPgR(void *p) {
      delete ((vector<vector<bool> >*)p);
   }
   static void deleteArray_vectorlEvectorlEboolgRsPgR(void *p) {
      delete [] ((vector<vector<bool> >*)p);
   }
   static void destruct_vectorlEvectorlEboolgRsPgR(void *p) {
      typedef vector<vector<bool> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<vector<bool> >

namespace ROOTDict {
   void vectorlEvectorlEdoublegRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEvectorlEdoublegRsPgR_Dictionary();
   static void *new_vectorlEvectorlEdoublegRsPgR(void *p = 0);
   static void *newArray_vectorlEvectorlEdoublegRsPgR(Long_t size, void *p);
   static void delete_vectorlEvectorlEdoublegRsPgR(void *p);
   static void deleteArray_vectorlEvectorlEdoublegRsPgR(void *p);
   static void destruct_vectorlEvectorlEdoublegRsPgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<vector<double> >*)
   {
      vector<vector<double> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<vector<double> >),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<vector<double> >", -2, "prec_stl/vector", 49,
                  typeid(vector<vector<double> >), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEvectorlEdoublegRsPgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<vector<double> >) );
      instance.SetNew(&new_vectorlEvectorlEdoublegRsPgR);
      instance.SetNewArray(&newArray_vectorlEvectorlEdoublegRsPgR);
      instance.SetDelete(&delete_vectorlEvectorlEdoublegRsPgR);
      instance.SetDeleteArray(&deleteArray_vectorlEvectorlEdoublegRsPgR);
      instance.SetDestructor(&destruct_vectorlEvectorlEdoublegRsPgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<vector<double> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<vector<double> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEvectorlEdoublegRsPgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<vector<double> >*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEvectorlEdoublegRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<double> > : new vector<vector<double> >;
   }
   static void *newArray_vectorlEvectorlEdoublegRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<double> >[nElements] : new vector<vector<double> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEvectorlEdoublegRsPgR(void *p) {
      delete ((vector<vector<double> >*)p);
   }
   static void deleteArray_vectorlEvectorlEdoublegRsPgR(void *p) {
      delete [] ((vector<vector<double> >*)p);
   }
   static void destruct_vectorlEvectorlEdoublegRsPgR(void *p) {
      typedef vector<vector<double> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<vector<double> >

namespace ROOTDict {
   void vectorlEvectorlEintgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEvectorlEintgRsPgR_Dictionary();
   static void *new_vectorlEvectorlEintgRsPgR(void *p = 0);
   static void *newArray_vectorlEvectorlEintgRsPgR(Long_t size, void *p);
   static void delete_vectorlEvectorlEintgRsPgR(void *p);
   static void deleteArray_vectorlEvectorlEintgRsPgR(void *p);
   static void destruct_vectorlEvectorlEintgRsPgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<vector<int> >*)
   {
      vector<vector<int> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<vector<int> >),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<vector<int> >", -2, "prec_stl/vector", 49,
                  typeid(vector<vector<int> >), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEvectorlEintgRsPgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<vector<int> >) );
      instance.SetNew(&new_vectorlEvectorlEintgRsPgR);
      instance.SetNewArray(&newArray_vectorlEvectorlEintgRsPgR);
      instance.SetDelete(&delete_vectorlEvectorlEintgRsPgR);
      instance.SetDeleteArray(&deleteArray_vectorlEvectorlEintgRsPgR);
      instance.SetDestructor(&destruct_vectorlEvectorlEintgRsPgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<vector<int> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<vector<int> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEvectorlEintgRsPgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<vector<int> >*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEvectorlEintgRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<int> > : new vector<vector<int> >;
   }
   static void *newArray_vectorlEvectorlEintgRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<int> >[nElements] : new vector<vector<int> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEvectorlEintgRsPgR(void *p) {
      delete ((vector<vector<int> >*)p);
   }
   static void deleteArray_vectorlEvectorlEintgRsPgR(void *p) {
      delete [] ((vector<vector<int> >*)p);
   }
   static void destruct_vectorlEvectorlEintgRsPgR(void *p) {
      typedef vector<vector<int> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<vector<int> >

namespace ROOTDict {
   void vectorlEvectorlEvectorlEdoublegRsPgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEvectorlEvectorlEdoublegRsPgRsPgR_Dictionary();
   static void *new_vectorlEvectorlEvectorlEdoublegRsPgRsPgR(void *p = 0);
   static void *newArray_vectorlEvectorlEvectorlEdoublegRsPgRsPgR(Long_t size, void *p);
   static void delete_vectorlEvectorlEvectorlEdoublegRsPgRsPgR(void *p);
   static void deleteArray_vectorlEvectorlEvectorlEdoublegRsPgRsPgR(void *p);
   static void destruct_vectorlEvectorlEvectorlEdoublegRsPgRsPgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<vector<vector<double> > >*)
   {
      vector<vector<vector<double> > > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<vector<vector<double> > >),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<vector<vector<double> > >", -2, "prec_stl/vector", 49,
                  typeid(vector<vector<vector<double> > >), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEvectorlEvectorlEdoublegRsPgRsPgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<vector<vector<double> > >) );
      instance.SetNew(&new_vectorlEvectorlEvectorlEdoublegRsPgRsPgR);
      instance.SetNewArray(&newArray_vectorlEvectorlEvectorlEdoublegRsPgRsPgR);
      instance.SetDelete(&delete_vectorlEvectorlEvectorlEdoublegRsPgRsPgR);
      instance.SetDeleteArray(&deleteArray_vectorlEvectorlEvectorlEdoublegRsPgRsPgR);
      instance.SetDestructor(&destruct_vectorlEvectorlEvectorlEdoublegRsPgRsPgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<vector<vector<double> > > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<vector<vector<double> > >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEvectorlEvectorlEdoublegRsPgRsPgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<vector<vector<double> > >*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEvectorlEvectorlEdoublegRsPgRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<vector<double> > > : new vector<vector<vector<double> > >;
   }
   static void *newArray_vectorlEvectorlEvectorlEdoublegRsPgRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<vector<double> > >[nElements] : new vector<vector<vector<double> > >[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEvectorlEvectorlEdoublegRsPgRsPgR(void *p) {
      delete ((vector<vector<vector<double> > >*)p);
   }
   static void deleteArray_vectorlEvectorlEvectorlEdoublegRsPgRsPgR(void *p) {
      delete [] ((vector<vector<vector<double> > >*)p);
   }
   static void destruct_vectorlEvectorlEvectorlEdoublegRsPgRsPgR(void *p) {
      typedef vector<vector<vector<double> > > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<vector<vector<double> > >

/********************************************************
* build/DmtpcAnalysisCint.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableDmtpcAnalysisCint();

extern "C" void G__set_cpp_environmentDmtpcAnalysisCint() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("include/AnalysisConfig.hh");
  G__add_compiledheader("include/CleanSkimConfig.hh");
  G__add_compiledheader("include/CleanSkimFunctions.hh");
  G__add_compiledheader("include/ClusterAlgo.hh");
  G__add_compiledheader("include/ClusterFinding.hh");
  G__add_compiledheader("include/ClusterImage.hh");
  G__add_compiledheader("include/Cut.hh");
  G__add_compiledheader("include/CutProcessor.hh");
  G__add_compiledheader("include/GainMap.hh");
  G__add_compiledheader("include/GainTree.hh");
  G__add_compiledheader("include/HVLog.hh");
  G__add_compiledheader("include/MCTPCDataset.hh");
  G__add_compiledheader("include/MCTruthAlgo.hh");
  G__add_compiledheader("include/MCTruth.hh");
  G__add_compiledheader("include/Playlist.hh");
  G__add_compiledheader("include/RecoDataset.hh");
  G__add_compiledheader("include/RecoEvent.hh");
  G__add_compiledheader("include/SkimDataset.hh");
  G__add_compiledheader("include/SkimEvent.hh");
  G__add_compiledheader("include/Stitcher.hh");
  G__add_compiledheader("include/TrackFitter.hh");
  G__cpp_reset_tagtableDmtpcAnalysisCint();
}
#include <new>
extern "C" int G__cpp_dllrevDmtpcAnalysisCint() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* dmtpc */

/* dmtpc::analysis */
static int G__DmtpcAnalysisCint_182_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) dmtpc::analysis::decodeBurninTrack((dmtpc::analysis::BurninEncoded_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_182_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) dmtpc::analysis::decodeBurninEvent((dmtpc::analysis::BurninEncoded_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_182_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) dmtpc::analysis::encodeBurnin((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_182_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) dmtpc::analysis::decodeSparkRefX((dmtpc::analysis::SparkRefEncoded_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_182_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) dmtpc::analysis::decodeSparkRefY((dmtpc::analysis::SparkRefEncoded_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_182_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) dmtpc::analysis::encodeSparkRef((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_182_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) dmtpc::analysis::getTime(*(dmtpc::waveform::CspWaveform*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_182_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) dmtpc::analysis::getTime(*(dmtpc::waveform::CspPulse*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_182_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) dmtpc::analysis::getTimeDiff(*(dmtpc::waveform::CspPulse*) libp->para[0].ref, *(dmtpc::waveform::CspPulse*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_182_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) dmtpc::analysis::getTimeDiff(*(dmtpc::waveform::CspWaveform*) libp->para[0].ref, *(dmtpc::waveform::CspWaveform*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}


/* dmtpc::analysis::AnalysisConfig */
static int G__DmtpcAnalysisCint_183_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   dmtpc::analysis::AnalysisConfig* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new dmtpc::analysis::AnalysisConfig((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) dmtpc::analysis::AnalysisConfig((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new dmtpc::analysis::AnalysisConfig[n];
       } else {
         p = new((void*) gvp) dmtpc::analysis::AnalysisConfig[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new dmtpc::analysis::AnalysisConfig;
       } else {
         p = new((void*) gvp) dmtpc::analysis::AnalysisConfig;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLAnalysisConfig));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DmtpcAnalysisCint_183_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   dmtpc::analysis::AnalysisConfig* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new dmtpc::analysis::AnalysisConfig(*(dmtpc::analysis::AnalysisConfig*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLAnalysisConfig));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef dmtpc::analysis::AnalysisConfig G__TdmtpccLcLanalysiscLcLAnalysisConfig;
static int G__DmtpcAnalysisCint_183_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (dmtpc::analysis::AnalysisConfig*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((dmtpc::analysis::AnalysisConfig*) (soff+(sizeof(dmtpc::analysis::AnalysisConfig)*i)))->~G__TdmtpccLcLanalysiscLcLAnalysisConfig();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (dmtpc::analysis::AnalysisConfig*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((dmtpc::analysis::AnalysisConfig*) (soff))->~G__TdmtpccLcLanalysiscLcLAnalysisConfig();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DmtpcAnalysisCint_183_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   dmtpc::analysis::AnalysisConfig* dest = (dmtpc::analysis::AnalysisConfig*) G__getstructoffset();
   *dest = *(dmtpc::analysis::AnalysisConfig*) libp->para[0].ref;
   const dmtpc::analysis::AnalysisConfig& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* dmtpc::analysis::cleanskim */

/* dmtpc::analysis::cleanskim::Config */
static int G__DmtpcAnalysisCint_189_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   dmtpc::analysis::cleanskim::Config* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new dmtpc::analysis::cleanskim::Config[n];
     } else {
       p = new((void*) gvp) dmtpc::analysis::cleanskim::Config[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new dmtpc::analysis::cleanskim::Config;
     } else {
       p = new((void*) gvp) dmtpc::analysis::cleanskim::Config;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLcleanskimcLcLConfig));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_189_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   dmtpc::analysis::cleanskim::Config* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new dmtpc::analysis::cleanskim::Config((const char*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) dmtpc::analysis::cleanskim::Config((const char*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLcleanskimcLcLConfig));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DmtpcAnalysisCint_189_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   dmtpc::analysis::cleanskim::Config* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new dmtpc::analysis::cleanskim::Config(*(dmtpc::analysis::cleanskim::Config*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLcleanskimcLcLConfig));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef dmtpc::analysis::cleanskim::Config G__TdmtpccLcLanalysiscLcLcleanskimcLcLConfig;
static int G__DmtpcAnalysisCint_189_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (dmtpc::analysis::cleanskim::Config*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((dmtpc::analysis::cleanskim::Config*) (soff+(sizeof(dmtpc::analysis::cleanskim::Config)*i)))->~G__TdmtpccLcLanalysiscLcLcleanskimcLcLConfig();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (dmtpc::analysis::cleanskim::Config*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((dmtpc::analysis::cleanskim::Config*) (soff))->~G__TdmtpccLcLanalysiscLcLcleanskimcLcLConfig();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DmtpcAnalysisCint_189_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   dmtpc::analysis::cleanskim::Config* dest = (dmtpc::analysis::cleanskim::Config*) G__getstructoffset();
   *dest = *(dmtpc::analysis::cleanskim::Config*) libp->para[0].ref;
   const dmtpc::analysis::cleanskim::Config& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* dmtpc::analysis::Cluster */
static int G__DmtpcAnalysisCint_240_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) dmtpc::analysis::Cluster::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_240_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) dmtpc::analysis::Cluster::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_240_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) dmtpc::analysis::Cluster::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_240_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      dmtpc::analysis::Cluster::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_240_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::Cluster*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_240_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) dmtpc::analysis::Cluster::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_240_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) dmtpc::analysis::Cluster::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_240_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) dmtpc::analysis::Cluster::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_240_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) dmtpc::analysis::Cluster::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__DmtpcAnalysisCint_240_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   dmtpc::analysis::Cluster *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new dmtpc::analysis::Cluster[n];
     } else {
       p = new((void*) gvp) dmtpc::analysis::Cluster[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new dmtpc::analysis::Cluster;
     } else {
       p = new((void*) gvp) dmtpc::analysis::Cluster;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLCluster));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DmtpcAnalysisCint_240_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   dmtpc::analysis::Cluster* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new dmtpc::analysis::Cluster(*(dmtpc::analysis::Cluster*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLCluster));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef dmtpc::analysis::Cluster G__TdmtpccLcLanalysiscLcLCluster;
static int G__DmtpcAnalysisCint_240_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (dmtpc::analysis::Cluster*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((dmtpc::analysis::Cluster*) (soff+(sizeof(dmtpc::analysis::Cluster)*i)))->~G__TdmtpccLcLanalysiscLcLCluster();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (dmtpc::analysis::Cluster*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((dmtpc::analysis::Cluster*) (soff))->~G__TdmtpccLcLanalysiscLcLCluster();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* dmtpc::analysis::ClusterImage */
static int G__DmtpcAnalysisCint_241_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   dmtpc::analysis::ClusterImage* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new dmtpc::analysis::ClusterImage[n];
     } else {
       p = new((void*) gvp) dmtpc::analysis::ClusterImage[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new dmtpc::analysis::ClusterImage;
     } else {
       p = new((void*) gvp) dmtpc::analysis::ClusterImage;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLClusterImage));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_241_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   dmtpc::analysis::ClusterImage* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new dmtpc::analysis::ClusterImage((TH2*) G__int(libp->para[0]), (TTimeStamp*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) dmtpc::analysis::ClusterImage((TH2*) G__int(libp->para[0]), (TTimeStamp*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLClusterImage));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_241_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::ClusterImage*) G__getstructoffset())->addCluster((dmtpc::analysis::Cluster*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_241_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::ClusterImage*) G__getstructoffset())->replaceCluster((int) G__int(libp->para[0]), (dmtpc::analysis::Cluster*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_241_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((dmtpc::analysis::ClusterImage*) G__getstructoffset())->roundValues((bool) G__int(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((dmtpc::analysis::ClusterImage*) G__getstructoffset())->roundValues((bool) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((dmtpc::analysis::ClusterImage*) G__getstructoffset())->roundValues();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_241_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::ClusterImage*) G__getstructoffset())->changeHistType((char) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_241_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const dmtpc::analysis::ClusterImage*) G__getstructoffset())->getRMS());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_241_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const dmtpc::analysis::ClusterImage*) G__getstructoffset())->getNCluster());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_241_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const dmtpc::analysis::ClusterImage*) G__getstructoffset())->getCluster((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_241_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const dmtpc::analysis::ClusterImage*) G__getstructoffset())->operator[]((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_241_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const dmtpc::analysis::ClusterImage*) G__getstructoffset())->getImage());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_241_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) dmtpc::analysis::ClusterImage::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_241_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) dmtpc::analysis::ClusterImage::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_241_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) dmtpc::analysis::ClusterImage::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_241_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      dmtpc::analysis::ClusterImage::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_241_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::ClusterImage*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_241_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) dmtpc::analysis::ClusterImage::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_241_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) dmtpc::analysis::ClusterImage::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_241_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) dmtpc::analysis::ClusterImage::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_241_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) dmtpc::analysis::ClusterImage::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DmtpcAnalysisCint_241_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   dmtpc::analysis::ClusterImage* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new dmtpc::analysis::ClusterImage(*(dmtpc::analysis::ClusterImage*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLClusterImage));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef dmtpc::analysis::ClusterImage G__TdmtpccLcLanalysiscLcLClusterImage;
static int G__DmtpcAnalysisCint_241_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (dmtpc::analysis::ClusterImage*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((dmtpc::analysis::ClusterImage*) (soff+(sizeof(dmtpc::analysis::ClusterImage)*i)))->~G__TdmtpccLcLanalysiscLcLClusterImage();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (dmtpc::analysis::ClusterImage*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((dmtpc::analysis::ClusterImage*) (soff))->~G__TdmtpccLcLanalysiscLcLClusterImage();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DmtpcAnalysisCint_241_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   dmtpc::analysis::ClusterImage* dest = (dmtpc::analysis::ClusterImage*) G__getstructoffset();
   *dest = *(dmtpc::analysis::ClusterImage*) libp->para[0].ref;
   const dmtpc::analysis::ClusterImage& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* dmtpc::analysis::SkimDataset */
static int G__DmtpcAnalysisCint_312_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   dmtpc::analysis::SkimDataset* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new dmtpc::analysis::SkimDataset[n];
     } else {
       p = new((void*) gvp) dmtpc::analysis::SkimDataset[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new dmtpc::analysis::SkimDataset;
     } else {
       p = new((void*) gvp) dmtpc::analysis::SkimDataset;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLSkimDataset));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_312_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   dmtpc::analysis::SkimDataset* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new dmtpc::analysis::SkimDataset(*(dmtpc::analysis::SkimDataset*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) dmtpc::analysis::SkimDataset(*(dmtpc::analysis::SkimDataset*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLSkimDataset));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_312_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) ((dmtpc::analysis::SkimDataset*) G__getstructoffset())->tree((const char*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((dmtpc::analysis::SkimDataset*) G__getstructoffset())->tree());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_312_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) ((dmtpc::analysis::SkimDataset*) G__getstructoffset())->chain((const char*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((dmtpc::analysis::SkimDataset*) G__getstructoffset())->chain());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_312_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((dmtpc::analysis::SkimDataset*) G__getstructoffset())->file());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_312_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::SkimDataset*) G__getstructoffset())->createRootFile((const char*) G__int(libp->para[0]), *((TString*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_312_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::SkimDataset*) G__getstructoffset())->openRootFile((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_312_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::SkimDataset*) G__getstructoffset())->closeRootFile();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_312_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::SkimDataset*) G__getstructoffset())->newRootFile((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_312_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((dmtpc::analysis::SkimDataset*) G__getstructoffset())->getFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_312_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) ((dmtpc::analysis::SkimDataset*) G__getstructoffset())->event((const char*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((dmtpc::analysis::SkimDataset*) G__getstructoffset())->event());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_312_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const dmtpc::analysis::SkimDataset*) G__getstructoffset())->getTreeIndices());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_312_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((dmtpc::analysis::SkimDataset*) G__getstructoffset())->orig_event());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_312_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::SkimDataset*) G__getstructoffset())->getEvent((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_312_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 105, (long) ((dmtpc::analysis::SkimDataset*) G__getstructoffset())->getEventNumber((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((dmtpc::analysis::SkimDataset*) G__getstructoffset())->getEventNumber((int) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_312_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((dmtpc::analysis::SkimDataset*) G__getstructoffset())->nevents());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_312_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((dmtpc::analysis::SkimDataset*) G__getstructoffset())->loadBiasFrames((bool) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((dmtpc::analysis::SkimDataset*) G__getstructoffset())->loadBiasFrames((bool) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_312_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const dmtpc::analysis::SkimDataset*) G__getstructoffset())->getBiasFrames());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_312_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((dmtpc::analysis::SkimDataset*) G__getstructoffset())->getBiasFrame((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_312_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((dmtpc::analysis::SkimDataset*) G__getstructoffset())->getGainMap((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_312_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((dmtpc::analysis::SkimDataset*) G__getstructoffset())->getGainMap((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_312_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((dmtpc::analysis::SkimDataset*) G__getstructoffset())->getGainMaps());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_312_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::SkimDataset*) G__getstructoffset())->addGainMap((dmtpc::analysis::GainMap*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_312_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::SkimDataset*) G__getstructoffset())->writeGainMaps();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_312_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::SkimDataset*) G__getstructoffset())->mergeTempTrees((TTree*) G__int(libp->para[0]), (list<vector<vector<vector<dmtpc::analysis::BurninEncoded_t> > >*>*) G__int(libp->para[1])
, (list<vector<pair<int,int> >*>*) G__int(libp->para[2]), (int) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_312_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((dmtpc::analysis::SkimDataset*) G__getstructoffset())->loadEvent((bool) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((dmtpc::analysis::SkimDataset*) G__getstructoffset())->loadEvent((bool) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((dmtpc::analysis::SkimDataset*) G__getstructoffset())->loadEvent();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_312_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::SkimDataset*) G__getstructoffset())->setConfig((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_312_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::SkimDataset*) G__getstructoffset())->writeConfig();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_312_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((dmtpc::analysis::SkimDataset*) G__getstructoffset())->getConfig());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_312_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::SkimDataset*) G__getstructoffset())->writeStitch((dmtpc::analysis::Stitcher*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_312_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((dmtpc::analysis::SkimDataset*) G__getstructoffset())->getStitch());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_312_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::SkimDataset*) G__getstructoffset())->loadClusters((bool) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef dmtpc::analysis::SkimDataset G__TdmtpccLcLanalysiscLcLSkimDataset;
static int G__DmtpcAnalysisCint_312_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (dmtpc::analysis::SkimDataset*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((dmtpc::analysis::SkimDataset*) (soff+(sizeof(dmtpc::analysis::SkimDataset)*i)))->~G__TdmtpccLcLanalysiscLcLSkimDataset();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (dmtpc::analysis::SkimDataset*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((dmtpc::analysis::SkimDataset*) (soff))->~G__TdmtpccLcLanalysiscLcLSkimDataset();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DmtpcAnalysisCint_312_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   dmtpc::analysis::SkimDataset* dest = (dmtpc::analysis::SkimDataset*) G__getstructoffset();
   *dest = *(dmtpc::analysis::SkimDataset*) libp->para[0].ref;
   const dmtpc::analysis::SkimDataset& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* dmtpc::analysis::GainMap */
static int G__DmtpcAnalysisCint_313_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   dmtpc::analysis::GainMap* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new dmtpc::analysis::GainMap[n];
     } else {
       p = new((void*) gvp) dmtpc::analysis::GainMap[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new dmtpc::analysis::GainMap;
     } else {
       p = new((void*) gvp) dmtpc::analysis::GainMap;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLGainMap));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_313_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   dmtpc::analysis::GainMap* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new dmtpc::analysis::GainMap(*((TString*) G__int(libp->para[0])));
   } else {
     p = new((void*) gvp) dmtpc::analysis::GainMap(*((TString*) G__int(libp->para[0])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLGainMap));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_313_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::GainMap*) G__getstructoffset())->drawWithSpacers();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_313_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::GainMap*) G__getstructoffset())->setGainMap((TH2F*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_313_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const dmtpc::analysis::GainMap*) G__getstructoffset())->getGainMap());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_313_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((dmtpc::analysis::GainMap*) G__getstructoffset())->getGainMap());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_313_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::GainMap*) G__getstructoffset())->addSpacer((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_313_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::GainMap*) G__getstructoffset())->addSpacer((TVector3*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_313_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const dmtpc::analysis::GainMap*) G__getstructoffset())->getSpacer((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_313_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const dmtpc::analysis::GainMap*) G__getstructoffset())->getSpacerSlope((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_313_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const dmtpc::analysis::GainMap*) G__getstructoffset())->getSpacerIntercept((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_313_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const dmtpc::analysis::GainMap*) G__getstructoffset())->getSpacerWidth((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_313_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const dmtpc::analysis::GainMap*) G__getstructoffset())->getNSpacers());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_313_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 105, (long) ((const dmtpc::analysis::GainMap*) G__getstructoffset())->nCrossingSpacers((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (vector<int>*) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 105, (long) ((const dmtpc::analysis::GainMap*) G__getstructoffset())->nCrossingSpacers((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_313_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const dmtpc::analysis::GainMap*) G__getstructoffset())->crossesSpacer((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_313_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const dmtpc::analysis::GainMap*) G__getstructoffset())->distanceToSpacer((int) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_313_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const dmtpc::analysis::GainMap*) G__getstructoffset())->distanceToNearestSpacer((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, *(int*) G__Intref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_313_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<double>* pobj;
         const vector<double> xobj = ((const dmtpc::analysis::GainMap*) G__getstructoffset())->distanceToSpacers((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
         pobj = new vector<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_313_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const dmtpc::analysis::GainMap*) G__getstructoffset())->writeOverlay((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_313_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const dmtpc::analysis::GainMap*) G__getstructoffset())->getErrorEstimate());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_313_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::GainMap*) G__getstructoffset())->randomize();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_313_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) dmtpc::analysis::GainMap::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_313_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) dmtpc::analysis::GainMap::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_313_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) dmtpc::analysis::GainMap::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_313_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      dmtpc::analysis::GainMap::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_313_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::GainMap*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_313_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) dmtpc::analysis::GainMap::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_313_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) dmtpc::analysis::GainMap::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_313_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) dmtpc::analysis::GainMap::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_313_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) dmtpc::analysis::GainMap::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DmtpcAnalysisCint_313_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   dmtpc::analysis::GainMap* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new dmtpc::analysis::GainMap(*(dmtpc::analysis::GainMap*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLGainMap));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef dmtpc::analysis::GainMap G__TdmtpccLcLanalysiscLcLGainMap;
static int G__DmtpcAnalysisCint_313_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (dmtpc::analysis::GainMap*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((dmtpc::analysis::GainMap*) (soff+(sizeof(dmtpc::analysis::GainMap)*i)))->~G__TdmtpccLcLanalysiscLcLGainMap();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (dmtpc::analysis::GainMap*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((dmtpc::analysis::GainMap*) (soff))->~G__TdmtpccLcLanalysiscLcLGainMap();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DmtpcAnalysisCint_313_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   dmtpc::analysis::GainMap* dest = (dmtpc::analysis::GainMap*) G__getstructoffset();
   *dest = *(dmtpc::analysis::GainMap*) libp->para[0].ref;
   const dmtpc::analysis::GainMap& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* dmtpc::analysis::Stitcher */
static int G__DmtpcAnalysisCint_314_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   dmtpc::analysis::Stitcher* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new dmtpc::analysis::Stitcher((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) dmtpc::analysis::Stitcher((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new dmtpc::analysis::Stitcher[n];
       } else {
         p = new((void*) gvp) dmtpc::analysis::Stitcher[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new dmtpc::analysis::Stitcher;
       } else {
         p = new((void*) gvp) dmtpc::analysis::Stitcher;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLStitcher));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_314_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const dmtpc::analysis::Stitcher*) G__getstructoffset())->isInit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_314_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 103, (long) ((dmtpc::analysis::Stitcher*) G__getstructoffset())->train((vector<const TH2*>*) G__int(libp->para[0]), (TString*) G__int(libp->para[1])
, (TString*) G__int(libp->para[2]), (bool) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((dmtpc::analysis::Stitcher*) G__getstructoffset())->train((vector<const TH2*>*) G__int(libp->para[0]), (TString*) G__int(libp->para[1])
, (TString*) G__int(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_314_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((dmtpc::analysis::Stitcher*) G__getstructoffset())->setupMCViper(
(int) G__int(libp->para[0]), (char**) G__int(libp->para[1])
, (double*) G__int(libp->para[2]), (double*) G__int(libp->para[3])
, (double*) G__int(libp->para[4]), (double*) G__int(libp->para[5])
, (double*) G__int(libp->para[6]), (double*) G__int(libp->para[7])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_314_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((const dmtpc::analysis::Stitcher*) G__getstructoffset())->stitch((vector<const TH2*>*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((const dmtpc::analysis::Stitcher*) G__getstructoffset())->stitch((vector<const TH2*>*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_314_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const dmtpc::analysis::Stitcher*) G__getstructoffset())->xCenter((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_314_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const dmtpc::analysis::Stitcher*) G__getstructoffset())->yCenter((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_314_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const dmtpc::analysis::Stitcher*) G__getstructoffset())->innerRadius((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_314_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const dmtpc::analysis::Stitcher*) G__getstructoffset())->outerRadius((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_314_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const dmtpc::analysis::Stitcher*) G__getstructoffset())->getNSpacers((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_314_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const dmtpc::analysis::Stitcher*) G__getstructoffset())->getSpacerTheta((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_314_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const dmtpc::analysis::Stitcher*) G__getstructoffset())->getSpacerR((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_314_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const dmtpc::analysis::Stitcher*) G__getstructoffset())->getSpacerSlope((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_314_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const dmtpc::analysis::Stitcher*) G__getstructoffset())->getSpacerIntercept((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_314_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::Stitcher*) G__getstructoffset())->setWeights((double*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_314_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::Stitcher*) G__getstructoffset())->setLensCorrection((dmtpc::image::LensCorrection*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_314_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::Stitcher*) G__getstructoffset())->setBlurLevel((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_314_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::Stitcher*) G__getstructoffset())->setEdgeLowThreshold((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_314_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::Stitcher*) G__getstructoffset())->setEdgeHighThreshold((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_314_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::Stitcher*) G__getstructoffset())->setMinEdgeNeighbors((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_314_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::Stitcher*) G__getstructoffset())->setLinearHoughRbins((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_314_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::Stitcher*) G__getstructoffset())->setLinearHoughThetabins((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_314_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::Stitcher*) G__getstructoffset())->setLinearHoughMinVotes((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_314_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::Stitcher*) G__getstructoffset())->setSpacerJoinThresholds((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_314_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::Stitcher*) G__getstructoffset())->setCircularHoughFirstPassNbins((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_314_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::Stitcher*) G__getstructoffset())->setCircularHoughSecondPassNbins((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_314_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::Stitcher*) G__getstructoffset())->setCircularHoughMins((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_314_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::Stitcher*) G__getstructoffset())->setCircularHoughMaxs((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_314_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::Stitcher*) G__getstructoffset())->setNWidthsSecondPass((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_314_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::Stitcher*) G__getstructoffset())->setNSpectrPeaksR((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_314_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::Stitcher*) G__getstructoffset())->setMedianNbins((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_314_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::Stitcher*) G__getstructoffset())->setMedianNIter((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_314_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::Stitcher*) G__getstructoffset())->setCCDWithLED((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_314_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::Stitcher*) G__getstructoffset())->setLEDBorderWidth((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_314_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::Stitcher*) G__getstructoffset())->setLEDThresh((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_314_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::Stitcher*) G__getstructoffset())->setImageHighThresh((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_314_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((dmtpc::analysis::Stitcher*) G__getstructoffset())->setScales((double*) G__int(libp->para[0]), (bool) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((dmtpc::analysis::Stitcher*) G__getstructoffset())->setScales((double*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_314_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((dmtpc::analysis::Stitcher*) G__getstructoffset())->setRotations((double*) G__int(libp->para[0]), (bool) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((dmtpc::analysis::Stitcher*) G__getstructoffset())->setRotations((double*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_314_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((dmtpc::analysis::Stitcher*) G__getstructoffset())->setCenters((double*) G__int(libp->para[0]), (double*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((dmtpc::analysis::Stitcher*) G__getstructoffset())->setCenters((double*) G__int(libp->para[0]), (double*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_314_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const dmtpc::analysis::Stitcher*) G__getstructoffset())->getScale((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_314_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const dmtpc::analysis::Stitcher*) G__getstructoffset())->getRotation((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_314_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const dmtpc::analysis::Stitcher*) G__getstructoffset())->getIndex((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_314_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((dmtpc::analysis::Stitcher*) G__getstructoffset())->getSerial((unsigned int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_314_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const dmtpc::analysis::Stitcher*) G__getstructoffset())->getStitchInfo256());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_314_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const dmtpc::analysis::Stitcher*) G__getstructoffset())->getStitchInfo512());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_314_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const dmtpc::analysis::Stitcher*) G__getstructoffset())->getStitchInfo1024());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_314_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const dmtpc::analysis::Stitcher*) G__getstructoffset())->getStitchInfo((unsigned int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_314_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((dmtpc::analysis::Stitcher*) G__getstructoffset())->writeOverlayFile((const char*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((dmtpc::analysis::Stitcher*) G__getstructoffset())->writeOverlayFile((const char*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_314_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((dmtpc::analysis::Stitcher*) G__getstructoffset())->polar((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_314_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((dmtpc::analysis::Stitcher*) G__getstructoffset())->rproj((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_314_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((dmtpc::analysis::Stitcher*) G__getstructoffset())->median((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_314_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((dmtpc::analysis::Stitcher*) G__getstructoffset())->original((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_314_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((dmtpc::analysis::Stitcher*) G__getstructoffset())->edge((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_314_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::Stitcher*) G__getstructoffset())->setScaleMethod((dmtpc::analysis::Stitcher::SCALE_METHOD) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_314_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::Stitcher*) G__getstructoffset())->calculateAuxHistograms((int) G__int(libp->para[0]), (vector<const TH2*>*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_314_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) dmtpc::analysis::Stitcher::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_314_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) dmtpc::analysis::Stitcher::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_314_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) dmtpc::analysis::Stitcher::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_314_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      dmtpc::analysis::Stitcher::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_314_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::Stitcher*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_314_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) dmtpc::analysis::Stitcher::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_314_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) dmtpc::analysis::Stitcher::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_314_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) dmtpc::analysis::Stitcher::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_314_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) dmtpc::analysis::Stitcher::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DmtpcAnalysisCint_314_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   dmtpc::analysis::Stitcher* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new dmtpc::analysis::Stitcher(*(dmtpc::analysis::Stitcher*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLStitcher));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef dmtpc::analysis::Stitcher G__TdmtpccLcLanalysiscLcLStitcher;
static int G__DmtpcAnalysisCint_314_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (dmtpc::analysis::Stitcher*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((dmtpc::analysis::Stitcher*) (soff+(sizeof(dmtpc::analysis::Stitcher)*i)))->~G__TdmtpccLcLanalysiscLcLStitcher();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (dmtpc::analysis::Stitcher*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((dmtpc::analysis::Stitcher*) (soff))->~G__TdmtpccLcLanalysiscLcLStitcher();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DmtpcAnalysisCint_314_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   dmtpc::analysis::Stitcher* dest = (dmtpc::analysis::Stitcher*) G__getstructoffset();
   *dest = *(dmtpc::analysis::Stitcher*) libp->para[0].ref;
   const dmtpc::analysis::Stitcher& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* dmtpc::analysis::SkimEvent */
static int G__DmtpcAnalysisCint_316_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   dmtpc::analysis::SkimEvent* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new dmtpc::analysis::SkimEvent[n];
     } else {
       p = new((void*) gvp) dmtpc::analysis::SkimEvent[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new dmtpc::analysis::SkimEvent;
     } else {
       p = new((void*) gvp) dmtpc::analysis::SkimEvent;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLSkimEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   dmtpc::analysis::SkimEvent* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new dmtpc::analysis::SkimEvent(*(dmtpc::analysis::SkimEvent*) libp->para[0].ref, (bool) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) dmtpc::analysis::SkimEvent(*(dmtpc::analysis::SkimEvent*) libp->para[0].ref, (bool) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new dmtpc::analysis::SkimEvent(*(dmtpc::analysis::SkimEvent*) libp->para[0].ref);
     } else {
       p = new((void*) gvp) dmtpc::analysis::SkimEvent(*(dmtpc::analysis::SkimEvent*) libp->para[0].ref);
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLSkimEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const dmtpc::analysis::SkimEvent*) G__getstructoffset())->clusters());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const dmtpc::analysis::SkimEvent*) G__getstructoffset())->cluster((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const dmtpc::analysis::SkimEvent*) G__getstructoffset())->eventNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const dmtpc::analysis::SkimEvent*) G__getstructoffset())->runNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const dmtpc::analysis::SkimEvent*) G__getstructoffset())->ncamera());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const dmtpc::analysis::SkimEvent*) G__getstructoffset())->cameraSerialNumber((int) G__int(libp->para[0]));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((dmtpc::analysis::SkimEvent*) G__getstructoffset())->findSerialNumber(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const dmtpc::analysis::SkimEvent*) G__getstructoffset())->theta((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const dmtpc::analysis::SkimEvent*) G__getstructoffset())->phi((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const dmtpc::analysis::SkimEvent*) G__getstructoffset())->E((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const dmtpc::analysis::SkimEvent*) G__getstructoffset())->EGainMap((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const dmtpc::analysis::SkimEvent*) G__getstructoffset())->range((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const dmtpc::analysis::SkimEvent*) G__getstructoffset())->diffusedRange((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const dmtpc::analysis::SkimEvent*) G__getstructoffset())->majorAxis((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const dmtpc::analysis::SkimEvent*) G__getstructoffset())->minorAxis((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const dmtpc::analysis::SkimEvent*) G__getstructoffset())->x((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const dmtpc::analysis::SkimEvent*) G__getstructoffset())->y((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const dmtpc::analysis::SkimEvent*) G__getstructoffset())->r((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const dmtpc::analysis::SkimEvent*) G__getstructoffset())->inactive((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const dmtpc::analysis::SkimEvent*) G__getstructoffset())->crossing((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const dmtpc::analysis::SkimEvent*) G__getstructoffset())->skewness((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const dmtpc::analysis::SkimEvent*) G__getstructoffset())->edge((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const dmtpc::analysis::SkimEvent*) G__getstructoffset())->ntracks((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) ((const dmtpc::analysis::SkimEvent*) G__getstructoffset())->spark((int) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((const dmtpc::analysis::SkimEvent*) G__getstructoffset())->spark());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 105, (long) ((const dmtpc::analysis::SkimEvent*) G__getstructoffset())->lastspark((int) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((const dmtpc::analysis::SkimEvent*) G__getstructoffset())->lastspark());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 100, (double) ((const dmtpc::analysis::SkimEvent*) G__getstructoffset())->integral((int) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 100, (double) ((const dmtpc::analysis::SkimEvent*) G__getstructoffset())->integral());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const dmtpc::analysis::SkimEvent*) G__getstructoffset())->cluster_rms((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const dmtpc::analysis::SkimEvent*) G__getstructoffset())->cluster_mean((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const dmtpc::analysis::SkimEvent*) G__getstructoffset())->neighbors((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const dmtpc::analysis::SkimEvent*) G__getstructoffset())->npixel((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const dmtpc::analysis::SkimEvent*) G__getstructoffset())->maxpixel((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const dmtpc::analysis::SkimEvent*) G__getstructoffset())->cygnus_angle((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const dmtpc::analysis::SkimEvent*) G__getstructoffset())->moment((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const dmtpc::analysis::SkimEvent*) G__getstructoffset())->transverse_moment((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const dmtpc::analysis::SkimEvent*) G__getstructoffset())->dec((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const dmtpc::analysis::SkimEvent*) G__getstructoffset())->ra((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const dmtpc::analysis::SkimEvent*) G__getstructoffset())->glon((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const dmtpc::analysis::SkimEvent*) G__getstructoffset())->glat((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const dmtpc::analysis::SkimEvent*) G__getstructoffset())->image_mean((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const dmtpc::analysis::SkimEvent*) G__getstructoffset())->image_rms((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const dmtpc::analysis::SkimEvent*) G__getstructoffset())->pixels_killed((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const dmtpc::analysis::SkimEvent*) G__getstructoffset())->npixel_red((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const dmtpc::analysis::SkimEvent*) G__getstructoffset())->image((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 103, (long) ((const dmtpc::analysis::SkimEvent*) G__getstructoffset())->isRBI((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 103, (long) ((const dmtpc::analysis::SkimEvent*) G__getstructoffset())->isRBI((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((const dmtpc::analysis::SkimEvent*) G__getstructoffset())->isRBI((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((const dmtpc::analysis::SkimEvent*) G__getstructoffset())->isRBI((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const dmtpc::analysis::SkimEvent*) G__getstructoffset())->nburnin((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const dmtpc::analysis::SkimEvent*) G__getstructoffset())->burnin_event((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const dmtpc::analysis::SkimEvent*) G__getstructoffset())->burnin_track((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const dmtpc::analysis::SkimEvent*) G__getstructoffset())->burnin_this_index((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 72, (long) ((const dmtpc::analysis::SkimEvent*) G__getstructoffset())->burnin_v((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const dmtpc::analysis::SkimEvent*) G__getstructoffset())->nsparkref((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const dmtpc::analysis::SkimEvent*) G__getstructoffset())->sparkrefX((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const dmtpc::analysis::SkimEvent*) G__getstructoffset())->sparkrefY((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const dmtpc::analysis::SkimEvent*) G__getstructoffset())->nearestSpacerDistance((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const dmtpc::analysis::SkimEvent*) G__getstructoffset())->nearestSpacer((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((dmtpc::analysis::SkimEvent*) G__getstructoffset())->waveform_vectors());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((dmtpc::analysis::SkimEvent*) G__getstructoffset())->cspwf_vectors());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((dmtpc::analysis::SkimEvent*) G__getstructoffset())->fastwf_vectors());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((dmtpc::analysis::SkimEvent*) G__getstructoffset())->pmtwf_vectors());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((dmtpc::analysis::SkimEvent*) G__getstructoffset())->printOut(*(ostream*) libp->para[0].ref);
      G__setnull(result7);
      break;
   case 0:
      ((dmtpc::analysis::SkimEvent*) G__getstructoffset())->printOut();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((dmtpc::analysis::SkimEvent*) G__getstructoffset())->printOut((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, *(ostream*) libp->para[2].ref);
      G__setnull(result7);
      break;
   case 2:
      ((dmtpc::analysis::SkimEvent*) G__getstructoffset())->printOut((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const dmtpc::analysis::SkimEvent*) G__getstructoffset())->isStitched());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) dmtpc::analysis::SkimEvent::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) dmtpc::analysis::SkimEvent::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) dmtpc::analysis::SkimEvent::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      dmtpc::analysis::SkimEvent::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::SkimEvent*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) dmtpc::analysis::SkimEvent::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) dmtpc::analysis::SkimEvent::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) dmtpc::analysis::SkimEvent::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_316_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) dmtpc::analysis::SkimEvent::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef dmtpc::analysis::SkimEvent G__TdmtpccLcLanalysiscLcLSkimEvent;
static int G__DmtpcAnalysisCint_316_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (dmtpc::analysis::SkimEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((dmtpc::analysis::SkimEvent*) (soff+(sizeof(dmtpc::analysis::SkimEvent)*i)))->~G__TdmtpccLcLanalysiscLcLSkimEvent();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (dmtpc::analysis::SkimEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((dmtpc::analysis::SkimEvent*) (soff))->~G__TdmtpccLcLanalysiscLcLSkimEvent();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DmtpcAnalysisCint_316_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   dmtpc::analysis::SkimEvent* dest = (dmtpc::analysis::SkimEvent*) G__getstructoffset();
   *dest = *(dmtpc::analysis::SkimEvent*) libp->para[0].ref;
   const dmtpc::analysis::SkimEvent& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* dmtpc::analysis::clusteralgo */
static int G__DmtpcAnalysisCint_853_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) dmtpc::analysis::clusteralgo::getIntegral((dmtpc::analysis::Cluster*) G__int(libp->para[0]), (dmtpc::analysis::GainMap*) G__int(libp->para[1])
, (bool) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) dmtpc::analysis::clusteralgo::getIntegral((dmtpc::analysis::Cluster*) G__int(libp->para[0]), (dmtpc::analysis::GainMap*) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) dmtpc::analysis::clusteralgo::getIntegral((dmtpc::analysis::Cluster*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_853_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letdouble(result7, 100, (double) dmtpc::analysis::clusteralgo::getLength((dmtpc::analysis::Cluster*) G__int(libp->para[0]), (double*) G__int(libp->para[1])
, (double*) G__int(libp->para[2]), (double*) G__int(libp->para[3])
, (double*) G__int(libp->para[4]), (bool) G__int(libp->para[5])));
      break;
   case 5:
      G__letdouble(result7, 100, (double) dmtpc::analysis::clusteralgo::getLength((dmtpc::analysis::Cluster*) G__int(libp->para[0]), (double*) G__int(libp->para[1])
, (double*) G__int(libp->para[2]), (double*) G__int(libp->para[3])
, (double*) G__int(libp->para[4])));
      break;
   case 4:
      G__letdouble(result7, 100, (double) dmtpc::analysis::clusteralgo::getLength((dmtpc::analysis::Cluster*) G__int(libp->para[0]), (double*) G__int(libp->para[1])
, (double*) G__int(libp->para[2]), (double*) G__int(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 100, (double) dmtpc::analysis::clusteralgo::getLength((dmtpc::analysis::Cluster*) G__int(libp->para[0]), (double*) G__int(libp->para[1])
, (double*) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) dmtpc::analysis::clusteralgo::getLength((dmtpc::analysis::Cluster*) G__int(libp->para[0]), (double*) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) dmtpc::analysis::clusteralgo::getLength((dmtpc::analysis::Cluster*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_853_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) dmtpc::analysis::clusteralgo::getLengthAlongAngle((dmtpc::analysis::Cluster*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (bool) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) dmtpc::analysis::clusteralgo::getLengthAlongAngle((dmtpc::analysis::Cluster*) G__int(libp->para[0]), (double) G__double(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_853_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) dmtpc::analysis::clusteralgo::getPhiFromLength((dmtpc::analysis::Cluster*) G__int(libp->para[0]), (bool) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) dmtpc::analysis::clusteralgo::getPhiFromLength((dmtpc::analysis::Cluster*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_853_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) dmtpc::analysis::clusteralgo::getPhiPCA((dmtpc::analysis::Cluster*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_853_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) dmtpc::analysis::clusteralgo::getPhiMaxSigma((dmtpc::analysis::Cluster*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_853_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) dmtpc::analysis::clusteralgo::getPhiLineFit((dmtpc::analysis::Cluster*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_853_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letdouble(result7, 100, (double) dmtpc::analysis::clusteralgo::getXY((dmtpc::analysis::Cluster*) G__int(libp->para[0]), (double*) G__int(libp->para[1])
, (double*) G__int(libp->para[2]), (dmtpc::analysis::GainMap*) G__int(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 100, (double) dmtpc::analysis::clusteralgo::getXY((dmtpc::analysis::Cluster*) G__int(libp->para[0]), (double*) G__int(libp->para[1])
, (double*) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) dmtpc::analysis::clusteralgo::getXY((dmtpc::analysis::Cluster*) G__int(libp->para[0]), (double*) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) dmtpc::analysis::clusteralgo::getXY((dmtpc::analysis::Cluster*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_853_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) dmtpc::analysis::clusteralgo::inCluster((dmtpc::analysis::Cluster*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (bool) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) dmtpc::analysis::clusteralgo::inCluster((dmtpc::analysis::Cluster*) G__int(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_853_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      dmtpc::analysis::clusteralgo::getEllipseAxes((dmtpc::analysis::Cluster*) G__int(libp->para[0]), (double*) G__int(libp->para[1])
, (double*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_853_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) dmtpc::analysis::clusteralgo::getMean((dmtpc::analysis::Cluster*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_853_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) dmtpc::analysis::clusteralgo::getRMS((dmtpc::analysis::Cluster*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_853_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) dmtpc::analysis::clusteralgo::getMax((dmtpc::analysis::Cluster*) G__int(libp->para[0]), (int*) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) dmtpc::analysis::clusteralgo::getMax((dmtpc::analysis::Cluster*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_853_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) dmtpc::analysis::clusteralgo::getSkewness((dmtpc::analysis::Cluster*) G__int(libp->para[0]), (double) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_853_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) dmtpc::analysis::clusteralgo::getAsymmetry((dmtpc::analysis::Cluster*) G__int(libp->para[0]), (double) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_853_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      dmtpc::analysis::clusteralgo::morphologicalOperation((dmtpc::analysis::Cluster*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (bool) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      dmtpc::analysis::clusteralgo::morphologicalOperation((dmtpc::analysis::Cluster*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_853_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) dmtpc::analysis::clusteralgo::getNeighborsAboveThresh((dmtpc::analysis::Cluster*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (int) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_853_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      dmtpc::analysis::clusteralgo::clusterBinBounds((dmtpc::analysis::Cluster*) G__int(libp->para[0]), (int*) G__int(libp->para[1])
, (int*) G__int(libp->para[2]), (int*) G__int(libp->para[3])
, (int*) G__int(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_853_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      dmtpc::analysis::clusteralgo::clusterBounds((dmtpc::analysis::Cluster*) G__int(libp->para[0]), (double*) G__int(libp->para[1])
, (double*) G__int(libp->para[2]), (double*) G__int(libp->para[3])
, (double*) G__int(libp->para[4]), (double) G__double(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_853_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 7:
      G__letint(result7, 105, (long) dmtpc::analysis::clusteralgo::makeBoundary(
(dmtpc::analysis::Cluster*) G__int(libp->para[0]), (list<TGraph>*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]), (bool) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]), (int) G__int(libp->para[5])
, (int) G__int(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 105, (long) dmtpc::analysis::clusteralgo::makeBoundary((dmtpc::analysis::Cluster*) G__int(libp->para[0]), (list<TGraph>*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]), (bool) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]), (int) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 105, (long) dmtpc::analysis::clusteralgo::makeBoundary((dmtpc::analysis::Cluster*) G__int(libp->para[0]), (list<TGraph>*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]), (bool) G__int(libp->para[3])
, (const char*) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 105, (long) dmtpc::analysis::clusteralgo::makeBoundary((dmtpc::analysis::Cluster*) G__int(libp->para[0]), (list<TGraph>*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]), (bool) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) dmtpc::analysis::clusteralgo::makeBoundary((dmtpc::analysis::Cluster*) G__int(libp->para[0]), (list<TGraph>*) G__int(libp->para[1])
, (bool) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) dmtpc::analysis::clusteralgo::makeBoundary((dmtpc::analysis::Cluster*) G__int(libp->para[0]), (list<TGraph>*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_853_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) dmtpc::analysis::clusteralgo::edge((dmtpc::analysis::Cluster*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_853_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) dmtpc::analysis::clusteralgo::minDistance((dmtpc::analysis::Cluster*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_853_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) dmtpc::analysis::clusteralgo::maxDistance((dmtpc::analysis::Cluster*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_853_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      dmtpc::analysis::clusteralgo::minmax((dmtpc::analysis::Cluster*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double*) G__int(libp->para[2]), (double*) G__int(libp->para[3])
, (bool) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      dmtpc::analysis::clusteralgo::minmax((dmtpc::analysis::Cluster*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double*) G__int(libp->para[2]), (double*) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      dmtpc::analysis::clusteralgo::minmax((dmtpc::analysis::Cluster*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      dmtpc::analysis::clusteralgo::minmax((dmtpc::analysis::Cluster*) G__int(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_853_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 85, (long) dmtpc::analysis::clusteralgo::projectLegacy((dmtpc::analysis::Cluster*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (int) G__int(libp->para[2]), (bool) G__int(libp->para[3])
, (bool) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) dmtpc::analysis::clusteralgo::projectLegacy((dmtpc::analysis::Cluster*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (int) G__int(libp->para[2]), (bool) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) dmtpc::analysis::clusteralgo::projectLegacy((dmtpc::analysis::Cluster*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) dmtpc::analysis::clusteralgo::projectLegacy((dmtpc::analysis::Cluster*) G__int(libp->para[0]), (double) G__double(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_853_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 10:
      G__letint(result7, 85, (long) dmtpc::analysis::clusteralgo::project(
(dmtpc::analysis::Cluster*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (const char*) G__int(libp->para[2]), (dmtpc::analysis::GainMap*) G__int(libp->para[3])
, (double) G__double(libp->para[4]), (bool) G__int(libp->para[5])
, (const char*) G__int(libp->para[6]), (double*) G__int(libp->para[7])
, (double) G__double(libp->para[8]), (double) G__double(libp->para[9])));
      break;
   case 9:
      G__letint(result7, 85, (long) dmtpc::analysis::clusteralgo::project(
(dmtpc::analysis::Cluster*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (const char*) G__int(libp->para[2]), (dmtpc::analysis::GainMap*) G__int(libp->para[3])
, (double) G__double(libp->para[4]), (bool) G__int(libp->para[5])
, (const char*) G__int(libp->para[6]), (double*) G__int(libp->para[7])
, (double) G__double(libp->para[8])));
      break;
   case 8:
      G__letint(result7, 85, (long) dmtpc::analysis::clusteralgo::project(
(dmtpc::analysis::Cluster*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (const char*) G__int(libp->para[2]), (dmtpc::analysis::GainMap*) G__int(libp->para[3])
, (double) G__double(libp->para[4]), (bool) G__int(libp->para[5])
, (const char*) G__int(libp->para[6]), (double*) G__int(libp->para[7])));
      break;
   case 7:
      G__letint(result7, 85, (long) dmtpc::analysis::clusteralgo::project(
(dmtpc::analysis::Cluster*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (const char*) G__int(libp->para[2]), (dmtpc::analysis::GainMap*) G__int(libp->para[3])
, (double) G__double(libp->para[4]), (bool) G__int(libp->para[5])
, (const char*) G__int(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 85, (long) dmtpc::analysis::clusteralgo::project((dmtpc::analysis::Cluster*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (const char*) G__int(libp->para[2]), (dmtpc::analysis::GainMap*) G__int(libp->para[3])
, (double) G__double(libp->para[4]), (bool) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 85, (long) dmtpc::analysis::clusteralgo::project((dmtpc::analysis::Cluster*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (const char*) G__int(libp->para[2]), (dmtpc::analysis::GainMap*) G__int(libp->para[3])
, (double) G__double(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) dmtpc::analysis::clusteralgo::project((dmtpc::analysis::Cluster*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (const char*) G__int(libp->para[2]), (dmtpc::analysis::GainMap*) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) dmtpc::analysis::clusteralgo::project((dmtpc::analysis::Cluster*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (const char*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) dmtpc::analysis::clusteralgo::project((dmtpc::analysis::Cluster*) G__int(libp->para[0]), (double) G__double(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_853_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letint(result7, 85, (long) dmtpc::analysis::clusteralgo::clusterHist((dmtpc::analysis::Cluster*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (bool) G__int(libp->para[2]), (dmtpc::analysis::GainMap*) G__int(libp->para[3])
, (double) G__double(libp->para[4]), (bool) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 85, (long) dmtpc::analysis::clusteralgo::clusterHist((dmtpc::analysis::Cluster*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (bool) G__int(libp->para[2]), (dmtpc::analysis::GainMap*) G__int(libp->para[3])
, (double) G__double(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) dmtpc::analysis::clusteralgo::clusterHist((dmtpc::analysis::Cluster*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (bool) G__int(libp->para[2]), (dmtpc::analysis::GainMap*) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) dmtpc::analysis::clusteralgo::clusterHist((dmtpc::analysis::Cluster*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (bool) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) dmtpc::analysis::clusteralgo::clusterHist((dmtpc::analysis::Cluster*) G__int(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) dmtpc::analysis::clusteralgo::clusterHist((dmtpc::analysis::Cluster*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_853_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letdouble(result7, 100, (double) dmtpc::analysis::clusteralgo::moment((dmtpc::analysis::Cluster*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (int) G__int(libp->para[3])
, (bool) G__int(libp->para[4]), (bool) G__int(libp->para[5])));
      break;
   case 5:
      G__letdouble(result7, 100, (double) dmtpc::analysis::clusteralgo::moment((dmtpc::analysis::Cluster*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (int) G__int(libp->para[3])
, (bool) G__int(libp->para[4])));
      break;
   case 4:
      G__letdouble(result7, 100, (double) dmtpc::analysis::clusteralgo::moment((dmtpc::analysis::Cluster*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (int) G__int(libp->para[3])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_853_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) dmtpc::analysis::clusteralgo::nearestSpacerDistance((dmtpc::analysis::Cluster*) G__int(libp->para[0]), (dmtpc::analysis::GainMap*) G__int(libp->para[1])
, *(int*) G__Intref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_853_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) dmtpc::analysis::clusteralgo::maxDerivativeX((dmtpc::analysis::Cluster*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_853_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) dmtpc::analysis::clusteralgo::fullyConnected((dmtpc::analysis::Cluster*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}


/* dmtpc::analysis::GainTree */
static int G__DmtpcAnalysisCint_865_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   dmtpc::analysis::GainTree* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new dmtpc::analysis::GainTree[n];
     } else {
       p = new((void*) gvp) dmtpc::analysis::GainTree[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new dmtpc::analysis::GainTree;
     } else {
       p = new((void*) gvp) dmtpc::analysis::GainTree;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLGainTree));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_865_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::GainTree*) G__getstructoffset())->cloneHisto((TH1*) G__int(libp->para[0]), *(vector<TH1*>*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_865_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::GainTree*) G__getstructoffset())->initHistos();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_865_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::GainTree*) G__getstructoffset())->writeHistos((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_865_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((dmtpc::analysis::GainTree*) G__getstructoffset())->fillWfHistos(*(dmtpc::waveform::CspWaveform*) libp->para[0].ref, (int) G__int(libp->para[1])
, (bool) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_865_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((dmtpc::analysis::GainTree*) G__getstructoffset())->fillPulseHistos(*(dmtpc::waveform::CspPulse*) libp->para[0].ref, (int) G__int(libp->para[1])
, (bool) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_865_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         pair<double,double>* pobj;
         pair<double,double> xobj = ((dmtpc::analysis::GainTree*) G__getstructoffset())->fitGaussian((TH1*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
         pobj = new pair<double,double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_865_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((dmtpc::analysis::GainTree*) G__getstructoffset())->fillXtalkHistos(*(dmtpc::waveform::CspPulse*) libp->para[0].ref, *(dmtpc::waveform::CspPulse*) libp->para[1].ref
, (unsigned int) G__int(libp->para[2]), (unsigned int) G__int(libp->para[3])
, (double) G__double(libp->para[4]), (bool) G__int(libp->para[5])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_865_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::GainTree*) G__getstructoffset())->fitBaseline();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_865_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::GainTree*) G__getstructoffset())->fitRMS();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_865_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::GainTree*) G__getstructoffset())->fitPeakBin();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_865_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::GainTree*) G__getstructoffset())->fitStartBin();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_865_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::GainTree*) G__getstructoffset())->fitPeakStartDiff();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_865_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::GainTree*) G__getstructoffset())->printPeakInfo();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_865_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) dmtpc::analysis::GainTree::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_865_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) dmtpc::analysis::GainTree::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_865_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) dmtpc::analysis::GainTree::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_865_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      dmtpc::analysis::GainTree::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_865_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const dmtpc::analysis::GainTree*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_865_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::GainTree*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_865_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::GainTree*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_865_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::GainTree*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_865_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) dmtpc::analysis::GainTree::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_865_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) dmtpc::analysis::GainTree::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_865_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) dmtpc::analysis::GainTree::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_865_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) dmtpc::analysis::GainTree::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DmtpcAnalysisCint_865_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   dmtpc::analysis::GainTree* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new dmtpc::analysis::GainTree(*(dmtpc::analysis::GainTree*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLGainTree));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef dmtpc::analysis::GainTree G__TdmtpccLcLanalysiscLcLGainTree;
static int G__DmtpcAnalysisCint_865_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (dmtpc::analysis::GainTree*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((dmtpc::analysis::GainTree*) (soff+(sizeof(dmtpc::analysis::GainTree)*i)))->~G__TdmtpccLcLanalysiscLcLGainTree();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (dmtpc::analysis::GainTree*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((dmtpc::analysis::GainTree*) (soff))->~G__TdmtpccLcLanalysiscLcLGainTree();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DmtpcAnalysisCint_865_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   dmtpc::analysis::GainTree* dest = (dmtpc::analysis::GainTree*) G__getstructoffset();
   *dest = *(dmtpc::analysis::GainTree*) libp->para[0].ref;
   const dmtpc::analysis::GainTree& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* dmtpc::analysis::HVLog */
static int G__DmtpcAnalysisCint_870_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   dmtpc::analysis::HVLog* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 9
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new dmtpc::analysis::HVLog(
(unsigned int) G__int(libp->para[0]), (double*) G__int(libp->para[1])
, (double*) G__int(libp->para[2]), (unsigned int) G__int(libp->para[3])
, (double*) G__int(libp->para[4]), (double*) G__int(libp->para[5])
, (unsigned int) G__int(libp->para[6]), (double*) G__int(libp->para[7])
, (double*) G__int(libp->para[8]));
   } else {
     p = new((void*) gvp) dmtpc::analysis::HVLog(
(unsigned int) G__int(libp->para[0]), (double*) G__int(libp->para[1])
, (double*) G__int(libp->para[2]), (unsigned int) G__int(libp->para[3])
, (double*) G__int(libp->para[4]), (double*) G__int(libp->para[5])
, (unsigned int) G__int(libp->para[6]), (double*) G__int(libp->para[7])
, (double*) G__int(libp->para[8]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLHVLog));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_870_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   dmtpc::analysis::HVLog* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new dmtpc::analysis::HVLog(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]), (const char*) G__int(libp->para[5]));
     } else {
       p = new((void*) gvp) dmtpc::analysis::HVLog(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]), (const char*) G__int(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new dmtpc::analysis::HVLog(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) dmtpc::analysis::HVLog(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new dmtpc::analysis::HVLog(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) dmtpc::analysis::HVLog(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLHVLog));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_870_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) ((const dmtpc::analysis::HVLog*) G__getstructoffset())->getImon((double) G__double(libp->para[0]), (double*) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((const dmtpc::analysis::HVLog*) G__getstructoffset())->getImon((double) G__double(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_870_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const dmtpc::analysis::HVLog*) G__getstructoffset())->getMaxImon((double) G__double(libp->para[0]), (double) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_870_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const dmtpc::analysis::HVLog*) G__getstructoffset())->getAvgImon((double) G__double(libp->para[0]), (double) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_870_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) ((const dmtpc::analysis::HVLog*) G__getstructoffset())->getVmon((double) G__double(libp->para[0]), (double*) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((const dmtpc::analysis::HVLog*) G__getstructoffset())->getVmon((double) G__double(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_870_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const dmtpc::analysis::HVLog*) G__getstructoffset())->getAvgVmon((double) G__double(libp->para[0]), (double) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_870_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) ((const dmtpc::analysis::HVLog*) G__getstructoffset())->getVset((double) G__double(libp->para[0]), (double*) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((const dmtpc::analysis::HVLog*) G__getstructoffset())->getVset((double) G__double(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_870_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 8:
      G__letint(result7, 105, (long) ((dmtpc::analysis::HVLog*) G__getstructoffset())->makeSparkFriend(
(TChain*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (bool) G__int(libp->para[5])
, (int) G__int(libp->para[6]), (double) G__double(libp->para[7])));
      break;
   case 7:
      G__letint(result7, 105, (long) ((dmtpc::analysis::HVLog*) G__getstructoffset())->makeSparkFriend(
(TChain*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (bool) G__int(libp->para[5])
, (int) G__int(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 105, (long) ((dmtpc::analysis::HVLog*) G__getstructoffset())->makeSparkFriend((TChain*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (bool) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 105, (long) ((dmtpc::analysis::HVLog*) G__getstructoffset())->makeSparkFriend((TChain*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 105, (long) ((dmtpc::analysis::HVLog*) G__getstructoffset())->makeSparkFriend((TChain*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (double) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((dmtpc::analysis::HVLog*) G__getstructoffset())->makeSparkFriend((TChain*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((dmtpc::analysis::HVLog*) G__getstructoffset())->makeSparkFriend((TChain*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DmtpcAnalysisCint_870_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   dmtpc::analysis::HVLog* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new dmtpc::analysis::HVLog(*(dmtpc::analysis::HVLog*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLHVLog));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef dmtpc::analysis::HVLog G__TdmtpccLcLanalysiscLcLHVLog;
static int G__DmtpcAnalysisCint_870_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (dmtpc::analysis::HVLog*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((dmtpc::analysis::HVLog*) (soff+(sizeof(dmtpc::analysis::HVLog)*i)))->~G__TdmtpccLcLanalysiscLcLHVLog();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (dmtpc::analysis::HVLog*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((dmtpc::analysis::HVLog*) (soff))->~G__TdmtpccLcLanalysiscLcLHVLog();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DmtpcAnalysisCint_870_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   dmtpc::analysis::HVLog* dest = (dmtpc::analysis::HVLog*) G__getstructoffset();
   *dest = *(dmtpc::analysis::HVLog*) libp->para[0].ref;
   const dmtpc::analysis::HVLog& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* dmtpc::analysis::MCTruth */
static int G__DmtpcAnalysisCint_871_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   dmtpc::analysis::MCTruth* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new dmtpc::analysis::MCTruth[n];
     } else {
       p = new((void*) gvp) dmtpc::analysis::MCTruth[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new dmtpc::analysis::MCTruth;
     } else {
       p = new((void*) gvp) dmtpc::analysis::MCTruth;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLMCTruth));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_871_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((dmtpc::analysis::MCTruth*) G__getstructoffset())->phi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_871_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((dmtpc::analysis::MCTruth*) G__getstructoffset())->opening());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_871_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((dmtpc::analysis::MCTruth*) G__getstructoffset())->theta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_871_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) ((dmtpc::analysis::MCTruth*) G__getstructoffset())->xcam((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((dmtpc::analysis::MCTruth*) G__getstructoffset())->xcam((double) G__double(libp->para[0]), (double) G__double(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_871_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) ((dmtpc::analysis::MCTruth*) G__getstructoffset())->ycam((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((dmtpc::analysis::MCTruth*) G__getstructoffset())->ycam((double) G__double(libp->para[0]), (double) G__double(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_871_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 100, (double) ((dmtpc::analysis::MCTruth*) G__getstructoffset())->x0cam((int) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 100, (double) ((dmtpc::analysis::MCTruth*) G__getstructoffset())->x0cam());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_871_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 100, (double) ((dmtpc::analysis::MCTruth*) G__getstructoffset())->y0cam((int) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 100, (double) ((dmtpc::analysis::MCTruth*) G__getstructoffset())->y0cam());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_871_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) ((dmtpc::analysis::MCTruth*) G__getstructoffset())->getTruthImage((int) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((dmtpc::analysis::MCTruth*) G__getstructoffset())->getTruthImage());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_871_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::MCTruth*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_871_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) dmtpc::analysis::MCTruth::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_871_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) dmtpc::analysis::MCTruth::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_871_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) dmtpc::analysis::MCTruth::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_871_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      dmtpc::analysis::MCTruth::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_871_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const dmtpc::analysis::MCTruth*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_871_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::MCTruth*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_871_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::MCTruth*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_871_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::MCTruth*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_871_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) dmtpc::analysis::MCTruth::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_871_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) dmtpc::analysis::MCTruth::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_871_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) dmtpc::analysis::MCTruth::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_871_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) dmtpc::analysis::MCTruth::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DmtpcAnalysisCint_871_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   dmtpc::analysis::MCTruth* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new dmtpc::analysis::MCTruth(*(dmtpc::analysis::MCTruth*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLMCTruth));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef dmtpc::analysis::MCTruth G__TdmtpccLcLanalysiscLcLMCTruth;
static int G__DmtpcAnalysisCint_871_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (dmtpc::analysis::MCTruth*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((dmtpc::analysis::MCTruth*) (soff+(sizeof(dmtpc::analysis::MCTruth)*i)))->~G__TdmtpccLcLanalysiscLcLMCTruth();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (dmtpc::analysis::MCTruth*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((dmtpc::analysis::MCTruth*) (soff))->~G__TdmtpccLcLanalysiscLcLMCTruth();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DmtpcAnalysisCint_871_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   dmtpc::analysis::MCTruth* dest = (dmtpc::analysis::MCTruth*) G__getstructoffset();
   *dest = *(dmtpc::analysis::MCTruth*) libp->para[0].ref;
   const dmtpc::analysis::MCTruth& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* dmtpc::analysis::MCTPCDataset */
static int G__DmtpcAnalysisCint_880_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   dmtpc::analysis::MCTPCDataset* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new dmtpc::analysis::MCTPCDataset((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) dmtpc::analysis::MCTPCDataset((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new dmtpc::analysis::MCTPCDataset[n];
       } else {
         p = new((void*) gvp) dmtpc::analysis::MCTPCDataset[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new dmtpc::analysis::MCTPCDataset;
       } else {
         p = new((void*) gvp) dmtpc::analysis::MCTPCDataset;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLMCTPCDataset));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_880_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((dmtpc::analysis::MCTPCDataset*) G__getstructoffset())->open((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_880_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::MCTPCDataset*) G__getstructoffset())->close();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_880_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((dmtpc::analysis::MCTPCDataset*) G__getstructoffset())->getEvent((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_880_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((dmtpc::analysis::MCTPCDataset*) G__getstructoffset())->truth());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_880_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((dmtpc::analysis::MCTPCDataset*) G__getstructoffset())->getTree());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_880_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((dmtpc::analysis::MCTPCDataset*) G__getstructoffset())->getTruthImage((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DmtpcAnalysisCint_880_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   dmtpc::analysis::MCTPCDataset* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new dmtpc::analysis::MCTPCDataset(*(dmtpc::analysis::MCTPCDataset*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLMCTPCDataset));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef dmtpc::analysis::MCTPCDataset G__TdmtpccLcLanalysiscLcLMCTPCDataset;
static int G__DmtpcAnalysisCint_880_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (dmtpc::analysis::MCTPCDataset*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((dmtpc::analysis::MCTPCDataset*) (soff+(sizeof(dmtpc::analysis::MCTPCDataset)*i)))->~G__TdmtpccLcLanalysiscLcLMCTPCDataset();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (dmtpc::analysis::MCTPCDataset*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((dmtpc::analysis::MCTPCDataset*) (soff))->~G__TdmtpccLcLanalysiscLcLMCTPCDataset();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DmtpcAnalysisCint_880_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   dmtpc::analysis::MCTPCDataset* dest = (dmtpc::analysis::MCTPCDataset*) G__getstructoffset();
   *dest = *(dmtpc::analysis::MCTPCDataset*) libp->para[0].ref;
   const dmtpc::analysis::MCTPCDataset& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* dmtpc::analysis::truthalgo */
static int G__DmtpcAnalysisCint_884_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) dmtpc::analysis::truthalgo::maincam((dmtpc::analysis::MCTruth*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_884_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) dmtpc::analysis::truthalgo::edge((dmtpc::analysis::MCTruth*) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_884_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letdouble(result7, 100, (double) dmtpc::analysis::truthalgo::getGain((dmtpc::analysis::MCTPCDataset*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (dmtpc::analysis::GainMap*) G__int(libp->para[3])
, (double) G__double(libp->para[4])));
      break;
   case 4:
      G__letdouble(result7, 100, (double) dmtpc::analysis::truthalgo::getGain((dmtpc::analysis::MCTPCDataset*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (dmtpc::analysis::GainMap*) G__int(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 100, (double) dmtpc::analysis::truthalgo::getGain((dmtpc::analysis::MCTPCDataset*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (const char*) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) dmtpc::analysis::truthalgo::getGain((dmtpc::analysis::MCTPCDataset*) G__int(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_884_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 85, (long) dmtpc::analysis::truthalgo::pca_electrons((dmtpc::analysis::MCTruth*) G__int(libp->para[0]), (dmtpc::math::PrincipalComponentFinder*) G__int(libp->para[1])
, (bool) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) dmtpc::analysis::truthalgo::pca_electrons((dmtpc::analysis::MCTruth*) G__int(libp->para[0]), (dmtpc::math::PrincipalComponentFinder*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) dmtpc::analysis::truthalgo::pca_electrons((dmtpc::analysis::MCTruth*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_884_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 85, (long) dmtpc::analysis::truthalgo::pca_electrons_flat((dmtpc::analysis::MCTruth*) G__int(libp->para[0]), (dmtpc::math::PrincipalComponentFinder*) G__int(libp->para[1])
, (bool) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) dmtpc::analysis::truthalgo::pca_electrons_flat((dmtpc::analysis::MCTruth*) G__int(libp->para[0]), (dmtpc::math::PrincipalComponentFinder*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) dmtpc::analysis::truthalgo::pca_electrons_flat((dmtpc::analysis::MCTruth*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_884_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) dmtpc::analysis::truthalgo::pca_hist((TH2*) G__int(libp->para[0]), (double*) G__int(libp->para[1])
, (double*) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) dmtpc::analysis::truthalgo::pca_hist((TH2*) G__int(libp->para[0]), (double*) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) dmtpc::analysis::truthalgo::pca_hist((TH2*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_884_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 9:
      G__letdouble(result7, 100, (double) dmtpc::analysis::truthalgo::electron_asymmetry(
(dmtpc::analysis::MCTruth*) G__int(libp->para[0]), (TVector3*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]), (bool) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (double*) G__int(libp->para[5])
, (int*) G__int(libp->para[6]), (TF1*) G__int(libp->para[7])
, (TH1*) G__int(libp->para[8])));
      break;
   case 8:
      G__letdouble(result7, 100, (double) dmtpc::analysis::truthalgo::electron_asymmetry(
(dmtpc::analysis::MCTruth*) G__int(libp->para[0]), (TVector3*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]), (bool) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (double*) G__int(libp->para[5])
, (int*) G__int(libp->para[6]), (TF1*) G__int(libp->para[7])));
      break;
   case 7:
      G__letdouble(result7, 100, (double) dmtpc::analysis::truthalgo::electron_asymmetry(
(dmtpc::analysis::MCTruth*) G__int(libp->para[0]), (TVector3*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]), (bool) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (double*) G__int(libp->para[5])
, (int*) G__int(libp->para[6])));
      break;
   case 6:
      G__letdouble(result7, 100, (double) dmtpc::analysis::truthalgo::electron_asymmetry((dmtpc::analysis::MCTruth*) G__int(libp->para[0]), (TVector3*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]), (bool) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (double*) G__int(libp->para[5])));
      break;
   case 5:
      G__letdouble(result7, 100, (double) dmtpc::analysis::truthalgo::electron_asymmetry((dmtpc::analysis::MCTruth*) G__int(libp->para[0]), (TVector3*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]), (bool) G__int(libp->para[3])
, (int) G__int(libp->para[4])));
      break;
   case 4:
      G__letdouble(result7, 100, (double) dmtpc::analysis::truthalgo::electron_asymmetry((dmtpc::analysis::MCTruth*) G__int(libp->para[0]), (TVector3*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]), (bool) G__int(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 100, (double) dmtpc::analysis::truthalgo::electron_asymmetry((dmtpc::analysis::MCTruth*) G__int(libp->para[0]), (TVector3*) G__int(libp->para[1])
, (bool) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) dmtpc::analysis::truthalgo::electron_asymmetry((dmtpc::analysis::MCTruth*) G__int(libp->para[0]), (TVector3*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_884_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 9:
      G__letdouble(result7, 100, (double) dmtpc::analysis::truthalgo::hist_asymmetry(
(TH2*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (int) G__int(libp->para[2]), (double*) G__int(libp->para[3])
, (int*) G__int(libp->para[4]), (TRandom*) G__int(libp->para[5])
, (double) G__double(libp->para[6]), (TF1*) G__int(libp->para[7])
, (TH1*) G__int(libp->para[8])));
      break;
   case 8:
      G__letdouble(result7, 100, (double) dmtpc::analysis::truthalgo::hist_asymmetry(
(TH2*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (int) G__int(libp->para[2]), (double*) G__int(libp->para[3])
, (int*) G__int(libp->para[4]), (TRandom*) G__int(libp->para[5])
, (double) G__double(libp->para[6]), (TF1*) G__int(libp->para[7])));
      break;
   case 7:
      G__letdouble(result7, 100, (double) dmtpc::analysis::truthalgo::hist_asymmetry(
(TH2*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (int) G__int(libp->para[2]), (double*) G__int(libp->para[3])
, (int*) G__int(libp->para[4]), (TRandom*) G__int(libp->para[5])
, (double) G__double(libp->para[6])));
      break;
   case 6:
      G__letdouble(result7, 100, (double) dmtpc::analysis::truthalgo::hist_asymmetry((TH2*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (int) G__int(libp->para[2]), (double*) G__int(libp->para[3])
, (int*) G__int(libp->para[4]), (TRandom*) G__int(libp->para[5])));
      break;
   case 5:
      G__letdouble(result7, 100, (double) dmtpc::analysis::truthalgo::hist_asymmetry((TH2*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (int) G__int(libp->para[2]), (double*) G__int(libp->para[3])
, (int*) G__int(libp->para[4])));
      break;
   case 4:
      G__letdouble(result7, 100, (double) dmtpc::analysis::truthalgo::hist_asymmetry((TH2*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (int) G__int(libp->para[2]), (double*) G__int(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 100, (double) dmtpc::analysis::truthalgo::hist_asymmetry((TH2*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) dmtpc::analysis::truthalgo::hist_asymmetry((TH2*) G__int(libp->para[0]), (double) G__double(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_884_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) dmtpc::analysis::truthalgo::max_displacement((dmtpc::analysis::MCTruth*) G__int(libp->para[0]), (bool) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) dmtpc::analysis::truthalgo::max_displacement((dmtpc::analysis::MCTruth*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}


/* dmtpc::analysis::Playlist */
static int G__DmtpcAnalysisCint_885_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   dmtpc::analysis::Playlist* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new dmtpc::analysis::Playlist[n];
     } else {
       p = new((void*) gvp) dmtpc::analysis::Playlist[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new dmtpc::analysis::Playlist;
     } else {
       p = new((void*) gvp) dmtpc::analysis::Playlist;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLPlaylist));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_885_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   dmtpc::analysis::Playlist* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new dmtpc::analysis::Playlist((const char*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) dmtpc::analysis::Playlist((const char*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLPlaylist));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_885_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((dmtpc::analysis::Playlist*) G__getstructoffset())->getDataset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_885_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((dmtpc::analysis::Playlist*) G__getstructoffset())->getRawDataset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_885_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((dmtpc::analysis::Playlist*) G__getstructoffset())->getEvent());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_885_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((dmtpc::analysis::Playlist*) G__getstructoffset())->getRawEvent());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_885_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const dmtpc::analysis::Playlist*) G__getstructoffset())->getCam());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_885_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const dmtpc::analysis::Playlist*) G__getstructoffset())->getTrack());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_885_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const dmtpc::analysis::Playlist*) G__getstructoffset())->getType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_885_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const dmtpc::analysis::Playlist*) G__getstructoffset())->getDataDir());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_885_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::Playlist*) G__getstructoffset())->next();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_885_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::Playlist*) G__getstructoffset())->previous();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_885_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((dmtpc::analysis::Playlist*) G__getstructoffset())->index());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_885_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::Playlist*) G__getstructoffset())->go((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_885_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((dmtpc::analysis::Playlist*) G__getstructoffset())->n());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_885_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::Playlist*) G__getstructoffset())->setDataDir((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_885_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::Playlist*) G__getstructoffset())->setType((dmtpc::analysis::Playlist::TYPE) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_885_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::Playlist*) G__getstructoffset())->add((const char*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_885_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::Playlist*) G__getstructoffset())->save((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_885_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::Playlist*) G__getstructoffset())->open((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_885_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) dmtpc::analysis::Playlist::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_885_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) dmtpc::analysis::Playlist::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_885_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) dmtpc::analysis::Playlist::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_885_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      dmtpc::analysis::Playlist::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_885_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const dmtpc::analysis::Playlist*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_885_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::Playlist*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_885_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::Playlist*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_885_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::Playlist*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_885_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) dmtpc::analysis::Playlist::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_885_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) dmtpc::analysis::Playlist::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_885_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) dmtpc::analysis::Playlist::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_885_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) dmtpc::analysis::Playlist::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DmtpcAnalysisCint_885_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   dmtpc::analysis::Playlist* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new dmtpc::analysis::Playlist(*(dmtpc::analysis::Playlist*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLPlaylist));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef dmtpc::analysis::Playlist G__TdmtpccLcLanalysiscLcLPlaylist;
static int G__DmtpcAnalysisCint_885_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (dmtpc::analysis::Playlist*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((dmtpc::analysis::Playlist*) (soff+(sizeof(dmtpc::analysis::Playlist)*i)))->~G__TdmtpccLcLanalysiscLcLPlaylist();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (dmtpc::analysis::Playlist*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((dmtpc::analysis::Playlist*) (soff))->~G__TdmtpccLcLanalysiscLcLPlaylist();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DmtpcAnalysisCint_885_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   dmtpc::analysis::Playlist* dest = (dmtpc::analysis::Playlist*) G__getstructoffset();
   *dest = *(dmtpc::analysis::Playlist*) libp->para[0].ref;
   const dmtpc::analysis::Playlist& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* dmtpc::analysis::TrackFitter */
static int G__DmtpcAnalysisCint_1005_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   dmtpc::analysis::TrackFitter* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 7:
     //m: 7
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new dmtpc::analysis::TrackFitter(
(dmtpc::physics::SRIMTable*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (TH2*) G__int(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5])
, (double) G__double(libp->para[6]));
     } else {
       p = new((void*) gvp) dmtpc::analysis::TrackFitter(
(dmtpc::physics::SRIMTable*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (TH2*) G__int(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5])
, (double) G__double(libp->para[6]));
     }
     break;
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new dmtpc::analysis::TrackFitter(
(dmtpc::physics::SRIMTable*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (TH2*) G__int(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5]));
     } else {
       p = new((void*) gvp) dmtpc::analysis::TrackFitter(
(dmtpc::physics::SRIMTable*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (TH2*) G__int(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new dmtpc::analysis::TrackFitter(
(dmtpc::physics::SRIMTable*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (TH2*) G__int(libp->para[3])
, (double) G__double(libp->para[4]));
     } else {
       p = new((void*) gvp) dmtpc::analysis::TrackFitter(
(dmtpc::physics::SRIMTable*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (TH2*) G__int(libp->para[3])
, (double) G__double(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new dmtpc::analysis::TrackFitter(
(dmtpc::physics::SRIMTable*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (TH2*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) dmtpc::analysis::TrackFitter(
(dmtpc::physics::SRIMTable*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (TH2*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new dmtpc::analysis::TrackFitter(
(dmtpc::physics::SRIMTable*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
     } else {
       p = new((void*) gvp) dmtpc::analysis::TrackFitter(
(dmtpc::physics::SRIMTable*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new dmtpc::analysis::TrackFitter((dmtpc::physics::SRIMTable*) G__int(libp->para[0]), (double) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) dmtpc::analysis::TrackFitter((dmtpc::physics::SRIMTable*) G__int(libp->para[0]), (double) G__double(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new dmtpc::analysis::TrackFitter((dmtpc::physics::SRIMTable*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) dmtpc::analysis::TrackFitter((dmtpc::physics::SRIMTable*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLTrackFitter));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_1005_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 105, (long) ((dmtpc::analysis::TrackFitter*) G__getstructoffset())->fit((TH2*) G__int(libp->para[0]), (vector<int>*) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 105, (long) ((dmtpc::analysis::TrackFitter*) G__getstructoffset())->fit((TH2*) G__int(libp->para[0]), (vector<int>*) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((dmtpc::analysis::TrackFitter*) G__getstructoffset())->fit((TH2*) G__int(libp->para[0]), (vector<int>*) G__int(libp->para[1])
, (double) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((dmtpc::analysis::TrackFitter*) G__getstructoffset())->fit((TH2*) G__int(libp->para[0]), (vector<int>*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_1005_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((dmtpc::analysis::TrackFitter*) G__getstructoffset())->fit((dmtpc::analysis::SkimEvent*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_1005_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::TrackFitter*) G__getstructoffset())->setMinimizationMaxCalls((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_1005_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::TrackFitter*) G__getstructoffset())->setIntegrationAbsTol((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_1005_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::TrackFitter*) G__getstructoffset())->setIntegrationRelTol((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_1005_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::TrackFitter*) G__getstructoffset())->setIntegrationNCalls((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_1005_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::TrackFitter*) G__getstructoffset())->enableCauchy((bool) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_1005_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::TrackFitter*) G__getstructoffset())->enableSecondGaus((bool) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_1005_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::TrackFitter*) G__getstructoffset())->enableLikelihoodFlip((bool) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_1005_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::TrackFitter*) G__getstructoffset())->setUseGainMapError((bool) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_1005_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::TrackFitter*) G__getstructoffset())->setClusterPadding((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_1005_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::TrackFitter*) G__getstructoffset())->setZeroOutsideCluster((bool) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_1005_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((dmtpc::analysis::TrackFitter*) G__getstructoffset())->setDraw((bool) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((dmtpc::analysis::TrackFitter*) G__getstructoffset())->setDraw();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_1005_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((dmtpc::analysis::TrackFitter*) G__getstructoffset())->setVerbose((bool) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((dmtpc::analysis::TrackFitter*) G__getstructoffset())->setVerbose();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_1005_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((dmtpc::analysis::TrackFitter*) G__getstructoffset())->setDoIntegral((bool) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((dmtpc::analysis::TrackFitter*) G__getstructoffset())->setDoIntegral();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_1005_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((dmtpc::analysis::TrackFitter*) G__getstructoffset())->setDoLikelihood((bool) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((dmtpc::analysis::TrackFitter*) G__getstructoffset())->setDoLikelihood();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_1005_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((dmtpc::analysis::TrackFitter*) G__getstructoffset())->setAlwaysDoMinos((bool) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((dmtpc::analysis::TrackFitter*) G__getstructoffset())->setAlwaysDoMinos();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_1005_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::TrackFitter*) G__getstructoffset())->setMinosThresh((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_1005_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((dmtpc::analysis::TrackFitter*) G__getstructoffset())->setForceDecreasing((bool) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((dmtpc::analysis::TrackFitter*) G__getstructoffset())->setForceDecreasing();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_1005_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::TrackFitter*) G__getstructoffset())->setIntegraNSigma((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_1005_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const dmtpc::analysis::TrackFitter*) G__getstructoffset())->getResult());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_1005_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::TrackFitter*) G__getstructoffset())->setQuickEval((bool) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_1005_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((dmtpc::analysis::TrackFitter*) G__getstructoffset())->getCanvas());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_1005_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const dmtpc::analysis::TrackFitter*) G__getstructoffset())->SRIMLineFit2DFn((double*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_1005_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const dmtpc::analysis::TrackFitter*) G__getstructoffset())->getMinimizer());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_1005_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) dmtpc::analysis::TrackFitter::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_1005_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) dmtpc::analysis::TrackFitter::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_1005_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) dmtpc::analysis::TrackFitter::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_1005_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      dmtpc::analysis::TrackFitter::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_1005_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const dmtpc::analysis::TrackFitter*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_1005_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::TrackFitter*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_1005_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::TrackFitter*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_1005_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::TrackFitter*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_1005_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) dmtpc::analysis::TrackFitter::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_1005_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) dmtpc::analysis::TrackFitter::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_1005_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) dmtpc::analysis::TrackFitter::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_1005_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) dmtpc::analysis::TrackFitter::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DmtpcAnalysisCint_1005_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   dmtpc::analysis::TrackFitter* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new dmtpc::analysis::TrackFitter(*(dmtpc::analysis::TrackFitter*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLTrackFitter));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef dmtpc::analysis::TrackFitter G__TdmtpccLcLanalysiscLcLTrackFitter;
static int G__DmtpcAnalysisCint_1005_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (dmtpc::analysis::TrackFitter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((dmtpc::analysis::TrackFitter*) (soff+(sizeof(dmtpc::analysis::TrackFitter)*i)))->~G__TdmtpccLcLanalysiscLcLTrackFitter();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (dmtpc::analysis::TrackFitter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((dmtpc::analysis::TrackFitter*) (soff))->~G__TdmtpccLcLanalysiscLcLTrackFitter();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* dmtpc::analysis::TrackFitter::Param */
static int G__DmtpcAnalysisCint_1007_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   dmtpc::analysis::TrackFitter::Param* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new dmtpc::analysis::TrackFitter::Param[n];
     } else {
       p = new((void*) gvp) dmtpc::analysis::TrackFitter::Param[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new dmtpc::analysis::TrackFitter::Param;
     } else {
       p = new((void*) gvp) dmtpc::analysis::TrackFitter::Param;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLTrackFittercLcLParam));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_1007_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::TrackFitter::Param*) G__getstructoffset())->zeroErr();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_1007_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::TrackFitter::Param*) G__getstructoffset())->fixErr();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_1007_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) dmtpc::analysis::TrackFitter::Param::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_1007_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) dmtpc::analysis::TrackFitter::Param::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_1007_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) dmtpc::analysis::TrackFitter::Param::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_1007_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      dmtpc::analysis::TrackFitter::Param::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_1007_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const dmtpc::analysis::TrackFitter::Param*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_1007_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::TrackFitter::Param*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_1007_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::TrackFitter::Param*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_1007_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::TrackFitter::Param*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_1007_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) dmtpc::analysis::TrackFitter::Param::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_1007_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) dmtpc::analysis::TrackFitter::Param::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_1007_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) dmtpc::analysis::TrackFitter::Param::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_1007_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) dmtpc::analysis::TrackFitter::Param::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DmtpcAnalysisCint_1007_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   dmtpc::analysis::TrackFitter::Param* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new dmtpc::analysis::TrackFitter::Param(*(dmtpc::analysis::TrackFitter::Param*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLTrackFittercLcLParam));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef dmtpc::analysis::TrackFitter::Param G__TdmtpccLcLanalysiscLcLTrackFittercLcLParam;
static int G__DmtpcAnalysisCint_1007_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (dmtpc::analysis::TrackFitter::Param*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((dmtpc::analysis::TrackFitter::Param*) (soff+(sizeof(dmtpc::analysis::TrackFitter::Param)*i)))->~G__TdmtpccLcLanalysiscLcLTrackFittercLcLParam();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (dmtpc::analysis::TrackFitter::Param*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((dmtpc::analysis::TrackFitter::Param*) (soff))->~G__TdmtpccLcLanalysiscLcLTrackFittercLcLParam();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DmtpcAnalysisCint_1007_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   dmtpc::analysis::TrackFitter::Param* dest = (dmtpc::analysis::TrackFitter::Param*) G__getstructoffset();
   *dest = *(dmtpc::analysis::TrackFitter::Param*) libp->para[0].ref;
   const dmtpc::analysis::TrackFitter::Param& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* dmtpc::analysis::TrackFitter::Result */
static int G__DmtpcAnalysisCint_1008_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   dmtpc::analysis::TrackFitter::Result* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new dmtpc::analysis::TrackFitter::Result[n];
     } else {
       p = new((void*) gvp) dmtpc::analysis::TrackFitter::Result[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new dmtpc::analysis::TrackFitter::Result;
     } else {
       p = new((void*) gvp) dmtpc::analysis::TrackFitter::Result;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLTrackFittercLcLResult));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_1008_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) dmtpc::analysis::TrackFitter::Result::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_1008_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) dmtpc::analysis::TrackFitter::Result::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_1008_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) dmtpc::analysis::TrackFitter::Result::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_1008_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      dmtpc::analysis::TrackFitter::Result::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_1008_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const dmtpc::analysis::TrackFitter::Result*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_1008_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::TrackFitter::Result*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_1008_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::TrackFitter::Result*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_1008_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((dmtpc::analysis::TrackFitter::Result*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_1008_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) dmtpc::analysis::TrackFitter::Result::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_1008_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) dmtpc::analysis::TrackFitter::Result::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_1008_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) dmtpc::analysis::TrackFitter::Result::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcAnalysisCint_1008_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) dmtpc::analysis::TrackFitter::Result::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DmtpcAnalysisCint_1008_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   dmtpc::analysis::TrackFitter::Result* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new dmtpc::analysis::TrackFitter::Result(*(dmtpc::analysis::TrackFitter::Result*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLTrackFittercLcLResult));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef dmtpc::analysis::TrackFitter::Result G__TdmtpccLcLanalysiscLcLTrackFittercLcLResult;
static int G__DmtpcAnalysisCint_1008_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (dmtpc::analysis::TrackFitter::Result*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((dmtpc::analysis::TrackFitter::Result*) (soff+(sizeof(dmtpc::analysis::TrackFitter::Result)*i)))->~G__TdmtpccLcLanalysiscLcLTrackFittercLcLResult();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (dmtpc::analysis::TrackFitter::Result*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((dmtpc::analysis::TrackFitter::Result*) (soff))->~G__TdmtpccLcLanalysiscLcLTrackFittercLcLResult();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DmtpcAnalysisCint_1008_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   dmtpc::analysis::TrackFitter::Result* dest = (dmtpc::analysis::TrackFitter::Result*) G__getstructoffset();
   *dest = *(dmtpc::analysis::TrackFitter::Result*) libp->para[0].ref;
   const dmtpc::analysis::TrackFitter::Result& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* dmtpc */

/* dmtpc::analysis */

/* dmtpc::analysis::AnalysisConfig */

/* dmtpc::analysis::cleanskim */

/* dmtpc::analysis::cleanskim::Config */

/* dmtpc::analysis::Cluster */

/* dmtpc::analysis::ClusterImage */

/* dmtpc::analysis::SkimDataset */

/* dmtpc::analysis::GainMap */

/* dmtpc::analysis::Stitcher */

/* dmtpc::analysis::SkimEvent */

/* dmtpc::analysis::clusteralgo */

/* dmtpc::analysis::GainTree */

/* dmtpc::analysis::HVLog */

/* dmtpc::analysis::MCTruth */

/* dmtpc::analysis::MCTPCDataset */

/* dmtpc::analysis::truthalgo */

/* dmtpc::analysis::Playlist */

/* dmtpc::analysis::TrackFitter */

/* dmtpc::analysis::TrackFitter::Param */

/* dmtpc::analysis::TrackFitter::Result */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncDmtpcAnalysisCint {
 public:
  G__Sizep2memfuncDmtpcAnalysisCint(): p(&G__Sizep2memfuncDmtpcAnalysisCint::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncDmtpcAnalysisCint::*p)();
};

size_t G__get_sizep2memfuncDmtpcAnalysisCint()
{
  G__Sizep2memfuncDmtpcAnalysisCint a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceDmtpcAnalysisCint() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLAnalysisConfig))) {
     dmtpc::analysis::AnalysisConfig *G__Lderived;
     G__Lderived=(dmtpc::analysis::AnalysisConfig*)0x1000;
     {
       dmtpc::core::Config *G__Lpbase=(dmtpc::core::Config*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLAnalysisConfig),G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLcorecLcLConfig),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLcleanskimcLcLConfig))) {
     dmtpc::analysis::cleanskim::Config *G__Lderived;
     G__Lderived=(dmtpc::analysis::cleanskim::Config*)0x1000;
     {
       dmtpc::core::Config *G__Lpbase=(dmtpc::core::Config*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLcleanskimcLcLConfig),G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLcorecLcLConfig),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLCluster))) {
     dmtpc::analysis::Cluster *G__Lderived;
     G__Lderived=(dmtpc::analysis::Cluster*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLCluster),G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLClusterImage))) {
     dmtpc::analysis::ClusterImage *G__Lderived;
     G__Lderived=(dmtpc::analysis::ClusterImage*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLClusterImage),G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLGainMap))) {
     dmtpc::analysis::GainMap *G__Lderived;
     G__Lderived=(dmtpc::analysis::GainMap*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLGainMap),G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLGainMap),G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLStitcher))) {
     dmtpc::analysis::Stitcher *G__Lderived;
     G__Lderived=(dmtpc::analysis::Stitcher*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLStitcher),G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLStitcher),G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLSkimEvent))) {
     dmtpc::analysis::SkimEvent *G__Lderived;
     G__Lderived=(dmtpc::analysis::SkimEvent*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLSkimEvent),G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableDmtpcAnalysisCint() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<unsigned>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<const char*>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEconstsPcharmUcOallocatorlEconstsPcharmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEconstsPcharmUcOallocatorlEconstsPcharmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEconstsPcharmUcOallocatorlEconstsPcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEconstsPcharmUcOallocatorlEconstsPcharmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEconstsPcharmUcOallocatorlEconstsPcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("bias_clean_method_t",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLcleanskimcLcLbias_clean_method_t),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLcleanskim));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("image_clean_method_t",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLcleanskimcLcLimage_clean_method_t),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLcleanskim));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("image_ratio_method_t",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLcleanskimcLcLimage_ratio_method_t),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLcleanskim));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("hist_save_type_t",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLcleanskimcLcLhist_save_type_t),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLcleanskim));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Cluster>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLanalysiscLcLClustercOallocatorlEdmtpccLcLanalysiscLcLClustergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLanalysiscLcLClustercOallocatorlEdmtpccLcLanalysiscLcLClustergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLanalysiscLcLClustercOallocatorlEdmtpccLcLanalysiscLcLClustergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLanalysiscLcLClustercOallocatorlEdmtpccLcLanalysiscLcLClustergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLanalysiscLcLClustercOallocatorlEdmtpccLcLanalysiscLcLClustergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<dmtpc::analysis::Cluster>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLanalysiscLcLClustercOallocatorlEdmtpccLcLanalysiscLcLClustergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Pulse>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLPulsecOallocatorlEdmtpccLcLwaveformcLcLPulsegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLwaveformcLcLPulsecOallocatorlEdmtpccLcLwaveformcLcLPulsegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLPulsecOallocatorlEdmtpccLcLwaveformcLcLPulsegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLwaveformcLcLPulsecOallocatorlEdmtpccLcLwaveformcLcLPulsegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLPulsecOallocatorlEdmtpccLcLwaveformcLcLPulsegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<dmtpc::waveform::Pulse>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLPulsecOallocatorlEdmtpccLcLwaveformcLcLPulsegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<SkimWaveform>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLSkimWaveformcOallocatorlEdmtpccLcLwaveformcLcLSkimWaveformgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLwaveformcLcLSkimWaveformcOallocatorlEdmtpccLcLwaveformcLcLSkimWaveformgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLSkimWaveformcOallocatorlEdmtpccLcLwaveformcLcLSkimWaveformgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLwaveformcLcLSkimWaveformcOallocatorlEdmtpccLcLwaveformcLcLSkimWaveformgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLSkimWaveformcOallocatorlEdmtpccLcLwaveformcLcLSkimWaveformgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<dmtpc::waveform::SkimWaveform>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLSkimWaveformcOallocatorlEdmtpccLcLwaveformcLcLSkimWaveformgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<CspPulse>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLCspPulsecOallocatorlEdmtpccLcLwaveformcLcLCspPulsegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLwaveformcLcLCspPulsecOallocatorlEdmtpccLcLwaveformcLcLCspPulsegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLCspPulsecOallocatorlEdmtpccLcLwaveformcLcLCspPulsegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLwaveformcLcLCspPulsecOallocatorlEdmtpccLcLwaveformcLcLCspPulsegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLCspPulsecOallocatorlEdmtpccLcLwaveformcLcLCspPulsegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<dmtpc::waveform::CspPulse>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLCspPulsecOallocatorlEdmtpccLcLwaveformcLcLCspPulsegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<CspWaveform>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLCspWaveformcOallocatorlEdmtpccLcLwaveformcLcLCspWaveformgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLwaveformcLcLCspWaveformcOallocatorlEdmtpccLcLwaveformcLcLCspWaveformgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLCspWaveformcOallocatorlEdmtpccLcLwaveformcLcLCspWaveformgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLwaveformcLcLCspWaveformcOallocatorlEdmtpccLcLwaveformcLcLCspWaveformgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLCspWaveformcOallocatorlEdmtpccLcLwaveformcLcLCspWaveformgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<dmtpc::waveform::CspWaveform>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLCspWaveformcOallocatorlEdmtpccLcLwaveformcLcLCspWaveformgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<FastPulse>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLFastPulsecOallocatorlEdmtpccLcLwaveformcLcLFastPulsegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLwaveformcLcLFastPulsecOallocatorlEdmtpccLcLwaveformcLcLFastPulsegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLFastPulsecOallocatorlEdmtpccLcLwaveformcLcLFastPulsegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLwaveformcLcLFastPulsecOallocatorlEdmtpccLcLwaveformcLcLFastPulsegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLFastPulsecOallocatorlEdmtpccLcLwaveformcLcLFastPulsegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<dmtpc::waveform::FastPulse>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLFastPulsecOallocatorlEdmtpccLcLwaveformcLcLFastPulsegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<FastWaveform>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLFastWaveformcOallocatorlEdmtpccLcLwaveformcLcLFastWaveformgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLwaveformcLcLFastWaveformcOallocatorlEdmtpccLcLwaveformcLcLFastWaveformgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLFastWaveformcOallocatorlEdmtpccLcLwaveformcLcLFastWaveformgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLwaveformcLcLFastWaveformcOallocatorlEdmtpccLcLwaveformcLcLFastWaveformgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLFastWaveformcOallocatorlEdmtpccLcLwaveformcLcLFastWaveformgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<dmtpc::waveform::FastWaveform>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLFastWaveformcOallocatorlEdmtpccLcLwaveformcLcLFastWaveformgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<PMTPulse>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLPMTPulsecOallocatorlEdmtpccLcLwaveformcLcLPMTPulsegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLwaveformcLcLPMTPulsecOallocatorlEdmtpccLcLwaveformcLcLPMTPulsegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLPMTPulsecOallocatorlEdmtpccLcLwaveformcLcLPMTPulsegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLwaveformcLcLPMTPulsecOallocatorlEdmtpccLcLwaveformcLcLPMTPulsegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLPMTPulsecOallocatorlEdmtpccLcLwaveformcLcLPMTPulsegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<dmtpc::waveform::PMTPulse>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLPMTPulsecOallocatorlEdmtpccLcLwaveformcLcLPMTPulsegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<PMTWaveform>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLPMTWaveformcOallocatorlEdmtpccLcLwaveformcLcLPMTWaveformgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLwaveformcLcLPMTWaveformcOallocatorlEdmtpccLcLwaveformcLcLPMTWaveformgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLPMTWaveformcOallocatorlEdmtpccLcLwaveformcLcLPMTWaveformgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLwaveformcLcLPMTWaveformcOallocatorlEdmtpccLcLwaveformcLcLPMTWaveformgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLPMTWaveformcOallocatorlEdmtpccLcLwaveformcLcLPMTWaveformgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<dmtpc::waveform::PMTWaveform>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLPMTWaveformcOallocatorlEdmtpccLcLwaveformcLcLPMTWaveformgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("BurninEncoded_t",104,-1,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysis));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("SparkRefEncoded_t",104,-1,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysis));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ClusterImage*>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLanalysiscLcLClusterImagemUcOallocatorlEdmtpccLcLanalysiscLcLClusterImagemUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLanalysiscLcLClusterImagemUcOallocatorlEdmtpccLcLanalysiscLcLClusterImagemUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLanalysiscLcLClusterImagemUcOallocatorlEdmtpccLcLanalysiscLcLClusterImagemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLanalysiscLcLClusterImagemUcOallocatorlEdmtpccLcLanalysiscLcLClusterImagemUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLanalysiscLcLClusterImagemUcOallocatorlEdmtpccLcLanalysiscLcLClusterImagemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<dmtpc::analysis::ClusterImage*>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLanalysiscLcLClusterImagemUcOallocatorlEdmtpccLcLanalysiscLcLClusterImagemUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<dmtpc::waveform::WaveformVector*>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLWaveformVectormUcOallocatorlEdmtpccLcLwaveformcLcLWaveformVectormUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLwaveformcLcLWaveformVectormUcOallocatorlEdmtpccLcLwaveformcLcLWaveformVectormUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLWaveformVectormUcOallocatorlEdmtpccLcLwaveformcLcLWaveformVectormUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLwaveformcLcLWaveformVectormUcOallocatorlEdmtpccLcLwaveformcLcLWaveformVectormUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLWaveformVectormUcOallocatorlEdmtpccLcLwaveformcLcLWaveformVectormUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<dmtpc::waveform::CspWfVector*>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLCspWfVectormUcOallocatorlEdmtpccLcLwaveformcLcLCspWfVectormUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLwaveformcLcLCspWfVectormUcOallocatorlEdmtpccLcLwaveformcLcLCspWfVectormUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLCspWfVectormUcOallocatorlEdmtpccLcLwaveformcLcLCspWfVectormUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLwaveformcLcLCspWfVectormUcOallocatorlEdmtpccLcLwaveformcLcLCspWfVectormUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLCspWfVectormUcOallocatorlEdmtpccLcLwaveformcLcLCspWfVectormUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<dmtpc::waveform::FastWfVector*>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLFastWfVectormUcOallocatorlEdmtpccLcLwaveformcLcLFastWfVectormUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLwaveformcLcLFastWfVectormUcOallocatorlEdmtpccLcLwaveformcLcLFastWfVectormUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLFastWfVectormUcOallocatorlEdmtpccLcLwaveformcLcLFastWfVectormUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLwaveformcLcLFastWfVectormUcOallocatorlEdmtpccLcLwaveformcLcLFastWfVectormUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLFastWfVectormUcOallocatorlEdmtpccLcLwaveformcLcLFastWfVectormUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<dmtpc::waveform::PMTWfVector*>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLPMTWfVectormUcOallocatorlEdmtpccLcLwaveformcLcLPMTWfVectormUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLwaveformcLcLPMTWfVectormUcOallocatorlEdmtpccLcLwaveformcLcLPMTWfVectormUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLPMTWfVectormUcOallocatorlEdmtpccLcLwaveformcLcLPMTWfVectormUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLwaveformcLcLPMTWfVectormUcOallocatorlEdmtpccLcLwaveformcLcLPMTWfVectormUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLPMTWfVectormUcOallocatorlEdmtpccLcLwaveformcLcLPMTWfVectormUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<BurninEncoded_t>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLSkimEvent));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::vector<BurninEncoded_t> >",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<BurninEncoded_t> >",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<unsigned int,allocator<unsigned int> > >",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::vector<std::vector<BurninEncoded_t> > >",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<vector<BurninEncoded_t> > >",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<vector<unsigned int,allocator<unsigned int> >,allocator<vector<unsigned int,allocator<unsigned int> > > > >",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::pair<int,int> >",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<int,int> >",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<int,int> >",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::vector<int> >",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<int> >",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<int,allocator<int> > >",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::vector<double> >",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<double> >",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<double,allocator<double> > >",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::vector<bool> >",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<bool> >",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<bool,allocator<bool> > >",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::vector<std::vector<double> > >",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<vector<double> > >",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > >",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TString>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETStringcOallocatorlETStringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TObjArray*>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*,less<string> >",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Image*>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLcorecLcLImagemUcOallocatorlEdmtpccLcLcorecLcLImagemUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLcorecLcLImagemUcOallocatorlEdmtpccLcLcorecLcLImagemUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLcorecLcLImagemUcOallocatorlEdmtpccLcLcorecLcLImagemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLcorecLcLImagemUcOallocatorlEdmtpccLcLcorecLcLImagemUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLcorecLcLImagemUcOallocatorlEdmtpccLcLcorecLcLImagemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<dmtpc::core::Image*>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLcorecLcLImagemUcOallocatorlEdmtpccLcLcorecLcLImagemUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TH2*>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH2mUcOallocatorlETH2mUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlETH2mUcOallocatorlETH2mUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH2mUcOallocatorlETH2mUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlETH2mUcOallocatorlETH2mUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH2mUcOallocatorlETH2mUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,unsigned>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,unsigned>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,unsigned int>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,unsigned int,less<string> >",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<dmtpc::analysis::BurninEncoded_t>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<dmtpc::analysis::BurninEncoded_t> >",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<vector<dmtpc::analysis::BurninEncoded_t> > >",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<vector<vector<vector<dmtpc::analysis::BurninEncoded_t> > >*>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_listlEvectorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRsPgRsPgRmUcOallocatorlEvectorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRsPgRsPgRmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<vector<vector<vector<unsigned int,allocator<unsigned int> >,allocator<vector<unsigned int,allocator<unsigned int> > > >,allocator<vector<vector<unsigned int,allocator<unsigned int> >,allocator<vector<unsigned int,allocator<unsigned int> > > > > >*>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_listlEvectorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRsPgRsPgRmUcOallocatorlEvectorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRsPgRsPgRmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<vector<pair<int,int> >*>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_listlEvectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgRmUcOallocatorlEvectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgRmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<vector<pair<int,int>,allocator<pair<int,int> > >*>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_listlEvectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgRmUcOallocatorlEvectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgRmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TChain*>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETChainmUcOallocatorlETChainmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlETChainmUcOallocatorlETChainmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETChainmUcOallocatorlETChainmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlETChainmUcOallocatorlETChainmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETChainmUcOallocatorlETChainmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<SkimEvent*>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLanalysiscLcLSkimEventmUcOallocatorlEdmtpccLcLanalysiscLcLSkimEventmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLanalysiscLcLSkimEventmUcOallocatorlEdmtpccLcLanalysiscLcLSkimEventmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLanalysiscLcLSkimEventmUcOallocatorlEdmtpccLcLanalysiscLcLSkimEventmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLanalysiscLcLSkimEventmUcOallocatorlEdmtpccLcLanalysiscLcLSkimEventmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLanalysiscLcLSkimEventmUcOallocatorlEdmtpccLcLanalysiscLcLSkimEventmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<dmtpc::analysis::SkimEvent*>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLanalysiscLcLSkimEventmUcOallocatorlEdmtpccLcLanalysiscLcLSkimEventmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::string>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::pair<double,double> >",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<double,double> >",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<double,double> >",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::vector<std::pair<double,double> > >",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRcOallocatorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<pair<double,double> > >",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRcOallocatorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRcOallocatorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRcOallocatorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRcOallocatorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRcOallocatorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<pair<double,double>,allocator<pair<double,double> > > >",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRcOallocatorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<std::vector<std::vector<std::pair<double,double> > > >",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_listlEvectorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRcOallocatorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRcOallocatorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<vector<vector<pair<double,double> > > >",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_listlEvectorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRcOallocatorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRcOallocatorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<vector<vector<pair<double,double>,allocator<pair<double,double> > >,allocator<vector<pair<double,double>,allocator<pair<double,double> > > > > >",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_listlEvectorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRcOallocatorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRcOallocatorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<std::vector<std::vector<std::vector<BurninEncoded_t> > >*>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_listlEvectorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRsPgRsPgRmUcOallocatorlEvectorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRsPgRsPgRmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<vector<vector<vector<BurninEncoded_t> > >*>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_listlEvectorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRsPgRsPgRmUcOallocatorlEvectorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRsPgRsPgRmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<std::vector<std::pair<int,int> >*>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_listlEvectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgRmUcOallocatorlEvectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgRmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<vector<pair<int,int> >*>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_listlEvectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgRmUcOallocatorlEvectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgRmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<TGraph>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_listlETGraphcOallocatorlETGraphgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TH1*>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlETH1mUcOallocatorlETH1mUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlETH1mUcOallocatorlETH1mUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TH2I*>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH2ImUcOallocatorlETH2ImUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlETH2ImUcOallocatorlETH2ImUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH2ImUcOallocatorlETH2ImUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlETH2ImUcOallocatorlETH2ImUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH2ImUcOallocatorlETH2ImUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TH1S*>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH1SmUcOallocatorlETH1SmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlETH1SmUcOallocatorlETH1SmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH1SmUcOallocatorlETH1SmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlETH1SmUcOallocatorlETH1SmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH1SmUcOallocatorlETH1SmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<uint32_t>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TH2F*>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH2FmUcOallocatorlETH2FmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlETH2FmUcOallocatorlETH2FmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH2FmUcOallocatorlETH2FmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlETH2FmUcOallocatorlETH2FmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH2FmUcOallocatorlETH2FmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<const TH2*>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEconstsPTH2mUcOallocatorlEconstsPTH2mUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEconstsPTH2mUcOallocatorlEconstsPTH2mUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEconstsPTH2mUcOallocatorlEconstsPTH2mUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEconstsPTH2mUcOallocatorlEconstsPTH2mUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEconstsPTH2mUcOallocatorlEconstsPTH2mUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TH2C*>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH2CmUcOallocatorlETH2CmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlETH2CmUcOallocatorlETH2CmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH2CmUcOallocatorlETH2CmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlETH2CmUcOallocatorlETH2CmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH2CmUcOallocatorlETH2CmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TH2D*>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH2DmUcOallocatorlETH2DmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlETH2DmUcOallocatorlETH2DmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH2DmUcOallocatorlETH2DmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlETH2DmUcOallocatorlETH2DmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH2DmUcOallocatorlETH2DmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TObjString>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETObjStringcOallocatorlETObjStringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlETObjStringcOallocatorlETObjStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETObjStringcOallocatorlETObjStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlETObjStringcOallocatorlETObjStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETObjStringcOallocatorlETObjStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<UInt_t,Int_t>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_pairlEunsignedsPintcOintgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::pair<UInt_t,Int_t> >",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<UInt_t,Int_t> >",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<unsigned int,int> >",117,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* dmtpc */
static void G__setup_memvardmtpc(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpc));
   {
   }
   G__tag_memvar_reset();
}


   /* dmtpc::analysis */
static void G__setup_memvardmtpccLcLanalysis(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysis));
   {
   }
   G__tag_memvar_reset();
}


   /* dmtpc::analysis::AnalysisConfig */
static void G__setup_memvardmtpccLcLanalysiscLcLAnalysisConfig(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLAnalysisConfig));
   { dmtpc::analysis::AnalysisConfig *p; p=(dmtpc::analysis::AnalysisConfig*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* dmtpc::analysis::cleanskim */
static void G__setup_memvardmtpccLcLanalysiscLcLcleanskim(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLcleanskim));
   {
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLcleanskimcLcLbias_clean_method_t),-1,-2,1,G__FastAllocString(2048).Format("BIAS_CLEAN_TRADITIONAL=%lldLL",(long long)dmtpc::analysis::cleanskim::BIAS_CLEAN_TRADITIONAL).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLcleanskimcLcLbias_clean_method_t),-1,-2,1,G__FastAllocString(2048).Format("BIAS_CLEAN_MEDIAN_STACK=%lldLL",(long long)dmtpc::analysis::cleanskim::BIAS_CLEAN_MEDIAN_STACK).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLcleanskimcLcLimage_clean_method_t),-1,-2,1,G__FastAllocString(2048).Format("IMAGE_CLEAN_TRADITIONAL=%lldLL",(long long)dmtpc::analysis::cleanskim::IMAGE_CLEAN_TRADITIONAL).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLcleanskimcLcLimage_clean_method_t),-1,-2,1,G__FastAllocString(2048).Format("IMAGE_CLEAN_BIAS_SUBTRACT_FIRST=%lldLL",(long long)dmtpc::analysis::cleanskim::IMAGE_CLEAN_BIAS_SUBTRACT_FIRST).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLcleanskimcLcLimage_clean_method_t),-1,-2,1,G__FastAllocString(2048).Format("IMAGE_CLEAN_MEDIAN_DIFFERENCE=%lldLL",(long long)dmtpc::analysis::cleanskim::IMAGE_CLEAN_MEDIAN_DIFFERENCE).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLcleanskimcLcLimage_ratio_method_t),-1,-2,1,G__FastAllocString(2048).Format("IMAGE_RATIO_MEAN=%lldLL",(long long)dmtpc::analysis::cleanskim::IMAGE_RATIO_MEAN).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLcleanskimcLcLimage_ratio_method_t),-1,-2,1,G__FastAllocString(2048).Format("IMAGE_RATIO_MEDIAN=%lldLL",(long long)dmtpc::analysis::cleanskim::IMAGE_RATIO_MEDIAN).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLcleanskimcLcLhist_save_type_t),-1,-2,1,G__FastAllocString(2048).Format("HIST_SAVE_TYPE_FLOAT=%lldLL",(long long)dmtpc::analysis::cleanskim::HIST_SAVE_TYPE_FLOAT).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLcleanskimcLcLhist_save_type_t),-1,-2,1,G__FastAllocString(2048).Format("HIST_SAVE_TYPE_SHORT=%lldLL",(long long)dmtpc::analysis::cleanskim::HIST_SAVE_TYPE_SHORT).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLcleanskimcLcLhist_save_type_t),-1,-2,1,G__FastAllocString(2048).Format("HIST_SAVE_TYPE_INT=%lldLL",(long long)dmtpc::analysis::cleanskim::HIST_SAVE_TYPE_INT).data(),0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* dmtpc::analysis::cleanskim::Config */
static void G__setup_memvardmtpccLcLanalysiscLcLcleanskimcLcLConfig(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLcleanskimcLcLConfig));
   { dmtpc::analysis::cleanskim::Config *p; p=(dmtpc::analysis::cleanskim::Config*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* dmtpc::analysis::Cluster */
static void G__setup_memvardmtpccLcLanalysiscLcLCluster(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLCluster));
   { dmtpc::analysis::Cluster *p; p=(dmtpc::analysis::Cluster*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->pixels)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,1,"pixels=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->reduced_pixels)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,1,"reduced_pixels=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->img)-(long)(p)),85,0,1,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH2),-1,-1,1,"img=",0,"!");
   G__memvar_setup((void*)((long)(&p->i)-(long)(p)),105,0,0,-1,-1,-1,1,"i=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* dmtpc::analysis::ClusterImage */
static void G__setup_memvardmtpccLcLanalysiscLcLClusterImage(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLClusterImage));
   { dmtpc::analysis::ClusterImage *p; p=(dmtpc::analysis::ClusterImage*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH2),-1,-1,4,"img=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLanalysiscLcLClustercOallocatorlEdmtpccLcLanalysiscLcLClustergRsPgR),G__defined_typename("vector<Cluster>"),-1,4,"clusters=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"time=",0,"in julian days past the J2000 epoch");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"image_rms=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* dmtpc::analysis::SkimDataset */
static void G__setup_memvardmtpccLcLanalysiscLcLSkimDataset(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLSkimDataset));
   { dmtpc::analysis::SkimDataset *p; p=(dmtpc::analysis::SkimDataset*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETChainmUcOallocatorlETChainmUgRsPgR),G__defined_typename("vector<TChain*>"),-1,4,"_trees=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLanalysiscLcLSkimEventmUcOallocatorlEdmtpccLcLanalysiscLcLSkimEventmUgRsPgR),G__defined_typename("vector<SkimEvent*>"),-1,4,"_events=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR),G__defined_typename("map<std::string,unsigned>"),-1,4,"_indices=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TFile),-1,-1,4,"_file=",0,"/< event file");
   G__memvar_setup((void*)0,85,2,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH2),-1,-1,4,"_biasFrames=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"_nevents=",0,"/<number of events");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TObjArray),-1,-1,4,"_gainMaps=",0,"/<TObjArray of gainMaps   ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TObjString),-1,-1,4,"_config=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"bias_loaded=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"nbias=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"current_index=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"orig_loaded=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLcorecLcLDataset),-1,-1,4,"d=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* dmtpc::analysis::GainMap */
static void G__setup_memvardmtpccLcLanalysiscLcLGainMap(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLGainMap));
   { dmtpc::analysis::GainMap *p; p=(dmtpc::analysis::GainMap*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH2F),-1,-1,4,"_gainMap=",0,"/< the actual gain map");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TObjArray),-1,-1,4,"_spacers=",0,"/< the array of spacers");
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"_nSpacers=",0,"/< the number of spacers");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH2F),-1,-1,4,"_error_estimate=",0,"! ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* dmtpc::analysis::Stitcher */
static void G__setup_memvardmtpccLcLanalysiscLcLStitcher(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLStitcher));
   { dmtpc::analysis::Stitcher *p; p=(dmtpc::analysis::Stitcher*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLStitchercLcLSCALE_METHOD),-1,-2,1,G__FastAllocString(2048).Format("FIXED=%lldLL",(long long)dmtpc::analysis::Stitcher::FIXED).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLStitchercLcLSCALE_METHOD),-1,-2,1,G__FastAllocString(2048).Format("INNER=%lldLL",(long long)dmtpc::analysis::Stitcher::INNER).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLStitchercLcLSCALE_METHOD),-1,-2,1,G__FastAllocString(2048).Format("OUTER=%lldLL",(long long)dmtpc::analysis::Stitcher::OUTER).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLStitchercLcLSCALE_METHOD),-1,-2,1,G__FastAllocString(2048).Format("BOTH=%lldLL",(long long)dmtpc::analysis::Stitcher::BOTH).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"_isInit=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,4,"_nImages=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_edge_low_thresh=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_edge_high_thresh=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_edge_blur_level=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"_min_edge_neighbors=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_img_high_thresh=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"_linear_hough_r_bins=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"_linear_hough_theta_bins=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"_linear_hough_min_votes=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_spacer_join_theta_thresh=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_spacer_join_r_thresh=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"_nbins_first_pass[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"_nbins_second_pass[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_mins_first_pass[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_maxs_first_pass[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_nwidths_second_pass=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"_median_nbins=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"_median_niter=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLStitchercLcLSCALE_METHOD),-1,-1,4,"scaleMethod=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"_led=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_led_thresh=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_led_border=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_spacer_theta_thresh=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"_nspectr_peaks=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,4,"_xCenters=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,4,"_yCenters=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,4,"_innerRadius=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,4,"_outerRadius=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,4,"_weights=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<std::vector<double> >"),-1,4,"_spacers_r=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<std::vector<double> >"),-1,4,"_spacers_theta=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,4,"_rotations=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,4,"_scales=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLimagecLcLStitchInfo),-1,-1,4,"_stitch_info_1024=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLimagecLcLStitchInfo),-1,-1,4,"_stitch_info_512=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLimagecLcLStitchInfo),-1,-1,4,"_stitch_info_256=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLimagecLcLStitchInfo),-1,-1,4,"_stitch_info_other=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH2FmUcOallocatorlETH2FmUgRsPgR),G__defined_typename("vector<TH2F*>"),-1,4,"medianed=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH2CmUcOallocatorlETH2CmUgRsPgR),G__defined_typename("vector<TH2C*>"),-1,4,"edges=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH2DmUcOallocatorlETH2DmUgRsPgR),G__defined_typename("vector<TH2D*>"),-1,4,"polars=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR),G__defined_typename("vector<TH1*>"),-1,4,"rprojs=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH2FmUcOallocatorlETH2FmUgRsPgR),G__defined_typename("vector<TH2F*>"),-1,4,"orig=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETObjStringcOallocatorlETObjStringgRsPgR),G__defined_typename("vector<TObjString>"),-1,4,"_serials=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLimagecLcLLensCorrection),-1,-1,4,"_lens=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* dmtpc::analysis::SkimEvent */
static void G__setup_memvardmtpccLcLanalysiscLcLSkimEvent(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLSkimEvent));
   { dmtpc::analysis::SkimEvent *p; p=(dmtpc::analysis::SkimEvent*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"_eventNumber=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"_index=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"_runNumber=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"_ncamera=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"_stitched=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"_s3=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"_s4=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),G__defined_typename("vector<std::vector<int> >"),-1,4,"_burnin_base=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),G__defined_typename("vector<std::vector<int> >"),-1,4,"_burnin_this_index=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),G__defined_typename("vector<std::vector<int> >"),-1,4,"_nburnin=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<std::vector<double> >"),-1,4,"_theta=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<std::vector<double> >"),-1,4,"_range=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<std::vector<double> >"),-1,4,"_diffusedRange=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<std::vector<double> >"),-1,4,"_phi=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<std::vector<double> >"),-1,4,"_majoraxis=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<std::vector<double> >"),-1,4,"_minoraxis=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<std::vector<double> >"),-1,4,"_E=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<std::vector<double> >"),-1,4,"_EGainMap=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<std::vector<double> >"),-1,4,"_r=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<std::vector<double> >"),-1,4,"_x=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<std::vector<double> >"),-1,4,"_y=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<std::vector<double> >"),-1,4,"_skewness=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgR),G__defined_typename("vector<std::vector<bool> >"),-1,4,"_edge=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<std::vector<double> >"),-1,4,"_cluster_mean=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<std::vector<double> >"),-1,4,"_cluster_rms=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),G__defined_typename("vector<std::vector<int> >"),-1,4,"_neighbors=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<std::vector<double> >"),-1,4,"_maxpixel=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<std::vector<double> >"),-1,4,"_cygnus_angle=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),G__defined_typename("vector<std::vector<int> >"),-1,4,"_npixel=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),G__defined_typename("vector<std::vector<int> >"),-1,4,"_npixel_red=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR),G__defined_typename("vector<std::vector<std::vector<double> > >"),-1,4,"_moments=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR),G__defined_typename("vector<std::vector<std::vector<double> > >"),-1,4,"_transverse_moments=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<std::vector<double> >"),-1,4,"_ra=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<std::vector<double> >"),-1,4,"_dec=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<std::vector<double> >"),-1,4,"_glat=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<std::vector<double> >"),-1,4,"_glon=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<std::vector<double> >"),-1,4,"_inactive=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<std::vector<double> >"),-1,4,"_crossing=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,4,"_ntracks=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEboolcOallocatorlEboolgRsPgR),G__defined_typename("vector<bool>"),-1,4,"_spark=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,4,"_lastspark=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,4,"_integral=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,4,"_image_mean=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,4,"_pixels_killed=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,4,"_image_rms=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,4,"_nsparkref=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,4,"_sparkref_base=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETStringcOallocatorlETStringgRsPgR),G__defined_typename("vector<TString>"),-1,4,"_cameraSerialNumber=",0,(char*)NULL);
   G__memvar_setup((void*)0,72,0,0,-1,G__defined_typename("UInt_t"),-1,4,"_burnin=",0,"[_s3] ");
   G__memvar_setup((void*)0,72,0,0,-1,G__defined_typename("UInt_t"),-1,4,"_sparkref=",0,"[_s4]");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLWaveformVectormUcOallocatorlEdmtpccLcLwaveformcLcLWaveformVectormUgRsPgR),G__defined_typename("vector<dmtpc::waveform::WaveformVector*>"),-1,4,"_waveform_vectors=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLCspWfVectormUcOallocatorlEdmtpccLcLwaveformcLcLCspWfVectormUgRsPgR),G__defined_typename("vector<dmtpc::waveform::CspWfVector*>"),-1,4,"_cspwf_vectors=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLFastWfVectormUcOallocatorlEdmtpccLcLwaveformcLcLFastWfVectormUgRsPgR),G__defined_typename("vector<dmtpc::waveform::FastWfVector*>"),-1,4,"_fastwf_vectors=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLPMTWfVectormUcOallocatorlEdmtpccLcLwaveformcLcLPMTWfVectormUgRsPgR),G__defined_typename("vector<dmtpc::waveform::PMTWfVector*>"),-1,4,"_pmtwf_vectors=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLanalysiscLcLClusterImagemUcOallocatorlEdmtpccLcLanalysiscLcLClusterImagemUgRsPgR),G__defined_typename("vector<ClusterImage*>"),-1,4,"_clusters=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<std::vector<double> >"),-1,4,"_nearest_spacer_distance=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),G__defined_typename("vector<std::vector<int> >"),-1,4,"_nearest_spacer=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* dmtpc::analysis::clusteralgo */
static void G__setup_memvardmtpccLcLanalysiscLcLclusteralgo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLclusteralgo));
   {
   }
   G__tag_memvar_reset();
}


   /* dmtpc::analysis::GainTree */
static void G__setup_memvardmtpccLcLanalysiscLcLGainTree(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLGainTree));
   { dmtpc::analysis::GainTree *p; p=(dmtpc::analysis::GainTree*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,104,0,1,-1,-1,-2,1,G__FastAllocString(2048).Format("MAX_NCH=%lluULL",(unsigned long long)dmtpc::analysis::GainTree::MAX_NCH).data(),0,"4 quadrants");
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,-1,-2,1,G__FastAllocString(2048).Format("nbins_peak=%lldLL",(long long)dmtpc::analysis::GainTree::nbins_peak).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,-1,-2,1,G__FastAllocString(2048).Format("min_peak=%lldLL",(long long)dmtpc::analysis::GainTree::min_peak).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,-1,-2,1,G__FastAllocString(2048).Format("max_peak=%lldLL",(long long)dmtpc::analysis::GainTree::max_peak).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,-1,-2,1,G__FastAllocString(2048).Format("nbins_rms=%lldLL",(long long)dmtpc::analysis::GainTree::nbins_rms).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,-1,-2,1,G__FastAllocString(2048).Format("min_rms=%lldLL",(long long)dmtpc::analysis::GainTree::min_rms).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,-1,-2,1,G__FastAllocString(2048).Format("max_rms=%lldLL",(long long)dmtpc::analysis::GainTree::max_rms).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,-1,-2,1,G__FastAllocString(2048).Format("nbins_base=%lldLL",(long long)dmtpc::analysis::GainTree::nbins_base).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,-1,-2,1,G__FastAllocString(2048).Format("min_base=%lldLL",(long long)dmtpc::analysis::GainTree::min_base).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,-1,-2,1,G__FastAllocString(2048).Format("max_base=%lldLL",(long long)dmtpc::analysis::GainTree::max_base).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,-1,-2,1,G__FastAllocString(2048).Format("nbins_trace=%lldLL",(long long)dmtpc::analysis::GainTree::nbins_trace).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,-1,-2,1,G__FastAllocString(2048).Format("min_trace=%lldLL",(long long)dmtpc::analysis::GainTree::min_trace).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,-1,-2,1,G__FastAllocString(2048).Format("max_trace=%lldLL",(long long)dmtpc::analysis::GainTree::max_trace).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,-1,-2,1,G__FastAllocString(2048).Format("nbins_integral=%lldLL",(long long)dmtpc::analysis::GainTree::nbins_integral).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,-1,-2,1,G__FastAllocString(2048).Format("min_integral=%lldLL",(long long)dmtpc::analysis::GainTree::min_integral).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,-1,-2,1,G__FastAllocString(2048).Format("max_integral=%lldLL",(long long)dmtpc::analysis::GainTree::max_integral).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,-1,-2,1,G__FastAllocString(2048).Format("nbins_time=%lldLL",(long long)dmtpc::analysis::GainTree::nbins_time).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,-1,-2,1,G__FastAllocString(2048).Format("min_time=%lldLL",(long long)dmtpc::analysis::GainTree::min_time).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,-1,-2,1,G__FastAllocString(2048).Format("max_time=%lldLL",(long long)dmtpc::analysis::GainTree::max_time).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,-1,-2,1,G__FastAllocString(2048).Format("nbins_peakRatio=%lldLL",(long long)dmtpc::analysis::GainTree::nbins_peakRatio).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,-1,-2,1,G__FastAllocString(2048).Format("min_peakRatio=%lldLL",(long long)dmtpc::analysis::GainTree::min_peakRatio).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,-1,-2,1,G__FastAllocString(2048).Format("max_peakRatio=%lldLL",(long long)dmtpc::analysis::GainTree::max_peakRatio).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BaseMean)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"BaseMean=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BaseSigma)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"BaseSigma=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->RmsMean)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"RmsMean=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->RmsSigma)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"RmsSigma=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->PeakBinMean)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"PeakBinMean=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->PeakBinSigma)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"PeakBinSigma=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->StartBinMean)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"StartBinMean=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->StartBinSigma)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"StartBinSigma=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->PeakStartDiffMean)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"PeakStartDiffMean=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->PeakStartDiffSigma)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"PeakStartDiffSigma=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hPeak)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH1D),-1,-1,1,"hPeak=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hRMS)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH1D),-1,-1,1,"hRMS=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hBase)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH1D),-1,-1,1,"hBase=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hPeakBin)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH1D),-1,-1,1,"hPeakBin=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hStartBin)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH1D),-1,-1,1,"hStartBin=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hEndBin)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH1D),-1,-1,1,"hEndBin=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hIntegral)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH1D),-1,-1,1,"hIntegral=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hPeakStartDiff)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH1D),-1,-1,1,"hPeakStartDiff=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hIntegralOverR10)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH1D),-1,-1,1,"hIntegralOverR10=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hR10)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH1D),-1,-1,1,"hR10=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hR25)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH1D),-1,-1,1,"hR25=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hR50)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH1D),-1,-1,1,"hR50=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hR75)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH1D),-1,-1,1,"hR75=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hR90)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH1D),-1,-1,1,"hR90=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hF10)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH1D),-1,-1,1,"hF10=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hF25)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH1D),-1,-1,1,"hF25=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hF50)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH1D),-1,-1,1,"hF50=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hF75)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH1D),-1,-1,1,"hF75=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hF90)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH1D),-1,-1,1,"hF90=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hPeak_cuts)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH1D),-1,-1,1,"hPeak_cuts=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hRMS_cuts)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH1D),-1,-1,1,"hRMS_cuts=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hBase_cuts)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH1D),-1,-1,1,"hBase_cuts=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hPeakBin_cuts)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH1D),-1,-1,1,"hPeakBin_cuts=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hStartBin_cuts)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH1D),-1,-1,1,"hStartBin_cuts=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hEndBin_cuts)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH1D),-1,-1,1,"hEndBin_cuts=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hIntegral_cuts)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH1D),-1,-1,1,"hIntegral_cuts=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hPeakStartDiff_cuts)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH1D),-1,-1,1,"hPeakStartDiff_cuts=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hIntegralOverR10_cuts)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH1D),-1,-1,1,"hIntegralOverR10_cuts=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hR10_cuts)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH1D),-1,-1,1,"hR10_cuts=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hR25_cuts)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH1D),-1,-1,1,"hR25_cuts=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hR50_cuts)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH1D),-1,-1,1,"hR50_cuts=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hR75_cuts)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH1D),-1,-1,1,"hR75_cuts=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hR90_cuts)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH1D),-1,-1,1,"hR90_cuts=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hF10_cuts)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH1D),-1,-1,1,"hF10_cuts=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hF25_cuts)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH1D),-1,-1,1,"hF25_cuts=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hF50_cuts)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH1D),-1,-1,1,"hF50_cuts=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hF75_cuts)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH1D),-1,-1,1,"hF75_cuts=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hF90_cuts)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH1D),-1,-1,1,"hF90_cuts=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hPeak_nobias)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH1D),-1,-1,1,"hPeak_nobias=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hBase_nobias)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH1D),-1,-1,1,"hBase_nobias=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hRMS_nobias)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH1D),-1,-1,1,"hRMS_nobias=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hPeakBin_nobias)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH1D),-1,-1,1,"hPeakBin_nobias=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hStartBin_nobias)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH1D),-1,-1,1,"hStartBin_nobias=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hEndBin_nobias)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH1D),-1,-1,1,"hEndBin_nobias=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hIntegral_nobias)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH1D),-1,-1,1,"hIntegral_nobias=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hPeakStartDiff_nobias)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH1D),-1,-1,1,"hPeakStartDiff_nobias=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hIntegralOverR10_nobias)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH1D),-1,-1,1,"hIntegralOverR10_nobias=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vhPeak)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR),G__defined_typename("vector<TH1*>"),-1,1,"vhPeak=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vhRMS)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR),G__defined_typename("vector<TH1*>"),-1,1,"vhRMS=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vhBase)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR),G__defined_typename("vector<TH1*>"),-1,1,"vhBase=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vhPeakBin)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR),G__defined_typename("vector<TH1*>"),-1,1,"vhPeakBin=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vhStartBin)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR),G__defined_typename("vector<TH1*>"),-1,1,"vhStartBin=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vhEndBin)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR),G__defined_typename("vector<TH1*>"),-1,1,"vhEndBin=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vhIntegral)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR),G__defined_typename("vector<TH1*>"),-1,1,"vhIntegral=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vhPeakStartDiff)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR),G__defined_typename("vector<TH1*>"),-1,1,"vhPeakStartDiff=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vhIntegralOverR10)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR),G__defined_typename("vector<TH1*>"),-1,1,"vhIntegralOverR10=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vhR10)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR),G__defined_typename("vector<TH1*>"),-1,1,"vhR10=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vhR25)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR),G__defined_typename("vector<TH1*>"),-1,1,"vhR25=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vhR50)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR),G__defined_typename("vector<TH1*>"),-1,1,"vhR50=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vhR75)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR),G__defined_typename("vector<TH1*>"),-1,1,"vhR75=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vhR90)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR),G__defined_typename("vector<TH1*>"),-1,1,"vhR90=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vhF10)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR),G__defined_typename("vector<TH1*>"),-1,1,"vhF10=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vhF25)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR),G__defined_typename("vector<TH1*>"),-1,1,"vhF25=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vhF50)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR),G__defined_typename("vector<TH1*>"),-1,1,"vhF50=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vhF75)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR),G__defined_typename("vector<TH1*>"),-1,1,"vhF75=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vhF90)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR),G__defined_typename("vector<TH1*>"),-1,1,"vhF90=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vhPeak_cuts)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR),G__defined_typename("vector<TH1*>"),-1,1,"vhPeak_cuts=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vhRMS_cuts)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR),G__defined_typename("vector<TH1*>"),-1,1,"vhRMS_cuts=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vhBase_cuts)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR),G__defined_typename("vector<TH1*>"),-1,1,"vhBase_cuts=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vhPeakBin_cuts)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR),G__defined_typename("vector<TH1*>"),-1,1,"vhPeakBin_cuts=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vhStartBin_cuts)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR),G__defined_typename("vector<TH1*>"),-1,1,"vhStartBin_cuts=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vhEndBin_cuts)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR),G__defined_typename("vector<TH1*>"),-1,1,"vhEndBin_cuts=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vhIntegral_cuts)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR),G__defined_typename("vector<TH1*>"),-1,1,"vhIntegral_cuts=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vhPeakStartDiff_cuts)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR),G__defined_typename("vector<TH1*>"),-1,1,"vhPeakStartDiff_cuts=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vhIntegralOverR10_cuts)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR),G__defined_typename("vector<TH1*>"),-1,1,"vhIntegralOverR10_cuts=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vhR10_cuts)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR),G__defined_typename("vector<TH1*>"),-1,1,"vhR10_cuts=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vhR25_cuts)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR),G__defined_typename("vector<TH1*>"),-1,1,"vhR25_cuts=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vhR50_cuts)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR),G__defined_typename("vector<TH1*>"),-1,1,"vhR50_cuts=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vhR75_cuts)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR),G__defined_typename("vector<TH1*>"),-1,1,"vhR75_cuts=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vhR90_cuts)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR),G__defined_typename("vector<TH1*>"),-1,1,"vhR90_cuts=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vhF10_cuts)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR),G__defined_typename("vector<TH1*>"),-1,1,"vhF10_cuts=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vhF25_cuts)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR),G__defined_typename("vector<TH1*>"),-1,1,"vhF25_cuts=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vhF50_cuts)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR),G__defined_typename("vector<TH1*>"),-1,1,"vhF50_cuts=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vhF75_cuts)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR),G__defined_typename("vector<TH1*>"),-1,1,"vhF75_cuts=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vhF90_cuts)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR),G__defined_typename("vector<TH1*>"),-1,1,"vhF90_cuts=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vhPeak_nobias)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR),G__defined_typename("vector<TH1*>"),-1,1,"vhPeak_nobias=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vhBase_nobias)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR),G__defined_typename("vector<TH1*>"),-1,1,"vhBase_nobias=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vhRMS_nobias)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR),G__defined_typename("vector<TH1*>"),-1,1,"vhRMS_nobias=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vhPeakBin_nobias)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR),G__defined_typename("vector<TH1*>"),-1,1,"vhPeakBin_nobias=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vhStartBin_nobias)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR),G__defined_typename("vector<TH1*>"),-1,1,"vhStartBin_nobias=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vhEndBin_nobias)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR),G__defined_typename("vector<TH1*>"),-1,1,"vhEndBin_nobias=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vhIntegral_nobias)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR),G__defined_typename("vector<TH1*>"),-1,1,"vhIntegral_nobias=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vhPeakStartDiff_nobias)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR),G__defined_typename("vector<TH1*>"),-1,1,"vhPeakStartDiff_nobias=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vhIntegralOverR10_nobias)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR),G__defined_typename("vector<TH1*>"),-1,1,"vhIntegralOverR10_nobias=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hPeakBin_Peak)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH2F),-1,-1,1,"hPeakBin_Peak=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hPeakBin_Peak_cuts)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH2F),-1,-1,1,"hPeakBin_Peak_cuts=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hXtalk_Peak_Peak)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH2F),-1,-1,1,"hXtalk_Peak_Peak=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hXtalk_Peak_Peak_cuts)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH2F),-1,-1,1,"hXtalk_Peak_Peak_cuts=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hXtalk_DeltaT_PeakRatio)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH2F),-1,-1,1,"hXtalk_DeltaT_PeakRatio=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hXtalk_DeltaT_PeakRatio_cuts)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH2F),-1,-1,1,"hXtalk_DeltaT_PeakRatio_cuts=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* dmtpc::analysis::HVLog */
static void G__setup_memvardmtpccLcLanalysiscLcLHVLog(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLHVLog));
   { dmtpc::analysis::HVLog *p; p=(dmtpc::analysis::HVLog*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,4,"imon=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,4,"vmon=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,4,"vset=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,4,"imon_time=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,4,"vmon_time=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,4,"vset_time=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* dmtpc::analysis::MCTruth */
static void G__setup_memvardmtpccLcLanalysiscLcLMCTruth(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLMCTruth));
   { dmtpc::analysis::MCTruth *p; p=(dmtpc::analysis::MCTruth*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->recoilEnergy)-(long)(p)),100,0,0,-1,-1,-1,1,"recoilEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->x0)-(long)(p)),100,0,0,-1,-1,-1,1,"x0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->y0)-(long)(p)),100,0,0,-1,-1,-1,1,"y0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->z0)-(long)(p)),100,0,0,-1,-1,-1,1,"z0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->time)-(long)(p)),100,0,0,-1,-1,-1,1,"time=",0,"unix time + fraction");
   G__memvar_setup((void*)((long)(&p->dx)-(long)(p)),100,0,0,-1,-1,-1,1,"dx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dy)-(long)(p)),100,0,0,-1,-1,-1,1,"dy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dz)-(long)(p)),100,0,0,-1,-1,-1,1,"dz=",0,"recoil direction");
   G__memvar_setup((void*)((long)(&p->species)-(long)(p)),105,0,0,-1,-1,-1,1,"species=",0,"Z  of element (He = 2, C = 6, F = 9, 0 = gamma, -1 = electron)");
   G__memvar_setup((void*)((long)(&p->pdx)-(long)(p)),100,0,0,-1,-1,-1,1,"pdx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pdy)-(long)(p)),100,0,0,-1,-1,-1,1,"pdy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pdz)-(long)(p)),100,0,0,-1,-1,-1,1,"pdz=",0,"incident particle direction, if any");
   G__memvar_setup((void*)((long)(&p->pE)-(long)(p)),100,0,0,-1,-1,-1,1,"pE=",0,"incident particle energy, if any ");
   G__memvar_setup((void*)((long)(&p->cosThetaCM)-(long)(p)),100,0,0,-1,-1,-1,1,"cosThetaCM=",0,"center of mass scattering angle, if any  (-2 if not set) ");
   G__memvar_setup((void*)((long)(&p->sdx)-(long)(p)),100,0,0,-1,-1,-1,1,"sdx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sdy)-(long)(p)),100,0,0,-1,-1,-1,1,"sdy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sdz)-(long)(p)),100,0,0,-1,-1,-1,1,"sdz=",0,"source direction, if any");
   G__memvar_setup((void*)((long)(&p->ionization)-(long)(p)),100,0,0,-1,-1,-1,1,"ionization=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nprimary)-(long)(p)),105,0,0,-1,-1,-1,1,"nprimary=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->primary_electron_x)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"primary_electron_x=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->primary_electron_y)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"primary_electron_y=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->primary_electron_z)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"primary_electron_z=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->diffused_electron_x)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"diffused_electron_x=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->diffused_electron_y)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"diffused_electron_y=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->diffused_electron_z)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"diffused_electron_z=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->avalanche_visible_photon_xy)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH2I),-1,-1,1,"avalanche_visible_photon_xy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->avalanche_visible_photon_t)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH1I),-1,-1,1,"avalanche_visible_photon_t=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ne_in_avalanche)-(long)(p)),107,0,0,-1,G__defined_typename("uint64_t"),-1,1,"ne_in_avalanche=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nphotons_from_avalanche)-(long)(p)),107,0,0,-1,G__defined_typename("uint64_t"),-1,1,"nphotons_from_avalanche=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nvisible_photons_from_avalanche)-(long)(p)),107,0,0,-1,G__defined_typename("uint64_t"),-1,1,"nvisible_photons_from_avalanche=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->truth_images)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH2ImUcOallocatorlETH2ImUgRsPgR),G__defined_typename("vector<TH2I*>"),-1,1,"truth_images=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->truth_traces)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlETH1SmUcOallocatorlETH1SmUgRsPgR),G__defined_typename("vector<TH1S*>"),-1,1,"truth_traces=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nphoton)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,1,"nphoton=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nadu)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,1,"nadu=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nadu_raw)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,1,"nadu_raw=",0,"nadu with no gain map ");
   G__memvar_setup((void*)((long)(&p->rotation)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"rotation=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xoffsets)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"xoffsets=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->yoffsets)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"yoffsets=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xscale)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"xscale=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->yscale)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"yscale=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->noise)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"noise=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->conversion_gain)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"conversion_gain=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pressure)-(long)(p)),100,0,0,-1,-1,-1,1,"pressure=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->edge)-(long)(p)),103,0,0,-1,-1,-1,1,"edge=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pM)-(long)(p)),100,0,0,-1,-1,-1,1,"pM=",0,"incident particle mass");
   G__memvar_setup((void*)((long)(&p->individual_avalanche_gain)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),G__defined_typename("vector<uint32_t>"),-1,1,"individual_avalanche_gain=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* dmtpc::analysis::MCTPCDataset */
static void G__setup_memvardmtpccLcLanalysiscLcLMCTPCDataset(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLMCTPCDataset));
   { dmtpc::analysis::MCTPCDataset *p; p=(dmtpc::analysis::MCTPCDataset*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLMCTruth),-1,-1,4,"truthptr=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TTree),-1,-1,4,"tree=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TFile),-1,-1,4,"f=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* dmtpc::analysis::truthalgo */
static void G__setup_memvardmtpccLcLanalysiscLcLtruthalgo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLtruthalgo));
   {
   }
   G__tag_memvar_reset();
}


   /* dmtpc::analysis::Playlist */
static void G__setup_memvardmtpccLcLanalysiscLcLPlaylist(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLPlaylist));
   { dmtpc::analysis::Playlist *p; p=(dmtpc::analysis::Playlist*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLPlaylistcLcLTYPE),-1,-2,1,G__FastAllocString(2048).Format("SKIM=%lldLL",(long long)dmtpc::analysis::Playlist::SKIM).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLPlaylistcLcLTYPE),-1,-2,1,G__FastAllocString(2048).Format("RAW=%lldLL",(long long)dmtpc::analysis::Playlist::RAW).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"i=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_string),-1,-1,4,"current_det=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"current_run=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLSkimDataset),-1,-1,4,"cur_dataset=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLcorecLcLDataset),-1,-1,4,"cur_raw_dataset=",0,(char*)NULL);
   G__memvar_setup((void*)0,67,0,0,-1,-1,-1,4,"data_dir=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLPlaylistcLcLTYPE),-1,-1,4,"type=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TTree),-1,-1,4,"_tree=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEstringcOallocatorlEstringgRsPgR),G__defined_typename("vector<string>"),-1,4,"det_tags=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,4,"run_nums=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,4,"events=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,4,"cams=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,4,"tracks=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* dmtpc::analysis::TrackFitter */
static void G__setup_memvardmtpccLcLanalysiscLcLTrackFitter(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLTrackFitter));
   { dmtpc::analysis::TrackFitter *p; p=(dmtpc::analysis::TrackFitter*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,107,0,1,-1,G__defined_typename("size_t"),-2,1,G__FastAllocString(2048).Format("NPAR=%lluULL",(unsigned long long)dmtpc::analysis::TrackFitter::NPAR).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,-1,-2,1,G__FastAllocString(2048).Format("PAR_E=%lldLL",(long long)dmtpc::analysis::TrackFitter::PAR_E).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,-1,-2,1,G__FastAllocString(2048).Format("PAR_X0=%lldLL",(long long)dmtpc::analysis::TrackFitter::PAR_X0).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,-1,-2,1,G__FastAllocString(2048).Format("PAR_Y0=%lldLL",(long long)dmtpc::analysis::TrackFitter::PAR_Y0).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,-1,-2,1,G__FastAllocString(2048).Format("PAR_PHI=%lldLL",(long long)dmtpc::analysis::TrackFitter::PAR_PHI).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,-1,-2,1,G__FastAllocString(2048).Format("PAR_Z0=%lldLL",(long long)dmtpc::analysis::TrackFitter::PAR_Z0).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,-1,-2,1,G__FastAllocString(2048).Format("PAR_DELTA_Z=%lldLL",(long long)dmtpc::analysis::TrackFitter::PAR_DELTA_Z).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,-1,-2,1,G__FastAllocString(2048).Format("PAR_SIGMA2=%lldLL",(long long)dmtpc::analysis::TrackFitter::PAR_SIGMA2).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,-1,-2,1,G__FastAllocString(2048).Format("PAR_SECOND_WIDTH=%lldLL",(long long)dmtpc::analysis::TrackFitter::PAR_SECOND_WIDTH).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,-1,-2,1,G__FastAllocString(2048).Format("PAR_SECOND_WIDTH_RATIO=%lldLL",(long long)dmtpc::analysis::TrackFitter::PAR_SECOND_WIDTH_RATIO).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLTrackFittercLcLPARTICLE),-1,-2,1,G__FastAllocString(2048).Format("ALPHA=%lldLL",(long long)dmtpc::analysis::TrackFitter::ALPHA).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLTrackFittercLcLPARTICLE),-1,-2,1,G__FastAllocString(2048).Format("FLUORINE=%lldLL",(long long)dmtpc::analysis::TrackFitter::FLUORINE).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLTrackFittercLcLPARTICLE),-1,-2,1,G__FastAllocString(2048).Format("CARBON=%lldLL",(long long)dmtpc::analysis::TrackFitter::CARBON).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_ROOTcLcLMathcLcLMinimizer),-1,-1,4,"min=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_ROOTcLcLMathcLcLFunctor),-1,-1,4,"minfn=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"gain=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"lengthcal=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"use_gainmap_error=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH2),-1,-1,4,"gainMap=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH2),-1,-1,4,"gainMap_blurred=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"min_gain=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLTrackFittercLcLResult),-1,-1,4,"result=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TF2),-1,-1,4,"fitfn=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_ROOTcLcLMathcLcLWrappedMultiFunctionlETF2aNgR),-1,-1,4,"wrapped_fitfn=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_ROOTcLcLMathcLcLAdaptiveIntegratorMultiDim),-1,-1,4,"fit_integrator=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLphysicscLcLSRIMTable),-1,-1,4,"srim=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TCanvas),-1,-1,4,"canvas=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"minheight=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"maxheight=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"binwidth=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"read_noise=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH2),-1,-1,4,"fithist=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH2),-1,-1,4,"local_gainmap=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH2),-1,-1,4,"local_gainmap_e=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"padding=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"force_decreasing=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"zero_out=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"verbose=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"draw=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"do_integral=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"do_likelihood=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"likelihood_flip=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"integral_abstol=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"integral_reltol=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"integral_nsigma=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"integral_ncalls=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"always_minos=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"minos_thresh=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"conversion_gain=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TArrow),-1,-1,4,"arrow=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,4,"fitter_id=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"quickeval=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"enable_cauchy=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"enable_second_gaus=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* dmtpc::analysis::TrackFitter::Param */
static void G__setup_memvardmtpccLcLanalysiscLcLTrackFittercLcLParam(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLTrackFittercLcLParam));
   { dmtpc::analysis::TrackFitter::Param *p; p=(dmtpc::analysis::TrackFitter::Param*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->val)-(long)(p)),100,0,0,-1,-1,-1,1,"val=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->err)-(long)(p)),100,0,0,-1,-1,-1,1,"err=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->errUp)-(long)(p)),100,0,0,-1,-1,-1,1,"errUp=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->errDn)-(long)(p)),100,0,0,-1,-1,-1,1,"errDn=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* dmtpc::analysis::TrackFitter::Result */
static void G__setup_memvardmtpccLcLanalysiscLcLTrackFittercLcLResult(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLTrackFittercLcLResult));
   { dmtpc::analysis::TrackFitter::Result *p; p=(dmtpc::analysis::TrackFitter::Result*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->phi)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLTrackFittercLcLParam),-1,-1,1,"phi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->htphi)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLTrackFittercLcLParam),-1,-1,1,"htphi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fitE)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLTrackFittercLcLParam),-1,-1,1,"fitE=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->E)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLTrackFittercLcLParam),-1,-1,1,"E=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Ephys)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLTrackFittercLcLParam),-1,-1,1,"Ephys=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->range)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLTrackFittercLcLParam),-1,-1,1,"range=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sigma)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLTrackFittercLcLParam),-1,-1,1,"sigma=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sigma2)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLTrackFittercLcLParam),-1,-1,1,"sigma2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->x0)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLTrackFittercLcLParam),-1,-1,1,"x0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->y0)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLTrackFittercLcLParam),-1,-1,1,"y0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->z0)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLTrackFittercLcLParam),-1,-1,1,"z0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->z1)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLTrackFittercLcLParam),-1,-1,1,"z1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->delta_z)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLTrackFittercLcLParam),-1,-1,1,"delta_z=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->chisq)-(long)(p)),100,0,0,-1,-1,-1,1,"chisq=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->gain)-(long)(p)),100,0,0,-1,-1,-1,1,"gain=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->likelyIntegralSame)-(long)(p)),100,0,0,-1,-1,-1,1,"likelyIntegralSame=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->likelyIntegralSameError)-(long)(p)),100,0,0,-1,-1,-1,1,"likelyIntegralSameError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->likelyIntegralTotal)-(long)(p)),100,0,0,-1,-1,-1,1,"likelyIntegralTotal=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->likelyIntegralTotalError)-(long)(p)),100,0,0,-1,-1,-1,1,"likelyIntegralTotalError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->prob)-(long)(p)),100,0,0,-1,-1,-1,1,"prob=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->probError)-(long)(p)),100,0,0,-1,-1,-1,1,"probError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->probFast)-(long)(p)),100,0,0,-1,-1,-1,1,"probFast=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ndof)-(long)(p)),105,0,0,-1,-1,-1,1,"ndof=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->success)-(long)(p)),103,0,0,-1,-1,-1,1,"success=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->flip)-(long)(p)),103,0,0,-1,-1,-1,1,"flip=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->minos)-(long)(p)),103,0,0,-1,-1,-1,1,"minos=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->integralProb)-(long)(p)),103,0,0,-1,-1,-1,1,"integralProb=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->likelihoodProb)-(long)(p)),103,0,0,-1,-1,-1,1,"likelihoodProb=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->alt_chisq)-(long)(p)),100,0,0,-1,-1,-1,1,"alt_chisq=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->prob2)-(long)(p)),100,0,0,-1,-1,-1,1,"prob2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->covar)-(long)(p)),100,0,0,-1,-1,-1,1,"covar[9][9]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->second_width)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLTrackFittercLcLParam),-1,-1,1,"second_width=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->second_width_ratio)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLTrackFittercLcLParam),-1,-1,1,"second_width_ratio=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->unused)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLTrackFittercLcLParam),-1,-1,1,"unused=",0,"for ABI compatibility... shitty I know");
   G__memvar_setup((void*)((long)(&p->second_width_is_cauchy)-(long)(p)),103,0,0,-1,-1,-1,1,"second_width_is_cauchy=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarDmtpcAnalysisCint() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncdmtpc(void) {
   /* dmtpc */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpc));
   G__tag_memfunc_reset();
}

static void G__setup_memfuncdmtpccLcLanalysis(void) {
   /* dmtpc::analysis */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysis));
   G__memfunc_setup("decodeBurninTrack",1735,G__DmtpcAnalysisCint_182_0_1, 105, -1, -1, 0, 1, 1, 1, 0, "h - 'dmtpc::analysis::BurninEncoded_t' 0 - be", (char*)NULL, (void*) G__func2void( (int (*)(dmtpc::analysis::BurninEncoded_t))(&dmtpc::analysis::decodeBurninTrack) ), 0);
   G__memfunc_setup("decodeBurninEvent",1748,G__DmtpcAnalysisCint_182_0_2, 105, -1, -1, 0, 1, 1, 1, 0, "h - 'dmtpc::analysis::BurninEncoded_t' 0 - be", (char*)NULL, (void*) G__func2void( (int (*)(dmtpc::analysis::BurninEncoded_t))(&dmtpc::analysis::decodeBurninEvent) ), 0);
   G__memfunc_setup("encodeBurnin",1244,G__DmtpcAnalysisCint_182_0_3, 104, -1, G__defined_typename("dmtpc::analysis::BurninEncoded_t"), 0, 2, 1, 1, 0, 
"i - - 0 - track i - - 0 - event", (char*)NULL, (void*) G__func2void( (dmtpc::analysis::BurninEncoded_t (*)(int, int))(&dmtpc::analysis::encodeBurnin) ), 0);
   G__memfunc_setup("decodeSparkRefX",1498,G__DmtpcAnalysisCint_182_0_4, 105, -1, -1, 0, 1, 1, 1, 0, "h - 'dmtpc::analysis::SparkRefEncoded_t' 0 - sre", (char*)NULL, (void*) G__func2void( (int (*)(dmtpc::analysis::SparkRefEncoded_t))(&dmtpc::analysis::decodeSparkRefX) ), 0);
   G__memfunc_setup("decodeSparkRefY",1499,G__DmtpcAnalysisCint_182_0_5, 105, -1, -1, 0, 1, 1, 1, 0, "h - 'dmtpc::analysis::SparkRefEncoded_t' 0 - sre", (char*)NULL, (void*) G__func2void( (int (*)(dmtpc::analysis::SparkRefEncoded_t))(&dmtpc::analysis::decodeSparkRefY) ), 0);
   G__memfunc_setup("encodeSparkRef",1420,G__DmtpcAnalysisCint_182_0_6, 104, -1, G__defined_typename("dmtpc::analysis::SparkRefEncoded_t"), 0, 2, 1, 1, 0, 
"i - - 0 - x i - - 0 - y", (char*)NULL, (void*) G__func2void( (dmtpc::analysis::SparkRefEncoded_t (*)(int, int))(&dmtpc::analysis::encodeSparkRef) ), 0);
   G__memfunc_setup("getTime",719,G__DmtpcAnalysisCint_182_0_7, 100, -1, -1, 0, 1, 1, 1, 0, "u 'dmtpc::waveform::CspWaveform' - 1 - wf", (char*)NULL, (void*) G__func2void( (double (*)(dmtpc::waveform::CspWaveform&))(&dmtpc::analysis::getTime) ), 0);
   G__memfunc_setup("getTime",719,G__DmtpcAnalysisCint_182_0_8, 100, -1, -1, 0, 1, 1, 1, 0, "u 'dmtpc::waveform::CspPulse' - 1 - wfp", (char*)NULL, (void*) G__func2void( (double (*)(dmtpc::waveform::CspPulse&))(&dmtpc::analysis::getTime) ), 0);
   G__memfunc_setup("getTimeDiff",1096,G__DmtpcAnalysisCint_182_0_9, 100, -1, -1, 0, 2, 1, 1, 0, 
"u 'dmtpc::waveform::CspPulse' - 1 - wfp u 'dmtpc::waveform::CspPulse' - 1 - wfp2", (char*)NULL, (void*) G__func2void( (double (*)(dmtpc::waveform::CspPulse&, dmtpc::waveform::CspPulse&))(&dmtpc::analysis::getTimeDiff) ), 0);
   G__memfunc_setup("getTimeDiff",1096,G__DmtpcAnalysisCint_182_0_10, 100, -1, -1, 0, 2, 1, 1, 0, 
"u 'dmtpc::waveform::CspWaveform' - 1 - wf u 'dmtpc::waveform::CspWaveform' - 1 - wf2", (char*)NULL, (void*) G__func2void( (double (*)(dmtpc::waveform::CspWaveform&, dmtpc::waveform::CspWaveform&))(&dmtpc::analysis::getTimeDiff) ), 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncdmtpccLcLanalysiscLcLAnalysisConfig(void) {
   /* dmtpc::analysis::AnalysisConfig */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLAnalysisConfig));
   G__memfunc_setup("AnalysisConfig",1434,G__DmtpcAnalysisCint_183_0_1, 105, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLAnalysisConfig), -1, 0, 1, 1, 1, 0, "C - - 10 '0' file", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("AnalysisConfig", 1434, G__DmtpcAnalysisCint_183_0_2, (int) ('i'), G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLAnalysisConfig), -1, 0, 1, 1, 1, 0, "u 'dmtpc::analysis::AnalysisConfig' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~AnalysisConfig", 1560, G__DmtpcAnalysisCint_183_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DmtpcAnalysisCint_183_0_4, (int) ('u'), G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLAnalysisConfig), -1, 1, 1, 1, 1, 0, "u 'dmtpc::analysis::AnalysisConfig' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncdmtpccLcLanalysiscLcLcleanskim(void) {
   /* dmtpc::analysis::cleanskim */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLcleanskim));
   G__tag_memfunc_reset();
}

static void G__setup_memfuncdmtpccLcLanalysiscLcLcleanskimcLcLConfig(void) {
   /* dmtpc::analysis::cleanskim::Config */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLcleanskimcLcLConfig));
   G__memfunc_setup("Config",598,G__DmtpcAnalysisCint_189_0_1, 105, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLcleanskimcLcLConfig), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Config",598,G__DmtpcAnalysisCint_189_0_2, 105, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLcleanskimcLcLConfig), -1, 0, 1, 1, 1, 0, "C - - 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDefaults",1156,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("Config", 598, G__DmtpcAnalysisCint_189_0_4, (int) ('i'), G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLcleanskimcLcLConfig), -1, 0, 1, 1, 1, 0, "u 'dmtpc::analysis::cleanskim::Config' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Config", 724, G__DmtpcAnalysisCint_189_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DmtpcAnalysisCint_189_0_6, (int) ('u'), G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLcleanskimcLcLConfig), -1, 1, 1, 1, 1, 0, "u 'dmtpc::analysis::cleanskim::Config' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncdmtpccLcLanalysiscLcLCluster(void) {
   /* dmtpc::analysis::Cluster */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLCluster));
   G__memfunc_setup("Class",502,G__DmtpcAnalysisCint_240_0_1, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&dmtpc::analysis::Cluster::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DmtpcAnalysisCint_240_0_2, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&dmtpc::analysis::Cluster::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DmtpcAnalysisCint_240_0_3, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&dmtpc::analysis::Cluster::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DmtpcAnalysisCint_240_0_4, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&dmtpc::analysis::Cluster::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DmtpcAnalysisCint_240_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DmtpcAnalysisCint_240_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&dmtpc::analysis::Cluster::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DmtpcAnalysisCint_240_0_10, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&dmtpc::analysis::Cluster::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DmtpcAnalysisCint_240_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&dmtpc::analysis::Cluster::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DmtpcAnalysisCint_240_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&dmtpc::analysis::Cluster::DeclFileLine) ), 0);
   // automatic default constructor
   G__memfunc_setup("Cluster", 738, G__DmtpcAnalysisCint_240_0_13, (int) ('i'), G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLCluster), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("Cluster", 738, G__DmtpcAnalysisCint_240_0_14, (int) ('i'), G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLCluster), -1, 0, 1, 1, 1, 0, "u 'dmtpc::analysis::Cluster' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Cluster", 864, G__DmtpcAnalysisCint_240_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncdmtpccLcLanalysiscLcLClusterImage(void) {
   /* dmtpc::analysis::ClusterImage */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLClusterImage));
   G__memfunc_setup("ClusterImage",1221,G__DmtpcAnalysisCint_241_0_1, 105, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLClusterImage), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClusterImage",1221,G__DmtpcAnalysisCint_241_0_2, 105, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLClusterImage), -1, 0, 2, 1, 1, 0, 
"U 'TH2' - 0 - img U 'TTimeStamp' - 10 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addCluster",1035,G__DmtpcAnalysisCint_241_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "U 'dmtpc::analysis::Cluster' - 10 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("replaceCluster",1470,G__DmtpcAnalysisCint_241_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - i U 'dmtpc::analysis::Cluster' - 10 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("roundValues",1176,G__DmtpcAnalysisCint_241_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"g - - 0 'true' onlyOutsideClusters d - - 0 '1.' roundTo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("changeHistType",1440,G__DmtpcAnalysisCint_241_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "c - - 0 - type", "TODO: STUB ", (void*) NULL, 0);
   G__memfunc_setup("getRMS",562,G__DmtpcAnalysisCint_241_0_7, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNCluster",1136,G__DmtpcAnalysisCint_241_0_8, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCluster",1058,G__DmtpcAnalysisCint_241_0_9, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLCluster), -1, 0, 1, 1, 1, 9, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__DmtpcAnalysisCint_241_0_10, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLCluster), -1, 0, 1, 1, 1, 9, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getImage",803,G__DmtpcAnalysisCint_241_0_11, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH2), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DmtpcAnalysisCint_241_0_12, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&dmtpc::analysis::ClusterImage::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DmtpcAnalysisCint_241_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&dmtpc::analysis::ClusterImage::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DmtpcAnalysisCint_241_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&dmtpc::analysis::ClusterImage::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DmtpcAnalysisCint_241_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&dmtpc::analysis::ClusterImage::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DmtpcAnalysisCint_241_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DmtpcAnalysisCint_241_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&dmtpc::analysis::ClusterImage::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DmtpcAnalysisCint_241_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&dmtpc::analysis::ClusterImage::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DmtpcAnalysisCint_241_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&dmtpc::analysis::ClusterImage::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DmtpcAnalysisCint_241_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&dmtpc::analysis::ClusterImage::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("ClusterImage", 1221, G__DmtpcAnalysisCint_241_0_24, (int) ('i'), G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLClusterImage), -1, 0, 1, 1, 1, 0, "u 'dmtpc::analysis::ClusterImage' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ClusterImage", 1347, G__DmtpcAnalysisCint_241_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DmtpcAnalysisCint_241_0_26, (int) ('u'), G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLClusterImage), -1, 1, 1, 1, 1, 0, "u 'dmtpc::analysis::ClusterImage' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncdmtpccLcLanalysiscLcLSkimDataset(void) {
   /* dmtpc::analysis::SkimDataset */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLSkimDataset));
   G__memfunc_setup("SkimDataset",1114,G__DmtpcAnalysisCint_312_0_1, 105, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLSkimDataset), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SkimDataset",1114,G__DmtpcAnalysisCint_312_0_2, 105, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLSkimDataset), -1, 0, 1, 1, 1, 0, "u 'dmtpc::analysis::SkimDataset' - 11 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("tree",432,G__DmtpcAnalysisCint_312_0_3, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TTree), -1, 0, 1, 1, 1, 0, "C - - 10 '\"skim\"' key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("chain",515,G__DmtpcAnalysisCint_312_0_4, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TChain), -1, 0, 1, 1, 1, 0, "C - - 10 '\"skim\"' key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("file",416,G__DmtpcAnalysisCint_312_0_5, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TFile), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createRootFile",1432,G__DmtpcAnalysisCint_312_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - fname u 'TString' - 0 - foption", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("openRootFile",1238,G__DmtpcAnalysisCint_312_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - fname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("closeRootFile",1338,G__DmtpcAnalysisCint_312_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("newRootFile",1134,G__DmtpcAnalysisCint_312_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - fname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFileName",1089,G__DmtpcAnalysisCint_312_0_10, 67, -1, -1, 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("event",546,G__DmtpcAnalysisCint_312_0_11, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLSkimEvent), -1, 0, 1, 1, 1, 0, "C - - 10 '\"skim\"' key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTreeIndices",1423,G__DmtpcAnalysisCint_312_0_12, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR), G__defined_typename("map<std::string,unsigned>"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("orig_event",1074,G__DmtpcAnalysisCint_312_0_13, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLcorecLcLEvent), -1, 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEvent",834,G__DmtpcAnalysisCint_312_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEventNumber",1451,G__DmtpcAnalysisCint_312_0_15, 105, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - n i - - 0 '-1' startingGuess", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nevents",771,G__DmtpcAnalysisCint_312_0_16, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("loadBiasFrames",1405,G__DmtpcAnalysisCint_312_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"g - - 0 - load C - - 10 '\"\"' fname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getBiasFrames",1309,G__DmtpcAnalysisCint_312_0_18, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH2), -1, 2, 0, 1, 1, 13, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getBiasFrame",1194,G__DmtpcAnalysisCint_312_0_19, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH2), -1, 0, 1, 1, 1, 1, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGainMap",989,G__DmtpcAnalysisCint_312_0_20, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLGainMap), -1, 0, 1, 1, 1, 0, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGainMap",989,G__DmtpcAnalysisCint_312_0_21, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLGainMap), -1, 0, 1, 1, 1, 0, "C - - 10 - serialNumber", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGainMaps",1104,G__DmtpcAnalysisCint_312_0_22, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TObjArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addGainMap",966,G__DmtpcAnalysisCint_312_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "U 'dmtpc::analysis::GainMap' - 0 - gainMap", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("writeGainMaps",1339,G__DmtpcAnalysisCint_312_0_24, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("mergeTempTrees",1449,G__DmtpcAnalysisCint_312_0_25, 121, -1, -1, 0, 4, 1, 1, 0, 
"U 'TTree' - 0 - tmpskim U 'list<vector<vector<vector<unsigned int,allocator<unsigned int> >,allocator<vector<unsigned int,allocator<unsigned int> > > >,allocator<vector<vector<unsigned int,allocator<unsigned int> >,allocator<vector<unsigned int,allocator<unsigned int> > > > > >*,allocator<vector<vector<vector<unsigned int,allocator<unsigned int> >,allocator<vector<unsigned int,allocator<unsigned int> > > >,allocator<vector<vector<unsigned int,allocator<unsigned int> >,allocator<vector<unsigned int,allocator<unsigned int> > > > > >*> >' 'list<vector<vector<vector<dmtpc::analysis::BurninEncoded_t> > >*>' 0 - burnin "
"U 'list<vector<pair<int,int>,allocator<pair<int,int> > >*,allocator<vector<pair<int,int>,allocator<pair<int,int> > >*> >' 'list<vector<pair<int,int> >*>' 0 - sparkref i - - 0 - run_n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("loadEvent",930,G__DmtpcAnalysisCint_312_0_26, 121, -1, -1, 0, 2, 1, 1, 0, 
"g - - 0 'true' load C - - 10 'NULL' orig_dataset", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setConfig",930,G__DmtpcAnalysisCint_312_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - config", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("writeConfig",1153,G__DmtpcAnalysisCint_312_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getConfig",918,G__DmtpcAnalysisCint_312_0_29, 67, -1, -1, 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("writeStitch",1178,G__DmtpcAnalysisCint_312_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "U 'dmtpc::analysis::Stitcher' - 10 - stitch", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getStitch",943,G__DmtpcAnalysisCint_312_0_31, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLStitcher), -1, 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("loadClusters",1269,G__DmtpcAnalysisCint_312_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 - l", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SkimDataset", 1240, G__DmtpcAnalysisCint_312_0_33, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DmtpcAnalysisCint_312_0_34, (int) ('u'), G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLSkimDataset), -1, 1, 1, 1, 1, 0, "u 'dmtpc::analysis::SkimDataset' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncdmtpccLcLanalysiscLcLGainMap(void) {
   /* dmtpc::analysis::GainMap */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLGainMap));
   G__memfunc_setup("GainMap",669,G__DmtpcAnalysisCint_313_0_1, 105, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLGainMap), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GainMap",669,G__DmtpcAnalysisCint_313_0_2, 105, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLGainMap), -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawWithSpacers",1563,G__DmtpcAnalysisCint_313_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGainMap",1001,G__DmtpcAnalysisCint_313_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TH2F' - 0 - gainMap", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGainMap",989,G__DmtpcAnalysisCint_313_0_5, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH2F), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGainMap",989,G__DmtpcAnalysisCint_313_0_6, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH2F), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addSpacer",903,G__DmtpcAnalysisCint_313_0_7, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 - slope d - - 0 - intercept "
"d - - 0 - width", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addSpacer",903,G__DmtpcAnalysisCint_313_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TVector3' - 0 - params", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSpacer",926,G__DmtpcAnalysisCint_313_0_9, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TVector3), -1, 0, 1, 1, 1, 9, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSpacerSlope",1441,G__DmtpcAnalysisCint_313_0_10, 100, -1, -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSpacerIntercept",1868,G__DmtpcAnalysisCint_313_0_11, 100, -1, -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSpacerWidth",1438,G__DmtpcAnalysisCint_313_0_12, 100, -1, -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNSpacers",1119,G__DmtpcAnalysisCint_313_0_13, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nCrossingSpacers",1671,G__DmtpcAnalysisCint_313_0_14, 105, -1, -1, 0, 5, 1, 1, 8, 
"d - - 0 - x1 d - - 0 - y1 "
"d - - 0 - x2 d - - 0 - y2 "
"U 'vector<int,allocator<int> >' 'vector<int>' 0 'NULL' which", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("crossesSpacer",1376,G__DmtpcAnalysisCint_313_0_15, 103, -1, -1, 0, 4, 1, 1, 8, 
"d - - 0 - x1 d - - 0 - y1 "
"d - - 0 - x2 d - - 0 - y2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("distanceToSpacer",1644,G__DmtpcAnalysisCint_313_0_16, 100, -1, -1, 0, 3, 1, 1, 8, 
"i - - 0 - i d - - 0 - x "
"d - - 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("distanceToNearestSpacer",2366,G__DmtpcAnalysisCint_313_0_17, 100, -1, -1, 0, 3, 1, 1, 8, 
"d - - 0 - x d - - 0 - y "
"i - - 1 - imin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("distanceToSpacers",1759,G__DmtpcAnalysisCint_313_0_18, 117, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR), G__defined_typename("vector<double>"), 0, 2, 1, 1, 8, 
"d - - 0 - x d - - 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("writeOverlay",1293,G__DmtpcAnalysisCint_313_0_19, 121, -1, -1, 0, 1, 1, 1, 8, "C - - 10 - outfile", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getErrorEstimate",1670,G__DmtpcAnalysisCint_313_0_20, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH2), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("randomize",969,G__DmtpcAnalysisCint_313_0_21, 121, -1, -1, 0, 0, 1, 1, 0, "", "randomize gainmap by jittering values according to error estimate ", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DmtpcAnalysisCint_313_0_22, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&dmtpc::analysis::GainMap::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DmtpcAnalysisCint_313_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&dmtpc::analysis::GainMap::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DmtpcAnalysisCint_313_0_24, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&dmtpc::analysis::GainMap::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DmtpcAnalysisCint_313_0_25, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&dmtpc::analysis::GainMap::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DmtpcAnalysisCint_313_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DmtpcAnalysisCint_313_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&dmtpc::analysis::GainMap::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DmtpcAnalysisCint_313_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&dmtpc::analysis::GainMap::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DmtpcAnalysisCint_313_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&dmtpc::analysis::GainMap::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DmtpcAnalysisCint_313_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&dmtpc::analysis::GainMap::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("GainMap", 669, G__DmtpcAnalysisCint_313_0_34, (int) ('i'), G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLGainMap), -1, 0, 1, 1, 1, 0, "u 'dmtpc::analysis::GainMap' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~GainMap", 795, G__DmtpcAnalysisCint_313_0_35, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DmtpcAnalysisCint_313_0_36, (int) ('u'), G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLGainMap), -1, 1, 1, 1, 1, 0, "u 'dmtpc::analysis::GainMap' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncdmtpccLcLanalysiscLcLStitcher(void) {
   /* dmtpc::analysis::Stitcher */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLStitcher));
   G__memfunc_setup("Stitcher",838,G__DmtpcAnalysisCint_314_0_1, 105, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLStitcher), -1, 0, 1, 1, 1, 0, "C - - 10 '0' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isInit",624,G__DmtpcAnalysisCint_314_0_2, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("train",542,G__DmtpcAnalysisCint_314_0_3, 103, -1, -1, 0, 4, 1, 1, 0, 
"U 'vector<const TH2*,allocator<const TH2*> >' 'vector<const TH2*>' 10 - images U 'TString' - 10 - turns "
"U 'TString' - 10 - serial_numbers g - - 0 'false' print_progress", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setupMCViper",1223,G__DmtpcAnalysisCint_314_0_4, 103, -1, -1, 0, 8, 1, 1, 0, 
"i - - 0 - n C - - 2 - serial_numbers "
"D - - 0 - xcenters D - - 0 - ycenters "
"D - - 0 - scales D - - 0 - rotations "
"D - - 0 - innerRadius D - - 0 - outerRadius", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("stitch",655,G__DmtpcAnalysisCint_314_0_5, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH2), -1, 0, 2, 1, 1, 8, 
"U 'vector<const TH2*,allocator<const TH2*> >' 'vector<const TH2*>' 10 - images C - - 10 '\"bicubic\"' interpolation", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("xCenter",729,G__DmtpcAnalysisCint_314_0_6, 100, -1, -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("yCenter",730,G__DmtpcAnalysisCint_314_0_7, 100, -1, -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("innerRadius",1156,G__DmtpcAnalysisCint_314_0_8, 100, -1, -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("outerRadius",1175,G__DmtpcAnalysisCint_314_0_9, 100, -1, -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNSpacers",1119,G__DmtpcAnalysisCint_314_0_10, 104, -1, -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSpacerTheta",1428,G__DmtpcAnalysisCint_314_0_11, 100, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - i i - - 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSpacerR",1008,G__DmtpcAnalysisCint_314_0_12, 100, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - i i - - 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSpacerSlope",1441,G__DmtpcAnalysisCint_314_0_13, 100, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - i i - - 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSpacerIntercept",1868,G__DmtpcAnalysisCint_314_0_14, 100, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - i i - - 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setWeights",1063,G__DmtpcAnalysisCint_314_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "D - - 10 - weights", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLensCorrection",1782,G__DmtpcAnalysisCint_314_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "U 'dmtpc::image::LensCorrection' - 0 - lens", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setBlurLevel",1241,G__DmtpcAnalysisCint_314_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setEdgeLowThreshold",1952,G__DmtpcAnalysisCint_314_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setEdgeHighThreshold",2030,G__DmtpcAnalysisCint_314_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMinEdgeNeighbors",1926,G__DmtpcAnalysisCint_314_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLinearHoughRbins",1952,G__DmtpcAnalysisCint_314_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - nrbins", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLinearHoughThetabins",2372,G__DmtpcAnalysisCint_314_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - nthetabins", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLinearHoughMinVotes",2263,G__DmtpcAnalysisCint_314_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - nvotes", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSpacerJoinThresholds",2394,G__DmtpcAnalysisCint_314_0_24, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - rthresh d - - 0 - theta_thresh", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCircularHoughFirstPassNbins",3093,G__DmtpcAnalysisCint_314_0_25, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - nxbins i - - 0 - nybins "
"i - - 0 - nrbins", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCircularHoughSecondPassNbins",3177,G__DmtpcAnalysisCint_314_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - nxbins i - - 0 - nybins "
"i - - 0 - nrbins", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCircularHoughMins",2067,G__DmtpcAnalysisCint_314_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 - xmin d - - 0 - ymin "
"d - - 0 - rmin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCircularHoughMaxs",2069,G__DmtpcAnalysisCint_314_0_28, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 - xmax d - - 0 - ymax "
"d - - 0 - rmax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNWidthsSecondPass",2048,G__DmtpcAnalysisCint_314_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNSpectrPeaksR",1617,G__DmtpcAnalysisCint_314_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMedianNbins",1428,G__DmtpcAnalysisCint_314_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - nbins", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMedianNIter",1404,G__DmtpcAnalysisCint_314_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - niter", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCCDWithLED",1159,G__DmtpcAnalysisCint_314_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLEDBorderWidth",1663,G__DmtpcAnalysisCint_314_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLEDThresh",1167,G__DmtpcAnalysisCint_314_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setImageHighThresh",1821,G__DmtpcAnalysisCint_314_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setScales",935,G__DmtpcAnalysisCint_314_0_37, 121, -1, -1, 0, 2, 1, 1, 0, 
"D - - 10 - scales g - - 0 'true' update_stitch", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRotations",1295,G__DmtpcAnalysisCint_314_0_38, 121, -1, -1, 0, 2, 1, 1, 0, 
"D - - 10 - rotations g - - 0 'true' update_stitch", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCenters",1056,G__DmtpcAnalysisCint_314_0_39, 121, -1, -1, 0, 3, 1, 1, 0, 
"D - - 10 - Xcenters D - - 10 - Ycenters "
"g - - 0 'true' update_stitch", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getScale",808,G__DmtpcAnalysisCint_314_0_40, 100, -1, -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRotation",1168,G__DmtpcAnalysisCint_314_0_41, 100, -1, -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIndex",824,G__DmtpcAnalysisCint_314_0_42, 105, -1, -1, 0, 1, 1, 1, 8, "C - - 10 - serial", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSerial",928,G__DmtpcAnalysisCint_314_0_43, 67, -1, -1, 0, 1, 1, 1, 1, "h - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getStitchInfo256",1496,G__DmtpcAnalysisCint_314_0_44, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLimagecLcLStitchInfo), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getStitchInfo512",1491,G__DmtpcAnalysisCint_314_0_45, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLimagecLcLStitchInfo), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getStitchInfo1024",1538,G__DmtpcAnalysisCint_314_0_46, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLimagecLcLStitchInfo), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getStitchInfo",1339,G__DmtpcAnalysisCint_314_0_47, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLimagecLcLStitchInfo), -1, 0, 1, 1, 1, 9, "h - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("writeOverlayFile",1677,G__DmtpcAnalysisCint_314_0_48, 121, -1, -1, 0, 3, 1, 1, 0, 
"C - - 10 - file i - - 0 - i "
"i - - 0 '90' ncirclesegments", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("polar",542,G__DmtpcAnalysisCint_314_0_49, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH2), -1, 0, 1, 1, 1, 0, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rproj",557,G__DmtpcAnalysisCint_314_0_50, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH1), -1, 0, 1, 1, 1, 0, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("median",622,G__DmtpcAnalysisCint_314_0_51, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH2), -1, 0, 1, 1, 1, 0, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("original",853,G__DmtpcAnalysisCint_314_0_52, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH2), -1, 0, 1, 1, 1, 0, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("edge",405,G__DmtpcAnalysisCint_314_0_53, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH2), -1, 0, 1, 1, 1, 0, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setScaleMethod",1429,G__DmtpcAnalysisCint_314_0_54, 121, -1, -1, 0, 1, 1, 1, 0, "i 'dmtpc::analysis::Stitcher::SCALE_METHOD' - 0 - method", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calculateAuxHistograms",2301,G__DmtpcAnalysisCint_314_0_55, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - i U 'vector<const TH2*,allocator<const TH2*> >' 'vector<const TH2*>' 10 - images "
"g - - 0 - progress", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("updateStitchInfo",1662,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcRadii",892,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 4, 0, 
"U 'TH1' - 0 - rproj d - - 1 - inner_r "
"d - - 1 - outer_r g - - 0 'false' progress", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DmtpcAnalysisCint_314_0_58, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&dmtpc::analysis::Stitcher::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DmtpcAnalysisCint_314_0_59, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&dmtpc::analysis::Stitcher::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DmtpcAnalysisCint_314_0_60, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&dmtpc::analysis::Stitcher::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DmtpcAnalysisCint_314_0_61, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&dmtpc::analysis::Stitcher::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DmtpcAnalysisCint_314_0_65, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DmtpcAnalysisCint_314_0_66, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&dmtpc::analysis::Stitcher::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DmtpcAnalysisCint_314_0_67, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&dmtpc::analysis::Stitcher::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DmtpcAnalysisCint_314_0_68, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&dmtpc::analysis::Stitcher::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DmtpcAnalysisCint_314_0_69, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&dmtpc::analysis::Stitcher::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Stitcher", 838, G__DmtpcAnalysisCint_314_0_70, (int) ('i'), G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLStitcher), -1, 0, 1, 1, 1, 0, "u 'dmtpc::analysis::Stitcher' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Stitcher", 964, G__DmtpcAnalysisCint_314_0_71, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DmtpcAnalysisCint_314_0_72, (int) ('u'), G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLStitcher), -1, 1, 1, 1, 1, 0, "u 'dmtpc::analysis::Stitcher' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncdmtpccLcLanalysiscLcLSkimEvent(void) {
   /* dmtpc::analysis::SkimEvent */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLSkimEvent));
   G__memfunc_setup("SkimEvent",918,G__DmtpcAnalysisCint_316_0_1, 105, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLSkimEvent), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SkimEvent",918,G__DmtpcAnalysisCint_316_0_2, 105, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLSkimEvent), -1, 0, 2, 1, 1, 0, 
"u 'dmtpc::analysis::SkimEvent' - 11 - other g - - 0 'false' diet", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clusters",885,G__DmtpcAnalysisCint_316_0_3, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLanalysiscLcLClusterImagemUcOallocatorlEdmtpccLcLanalysiscLcLClusterImagemUgRsPgR), G__defined_typename("vector<ClusterImage*>"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cluster",770,G__DmtpcAnalysisCint_316_0_4, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLClusterImage), -1, 0, 1, 1, 1, 9, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("eventNumber",1163,G__DmtpcAnalysisCint_316_0_5, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("runNumber",958,G__DmtpcAnalysisCint_316_0_6, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ncamera",727,G__DmtpcAnalysisCint_316_0_7, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cameraSerialNumber",1842,G__DmtpcAnalysisCint_316_0_8, 117, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TString), -1, 0, 1, 1, 1, 8, "i - - 0 - cam", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("findSerialNumber",1642,G__DmtpcAnalysisCint_316_0_9, 105, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - serialNumber", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("theta",534,G__DmtpcAnalysisCint_316_0_10, 100, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("phi",321,G__DmtpcAnalysisCint_316_0_11, 100, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("E",69,G__DmtpcAnalysisCint_316_0_12, 100, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EGainMap",738,G__DmtpcAnalysisCint_316_0_13, 100, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("range",525,G__DmtpcAnalysisCint_316_0_14, 100, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("diffusedRange",1335,G__DmtpcAnalysisCint_316_0_15, 100, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("majorAxis",942,G__DmtpcAnalysisCint_316_0_16, 100, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("minorAxis",954,G__DmtpcAnalysisCint_316_0_17, 100, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("x",120,G__DmtpcAnalysisCint_316_0_18, 100, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("y",121,G__DmtpcAnalysisCint_316_0_19, 100, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("r",114,G__DmtpcAnalysisCint_316_0_20, 100, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("inactive",851,G__DmtpcAnalysisCint_316_0_21, 100, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("crossing",872,G__DmtpcAnalysisCint_316_0_22, 100, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("skewness",883,G__DmtpcAnalysisCint_316_0_23, 100, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("edge",405,G__DmtpcAnalysisCint_316_0_24, 103, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ntracks",758,G__DmtpcAnalysisCint_316_0_25, 105, -1, -1, 0, 1, 1, 1, 8, "i - - 0 - cam", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("spark",545,G__DmtpcAnalysisCint_316_0_26, 103, -1, -1, 0, 1, 1, 1, 8, "i - - 0 '0' cam", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lastspark",981,G__DmtpcAnalysisCint_316_0_27, 105, -1, -1, 0, 1, 1, 1, 8, "i - - 0 '0' cam", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("integral",854,G__DmtpcAnalysisCint_316_0_28, 100, -1, -1, 0, 1, 1, 1, 8, "i - - 0 '0' cam", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cluster_rms",1203,G__DmtpcAnalysisCint_316_0_29, 100, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cluster_mean",1282,G__DmtpcAnalysisCint_316_0_30, 100, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("neighbors",961,G__DmtpcAnalysisCint_316_0_31, 105, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("npixel",656,G__DmtpcAnalysisCint_316_0_32, 105, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("maxpixel",872,G__DmtpcAnalysisCint_316_0_33, 100, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cygnus_angle",1279,G__DmtpcAnalysisCint_316_0_34, 100, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("moment",656,G__DmtpcAnalysisCint_316_0_35, 100, -1, -1, 0, 3, 1, 1, 8, 
"i - - 0 - cam i - - 0 - m "
"i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("transverse_moment",1852,G__DmtpcAnalysisCint_316_0_36, 100, -1, -1, 0, 3, 1, 1, 8, 
"i - - 0 - cam i - - 0 - m "
"i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("dec",300,G__DmtpcAnalysisCint_316_0_37, 100, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ra",211,G__DmtpcAnalysisCint_316_0_38, 100, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("glon",432,G__DmtpcAnalysisCint_316_0_39, 100, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("glat",424,G__DmtpcAnalysisCint_316_0_40, 100, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("image_mean",1027,G__DmtpcAnalysisCint_316_0_41, 100, -1, -1, 0, 1, 1, 1, 8, "i - - 0 - cam", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("image_rms",948,G__DmtpcAnalysisCint_316_0_42, 100, -1, -1, 0, 1, 1, 1, 8, "i - - 0 - cam", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pixels_killed",1385,G__DmtpcAnalysisCint_316_0_43, 105, -1, -1, 0, 1, 1, 1, 8, "i - - 0 - cam", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("npixel_red",1066,G__DmtpcAnalysisCint_316_0_44, 105, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("image",515,G__DmtpcAnalysisCint_316_0_45, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH2), -1, 0, 1, 1, 1, 9, "i - - 0 - cam", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isRBI",441,G__DmtpcAnalysisCint_316_0_46, 103, -1, -1, 0, 5, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track "
"i - - 0 '2' nposthresh i - - 0 '3' sparkrefbins "
"i - - 0 '4' binning", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nburnin",764,G__DmtpcAnalysisCint_316_0_47, 105, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("burnin_event",1295,G__DmtpcAnalysisCint_316_0_48, 105, -1, -1, 0, 3, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track "
"i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("burnin_track",1282,G__DmtpcAnalysisCint_316_0_49, 105, -1, -1, 0, 3, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track "
"i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("burnin_this_index",1820,G__DmtpcAnalysisCint_316_0_50, 105, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("burnin_v",867,G__DmtpcAnalysisCint_316_0_51, 72, -1, G__defined_typename("dmtpc::analysis::BurninEncoded_t"), 0, 2, 1, 1, 9, 
"i - - 0 - c i - - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nsparkref",972,G__DmtpcAnalysisCint_316_0_52, 105, -1, -1, 0, 1, 1, 1, 8, "i - - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sparkrefX",950,G__DmtpcAnalysisCint_316_0_53, 105, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - c i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sparkrefY",951,G__DmtpcAnalysisCint_316_0_54, 105, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - c i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nearestSpacerDistance",2171,G__DmtpcAnalysisCint_316_0_55, 100, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - c i - - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nearestSpacer",1360,G__DmtpcAnalysisCint_316_0_56, 100, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - c i - - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("waveform_vectors",1740,G__DmtpcAnalysisCint_316_0_57, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLWaveformVectormUcOallocatorlEdmtpccLcLwaveformcLcLWaveformVectormUgRsPgR), G__defined_typename("vector<dmtpc::waveform::WaveformVector*>"), 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cspwf_vectors",1416,G__DmtpcAnalysisCint_316_0_58, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLCspWfVectormUcOallocatorlEdmtpccLcLwaveformcLcLCspWfVectormUgRsPgR), G__defined_typename("vector<dmtpc::waveform::CspWfVector*>"), 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fastwf_vectors",1520,G__DmtpcAnalysisCint_316_0_59, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLFastWfVectormUcOallocatorlEdmtpccLcLwaveformcLcLFastWfVectormUgRsPgR), G__defined_typename("vector<dmtpc::waveform::FastWfVector*>"), 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pmtwf_vectors",1427,G__DmtpcAnalysisCint_316_0_60, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLPMTWfVectormUcOallocatorlEdmtpccLcLwaveformcLcLPMTWfVectormUgRsPgR), G__defined_typename("vector<dmtpc::waveform::PMTWfVector*>"), 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printOut",869,G__DmtpcAnalysisCint_316_0_61, 121, -1, -1, 0, 1, 1, 1, 0, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 'std::cout' stream", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printOut",869,G__DmtpcAnalysisCint_316_0_62, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - cam i - - 0 - track "
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 'std::cout' stream", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isStitched",1044,G__DmtpcAnalysisCint_316_0_63, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("copyBurnin",1065,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'vector<vector<vector<unsigned int,allocator<unsigned int> >,allocator<vector<unsigned int,allocator<unsigned int> > > >,allocator<vector<vector<unsigned int,allocator<unsigned int> >,allocator<vector<unsigned int,allocator<unsigned int> > > > > >' 'vector<std::vector<std::vector<BurninEncoded_t> > >' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("copySparkRef",1241,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'vector<pair<int,int>,allocator<pair<int,int> > >' 'vector<std::pair<int,int> >' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initVectors",1178,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"i - - 0 - ncam i - - 0 '15' ntracks", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initCamVectors",1451,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "i - - 0 - ncam", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addTrackVector",1425,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "i - - 0 '15' ntracks", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clearTrackVectors",1762,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("burninIndex",1158,(G__InterfaceMethod) NULL, 105, -1, -1, 0, 3, 1, 4, 8, 
"i - - 0 - c i - - 0 - t "
"i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printOutTrack",1370,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 0, 
"i - - 0 - c i - - 0 - t "
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - stream", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printOutCamera",1454,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"i - - 0 - c u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - stream", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DmtpcAnalysisCint_316_0_73, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&dmtpc::analysis::SkimEvent::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DmtpcAnalysisCint_316_0_74, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&dmtpc::analysis::SkimEvent::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DmtpcAnalysisCint_316_0_75, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&dmtpc::analysis::SkimEvent::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DmtpcAnalysisCint_316_0_76, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&dmtpc::analysis::SkimEvent::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DmtpcAnalysisCint_316_0_80, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DmtpcAnalysisCint_316_0_81, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&dmtpc::analysis::SkimEvent::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DmtpcAnalysisCint_316_0_82, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&dmtpc::analysis::SkimEvent::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DmtpcAnalysisCint_316_0_83, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&dmtpc::analysis::SkimEvent::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DmtpcAnalysisCint_316_0_84, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&dmtpc::analysis::SkimEvent::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~SkimEvent", 1044, G__DmtpcAnalysisCint_316_0_85, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DmtpcAnalysisCint_316_0_86, (int) ('u'), G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLSkimEvent), -1, 1, 1, 1, 1, 0, "u 'dmtpc::analysis::SkimEvent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncdmtpccLcLanalysiscLcLclusteralgo(void) {
   /* dmtpc::analysis::clusteralgo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLclusteralgo));
   G__memfunc_setup("getIntegral",1142,G__DmtpcAnalysisCint_853_0_1, 100, -1, -1, 0, 3, 1, 1, 0, 
"U 'dmtpc::analysis::Cluster' - 10 - c U 'dmtpc::analysis::GainMap' - 10 '0' g "
"g - - 0 'false' reduced", (char*)NULL, (void*) G__func2void( (double (*)(const dmtpc::analysis::Cluster*, const dmtpc::analysis::GainMap*, bool))(&dmtpc::analysis::clusteralgo::getIntegral) ), 0);
   G__memfunc_setup("getLength",930,G__DmtpcAnalysisCint_853_0_2, 100, -1, -1, 0, 6, 1, 1, 0, 
"U 'dmtpc::analysis::Cluster' - 10 - c D - - 0 '0' x0 "
"D - - 0 '0' x1 D - - 0 '0' y0 "
"D - - 0 '0' y1 g - - 0 'true' reduced", (char*)NULL, (void*) G__func2void( (double (*)(const dmtpc::analysis::Cluster*, double*, double*, double*, double*, bool))(&dmtpc::analysis::clusteralgo::getLength) ), 0);
   G__memfunc_setup("getLengthAlongAngle",1914,G__DmtpcAnalysisCint_853_0_3, 100, -1, -1, 0, 3, 1, 1, 0, 
"U 'dmtpc::analysis::Cluster' - 10 - c d - - 0 - phi "
"g - - 0 'true' reduced", (char*)NULL, (void*) G__func2void( (double (*)(const dmtpc::analysis::Cluster*, double, bool))(&dmtpc::analysis::clusteralgo::getLengthAlongAngle) ), 0);
   G__memfunc_setup("getPhiFromLength",1623,G__DmtpcAnalysisCint_853_0_4, 100, -1, -1, 0, 2, 1, 1, 0, 
"U 'dmtpc::analysis::Cluster' - 10 - c g - - 0 'true' reduced", (char*)NULL, (void*) G__func2void( (double (*)(const dmtpc::analysis::Cluster*, bool))(&dmtpc::analysis::clusteralgo::getPhiFromLength) ), 0);
   G__memfunc_setup("getPhiPCA",821,G__DmtpcAnalysisCint_853_0_5, 100, -1, -1, 0, 1, 1, 1, 0, "U 'dmtpc::analysis::Cluster' - 10 - c", (char*)NULL, (void*) G__func2void( (double (*)(const dmtpc::analysis::Cluster*))(&dmtpc::analysis::clusteralgo::getPhiPCA) ), 0);
   G__memfunc_setup("getPhiMaxSigma",1400,G__DmtpcAnalysisCint_853_0_6, 100, -1, -1, 0, 1, 1, 1, 0, "U 'dmtpc::analysis::Cluster' - 10 - c", (char*)NULL, (void*) G__func2void( (double (*)(const dmtpc::analysis::Cluster*))(&dmtpc::analysis::clusteralgo::getPhiMaxSigma) ), 0);
   G__memfunc_setup("getPhiLineFit",1292,G__DmtpcAnalysisCint_853_0_7, 100, -1, -1, 0, 1, 1, 1, 0, "U 'dmtpc::analysis::Cluster' - 10 - c", (char*)NULL, (void*) G__func2void( (double (*)(const dmtpc::analysis::Cluster*))(&dmtpc::analysis::clusteralgo::getPhiLineFit) ), 0);
   G__memfunc_setup("getXY",497,G__DmtpcAnalysisCint_853_0_8, 100, -1, -1, 0, 4, 1, 1, 0, 
"U 'dmtpc::analysis::Cluster' - 10 - c D - - 0 '0' x "
"D - - 0 '0' y U 'dmtpc::analysis::GainMap' - 10 '0' g", (char*)NULL, (void*) G__func2void( (double (*)(const dmtpc::analysis::Cluster*, double*, double*, const dmtpc::analysis::GainMap*))(&dmtpc::analysis::clusteralgo::getXY) ), 0);
   G__memfunc_setup("inCluster",953,G__DmtpcAnalysisCint_853_0_9, 103, -1, -1, 0, 3, 1, 1, 0, 
"U 'dmtpc::analysis::Cluster' - 10 - c i - - 0 - bin "
"g - - 0 'false' reduced", (char*)NULL, (void*) G__func2void( (bool (*)(const dmtpc::analysis::Cluster*, int, bool))(&dmtpc::analysis::clusteralgo::inCluster) ), 0);
   G__memfunc_setup("getEllipseAxes",1439,G__DmtpcAnalysisCint_853_0_10, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'dmtpc::analysis::Cluster' - 10 - c D - - 0 - a "
"D - - 0 - b", (char*)NULL, (void*) G__func2void( (void (*)(const dmtpc::analysis::Cluster*, double*, double*))(&dmtpc::analysis::clusteralgo::getEllipseAxes) ), 0);
   G__memfunc_setup("getMean",705,G__DmtpcAnalysisCint_853_0_11, 100, -1, -1, 0, 1, 1, 1, 0, "U 'dmtpc::analysis::Cluster' - 10 - c", (char*)NULL, (void*) G__func2void( (double (*)(const dmtpc::analysis::Cluster*))(&dmtpc::analysis::clusteralgo::getMean) ), 0);
   G__memfunc_setup("getRMS",562,G__DmtpcAnalysisCint_853_0_12, 100, -1, -1, 0, 1, 1, 1, 0, "U 'dmtpc::analysis::Cluster' - 10 - c", (char*)NULL, (void*) G__func2void( (double (*)(const dmtpc::analysis::Cluster*))(&dmtpc::analysis::clusteralgo::getRMS) ), 0);
   G__memfunc_setup("getMax",614,G__DmtpcAnalysisCint_853_0_13, 100, -1, -1, 0, 2, 1, 1, 0, 
"U 'dmtpc::analysis::Cluster' - 10 - c I - - 0 '0' maxpix", (char*)NULL, (void*) G__func2void( (double (*)(const dmtpc::analysis::Cluster*, int*))(&dmtpc::analysis::clusteralgo::getMax) ), 0);
   G__memfunc_setup("getSkewness",1171,G__DmtpcAnalysisCint_853_0_14, 100, -1, -1, 0, 2, 1, 1, 0, 
"U 'dmtpc::analysis::Cluster' - 10 - c d - - 0 - phi", (char*)NULL, (void*) G__func2void( (double (*)(const dmtpc::analysis::Cluster*, double))(&dmtpc::analysis::clusteralgo::getSkewness) ), 0);
   G__memfunc_setup("getAsymmetry",1291,G__DmtpcAnalysisCint_853_0_15, 100, -1, -1, 0, 2, 1, 1, 0, 
"U 'dmtpc::analysis::Cluster' - 10 - c d - - 0 - phi", (char*)NULL, (void*) G__func2void( (double (*)(const dmtpc::analysis::Cluster*, double))(&dmtpc::analysis::clusteralgo::getAsymmetry) ), 0);
   G__memfunc_setup("morphologicalOperation",2337,G__DmtpcAnalysisCint_853_0_16, 121, -1, -1, 0, 4, 1, 1, 0, 
"U 'dmtpc::analysis::Cluster' - 0 - c i - - 0 - nerode "
"i - - 0 - ndilate g - - 0 'false' red", (char*)NULL, (void*) G__func2void( (void (*)(dmtpc::analysis::Cluster*, int, int, bool))(&dmtpc::analysis::clusteralgo::morphologicalOperation) ), 0);
   G__memfunc_setup("getNeighborsAboveThresh",2364,G__DmtpcAnalysisCint_853_0_17, 105, -1, -1, 0, 3, 1, 1, 0, 
"U 'dmtpc::analysis::Cluster' - 10 - c d - - 0 - thresh "
"i - - 0 - bin", (char*)NULL, (void*) G__func2void( (int (*)(const dmtpc::analysis::Cluster*, double, int))(&dmtpc::analysis::clusteralgo::getNeighborsAboveThresh) ), 0);
   G__memfunc_setup("clusterBinBounds",1670,G__DmtpcAnalysisCint_853_0_18, 121, -1, -1, 0, 5, 1, 1, 0, 
"U 'dmtpc::analysis::Cluster' - 10 - c I - - 0 - xmin "
"I - - 0 - xmax I - - 0 - ymin "
"I - - 0 - ymax", (char*)NULL, (void*) G__func2void( (void (*)(const dmtpc::analysis::Cluster*, int*, int*, int*, int*))(&dmtpc::analysis::clusteralgo::clusterBinBounds) ), 0);
   G__memfunc_setup("clusterBounds",1389,G__DmtpcAnalysisCint_853_0_19, 121, -1, -1, 0, 6, 1, 1, 0, 
"U 'dmtpc::analysis::Cluster' - 10 - c D - - 0 - xmin "
"D - - 0 - xmax D - - 0 - ymin "
"D - - 0 - ymax d - - 0 - border_px", (char*)NULL, (void*) G__func2void( (void (*)(const dmtpc::analysis::Cluster*, double*, double*, double*, double*, double))(&dmtpc::analysis::clusteralgo::clusterBounds) ), 0);
   G__memfunc_setup("makeBoundary",1250,G__DmtpcAnalysisCint_853_0_20, 105, -1, -1, 0, 7, 1, 1, 0, 
"U 'dmtpc::analysis::Cluster' - 10 - c U 'list<TGraph,allocator<TGraph> >' 'list<TGraph>' 0 - lines "
"g - - 0 'false' red g - - 0 'false' draw "
"C - - 10 '\"lsame\"' drawopt i - - 0 '0' linecolor "
"i - - 0 '1' linewidth", (char*)NULL, (void*) G__func2void( (int (*)(const dmtpc::analysis::Cluster*, list<TGraph>*, bool, bool, const char*, int, int))(&dmtpc::analysis::clusteralgo::makeBoundary) ), 0);
   G__memfunc_setup("edge",405,G__DmtpcAnalysisCint_853_0_21, 103, -1, -1, 0, 1, 1, 1, 0, "U 'dmtpc::analysis::Cluster' - 10 - c", (char*)NULL, (void*) G__func2void( (bool (*)(const dmtpc::analysis::Cluster*))(&dmtpc::analysis::clusteralgo::edge) ), 0);
   G__memfunc_setup("minDistance",1135,G__DmtpcAnalysisCint_853_0_22, 100, -1, -1, 0, 3, 1, 1, 0, 
"U 'dmtpc::analysis::Cluster' - 10 - c d - - 0 - x "
"d - - 0 - y", (char*)NULL, (void*) G__func2void( (double (*)(const dmtpc::analysis::Cluster*, double, double))(&dmtpc::analysis::clusteralgo::minDistance) ), 0);
   G__memfunc_setup("maxDistance",1137,G__DmtpcAnalysisCint_853_0_23, 100, -1, -1, 0, 3, 1, 1, 0, 
"U 'dmtpc::analysis::Cluster' - 10 - c d - - 0 - x "
"d - - 0 - y", (char*)NULL, (void*) G__func2void( (double (*)(const dmtpc::analysis::Cluster*, double, double))(&dmtpc::analysis::clusteralgo::maxDistance) ), 0);
   G__memfunc_setup("minmax",650,G__DmtpcAnalysisCint_853_0_24, 121, -1, -1, 0, 5, 1, 1, 0, 
"U 'dmtpc::analysis::Cluster' - 10 - c d - - 0 - phi "
"D - - 0 '0' minval D - - 0 '0' maxval "
"g - - 0 'false' red", (char*)NULL, (void*) G__func2void( (void (*)(const dmtpc::analysis::Cluster*, double, double*, double*, bool))(&dmtpc::analysis::clusteralgo::minmax) ), 0);
   G__memfunc_setup("projectLegacy",1356,G__DmtpcAnalysisCint_853_0_25, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH1), -1, 0, 5, 1, 1, 0, 
"U 'dmtpc::analysis::Cluster' - 10 - c d - - 0 - phi "
"i - - 0 '4' binning g - - 0 'true' binningIsPixPerBin "
"g - - 0 'false' red", (char*)NULL, (void*) G__func2void( (TH1* (*)(const dmtpc::analysis::Cluster*, double, int, bool, bool))(&dmtpc::analysis::clusteralgo::projectLegacy) ), 0);
   G__memfunc_setup("project",759,G__DmtpcAnalysisCint_853_0_26, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH1), -1, 0, 10, 1, 1, 0, 
"U 'dmtpc::analysis::Cluster' - 10 - c d - - 0 - phi "
"C - - 10 '\"bilinear\"' interpolation_method U 'dmtpc::analysis::GainMap' - 0 '0' map "
"d - - 0 '0' min_gain g - - 0 'true' reset_xaxis "
"C - - 10 '0' name D - - 0 '0' startpos "
"d - - 0 '0' meanForErrorCalc d - - 0 '10' noiseForErrorCalc", (char*)NULL, (void*) G__func2void( (TH1* (*)(const dmtpc::analysis::Cluster*, double, const char*, dmtpc::analysis::GainMap*, double, bool, const char*, double*, double, double))(&dmtpc::analysis::clusteralgo::project) ), 0);
   G__memfunc_setup("clusterHist",1178,G__DmtpcAnalysisCint_853_0_27, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH2), -1, 0, 6, 1, 1, 0, 
"U 'dmtpc::analysis::Cluster' - 10 - c i - - 0 '2' padding "
"g - - 0 'false' red U 'dmtpc::analysis::GainMap' - 0 '0' map "
"d - - 0 '0' mingain g - - 0 'true' setzero", (char*)NULL, (void*) G__func2void( (TH2* (*)(const dmtpc::analysis::Cluster*, int, bool, dmtpc::analysis::GainMap*, double, bool))(&dmtpc::analysis::clusteralgo::clusterHist) ), 0);
   G__memfunc_setup("moment",656,G__DmtpcAnalysisCint_853_0_28, 100, -1, -1, 0, 6, 1, 1, 0, 
"U 'dmtpc::analysis::Cluster' - 10 - c i - - 0 - nth "
"d - - 0 - phi i - - 0 - binning "
"g - - 0 'true' binningIsPixPerBin g - - 0 'false' red", (char*)NULL, (void*) G__func2void( (double (*)(const dmtpc::analysis::Cluster*, int, double, int, bool, bool))(&dmtpc::analysis::clusteralgo::moment) ), 0);
   G__memfunc_setup("nearestSpacerDistance",2171,G__DmtpcAnalysisCint_853_0_29, 100, -1, -1, 0, 3, 1, 1, 0, 
"U 'dmtpc::analysis::Cluster' - 10 - c U 'dmtpc::analysis::GainMap' - 10 - m "
"i - - 1 - nearest_spacer", (char*)NULL, (void*) G__func2void( (double (*)(const dmtpc::analysis::Cluster*, const dmtpc::analysis::GainMap*, int&))(&dmtpc::analysis::clusteralgo::nearestSpacerDistance) ), 0);
   G__memfunc_setup("maxDerivativeX",1457,G__DmtpcAnalysisCint_853_0_30, 100, -1, -1, 0, 1, 1, 1, 0, "U 'dmtpc::analysis::Cluster' - 10 - c", (char*)NULL, (void*) G__func2void( (double (*)(const dmtpc::analysis::Cluster*))(&dmtpc::analysis::clusteralgo::maxDerivativeX) ), 0);
   G__memfunc_setup("fullyConnected",1471,G__DmtpcAnalysisCint_853_0_31, 103, -1, -1, 0, 1, 1, 1, 0, "U 'dmtpc::analysis::Cluster' - 10 - c", (char*)NULL, (void*) G__func2void( (bool (*)(const dmtpc::analysis::Cluster*))(&dmtpc::analysis::clusteralgo::fullyConnected) ), 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncdmtpccLcLanalysiscLcLGainTree(void) {
   /* dmtpc::analysis::GainTree */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLGainTree));
   G__memfunc_setup("GainTree",783,G__DmtpcAnalysisCint_865_0_1, 105, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLGainTree), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cloneHisto",1048,G__DmtpcAnalysisCint_865_0_2, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'TH1' - 0 - histo u 'vector<TH1*,allocator<TH1*> >' 'vector<TH1*>' 1 - vector", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initHistos",1070,G__DmtpcAnalysisCint_865_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("writeHistos",1189,G__DmtpcAnalysisCint_865_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - run", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillWfHistos",1246,G__DmtpcAnalysisCint_865_0_5, 103, -1, -1, 0, 3, 1, 1, 0, 
"u 'dmtpc::waveform::CspWaveform' - 11 - wf i - - 0 - ch "
"g - - 0 - withCuts", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillPulseHistos",1578,G__DmtpcAnalysisCint_865_0_6, 103, -1, -1, 0, 3, 1, 1, 0, 
"u 'dmtpc::waveform::CspPulse' - 1 - wfp i - - 0 - ch "
"g - - 0 - withCuts", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fitGaussian",1150,G__DmtpcAnalysisCint_865_0_7, 117, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_pairlEdoublecOdoublegR), -1, 0, 3, 1, 1, 0, 
"U 'TH1' - 0 - h d - - 0 - rangeMin "
"d - - 0 - rangeMax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillXtalkHistos",1573,G__DmtpcAnalysisCint_865_0_8, 103, -1, -1, 0, 6, 1, 1, 0, 
"u 'dmtpc::waveform::CspPulse' - 1 - wfp u 'dmtpc::waveform::CspPulse' - 1 - wfp2 "
"h - - 0 - ch1 h - - 0 - ch2 "
"d - - 0 - deltaTwf g - - 0 - withCuts", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fitBaseline",1126,G__DmtpcAnalysisCint_865_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fitRMS",565,G__DmtpcAnalysisCint_865_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fitPeakBin",989,G__DmtpcAnalysisCint_865_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fitStartBin",1130,G__DmtpcAnalysisCint_865_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fitPeakStartDiff",1611,G__DmtpcAnalysisCint_865_0_13, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printPeakInfo",1338,G__DmtpcAnalysisCint_865_0_14, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DmtpcAnalysisCint_865_0_15, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&dmtpc::analysis::GainTree::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DmtpcAnalysisCint_865_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&dmtpc::analysis::GainTree::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DmtpcAnalysisCint_865_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&dmtpc::analysis::GainTree::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DmtpcAnalysisCint_865_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&dmtpc::analysis::GainTree::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__DmtpcAnalysisCint_865_0_19, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__DmtpcAnalysisCint_865_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__DmtpcAnalysisCint_865_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DmtpcAnalysisCint_865_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DmtpcAnalysisCint_865_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&dmtpc::analysis::GainTree::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DmtpcAnalysisCint_865_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&dmtpc::analysis::GainTree::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DmtpcAnalysisCint_865_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&dmtpc::analysis::GainTree::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DmtpcAnalysisCint_865_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&dmtpc::analysis::GainTree::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("GainTree", 783, G__DmtpcAnalysisCint_865_0_27, (int) ('i'), G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLGainTree), -1, 0, 1, 1, 1, 0, "u 'dmtpc::analysis::GainTree' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~GainTree", 909, G__DmtpcAnalysisCint_865_0_28, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DmtpcAnalysisCint_865_0_29, (int) ('u'), G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLGainTree), -1, 1, 1, 1, 1, 0, "u 'dmtpc::analysis::GainTree' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncdmtpccLcLanalysiscLcLHVLog(void) {
   /* dmtpc::analysis::HVLog */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLHVLog));
   G__memfunc_setup("HVLog",448,G__DmtpcAnalysisCint_870_0_1, 105, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLHVLog), -1, 0, 9, 1, 1, 0, 
"h - - 0 - - D - - 10 - imon "
"D - - 10 - imon_t h - - 0 - - "
"D - - 10 - vmon D - - 10 - vmon_t "
"h - - 0 - - D - - 10 - vset "
"D - - 10 - vset_t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HVLog",448,G__DmtpcAnalysisCint_870_0_2, 105, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLHVLog), -1, 0, 6, 1, 1, 0, 
"C - - 10 - file_name C - - 10 - imon_tree "
"C - - 10 - vmon_tree C - - 10 - vset_tree "
"C - - 10 '\"value\"' valname C - - 10 '\"time\"' timename", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getImon",723,G__DmtpcAnalysisCint_870_0_3, 100, -1, -1, 0, 2, 1, 1, 8, 
"d - - 0 - t D - - 0 '0' dt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMaxImon",1017,G__DmtpcAnalysisCint_870_0_4, 100, -1, -1, 0, 2, 1, 1, 8, 
"d - - 0 - t0 d - - 0 - e1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAvgImon",1009,G__DmtpcAnalysisCint_870_0_5, 100, -1, -1, 0, 2, 1, 1, 8, 
"d - - 0 - t0 d - - 0 - t1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getVmon",736,G__DmtpcAnalysisCint_870_0_6, 100, -1, -1, 0, 2, 1, 1, 8, 
"d - - 0 - t D - - 0 '0' dt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAvgVmon",1022,G__DmtpcAnalysisCint_870_0_7, 100, -1, -1, 0, 2, 1, 1, 8, 
"d - - 0 - t0 d - - 0 - t1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getVset",738,G__DmtpcAnalysisCint_870_0_8, 100, -1, -1, 0, 2, 1, 1, 8, 
"d - - 0 - t D - - 0 '0' dt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("makeSparkFriend",1527,G__DmtpcAnalysisCint_870_0_9, 105, -1, -1, 0, 8, 1, 1, 0, 
"U 'TChain' - 0 - c C - - 10 - outputfile "
"C - - 10 '\"spark\"' tree_name d - - 0 '5' t_before "
"d - - 0 '3' t_after g - - 0 'false' overwrite "
"i - - 0 '0' max_run_with_bias_frame_timestamp_bug d - - 0 '1' extra_padding_for_bug", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("HVLog", 448, G__DmtpcAnalysisCint_870_0_10, (int) ('i'), G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLHVLog), -1, 0, 1, 1, 1, 0, "u 'dmtpc::analysis::HVLog' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HVLog", 574, G__DmtpcAnalysisCint_870_0_11, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DmtpcAnalysisCint_870_0_12, (int) ('u'), G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLHVLog), -1, 1, 1, 1, 1, 0, "u 'dmtpc::analysis::HVLog' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncdmtpccLcLanalysiscLcLMCTruth(void) {
   /* dmtpc::analysis::MCTruth */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLMCTruth));
   G__memfunc_setup("MCTruth",679,G__DmtpcAnalysisCint_871_0_1, 105, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLMCTruth), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("phi",321,G__DmtpcAnalysisCint_871_0_2, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("opening",752,G__DmtpcAnalysisCint_871_0_3, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("theta",534,G__DmtpcAnalysisCint_871_0_4, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("xcam",425,G__DmtpcAnalysisCint_871_0_5, 100, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 - x d - - 0 - y "
"i - - 0 '0' cam", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ycam",426,G__DmtpcAnalysisCint_871_0_6, 100, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 - x d - - 0 - y "
"i - - 0 '0' cam", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("x0cam",473,G__DmtpcAnalysisCint_871_0_7, 100, -1, -1, 0, 1, 1, 1, 0, "i - - 0 '0' cam", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("y0cam",474,G__DmtpcAnalysisCint_871_0_8, 100, -1, -1, 0, 1, 1, 1, 0, "i - - 0 '0' cam", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTruthImage",1338,G__DmtpcAnalysisCint_871_0_9, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH2), -1, 0, 1, 1, 1, 0, "i - - 0 '0' cam", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__DmtpcAnalysisCint_871_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DmtpcAnalysisCint_871_0_11, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&dmtpc::analysis::MCTruth::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DmtpcAnalysisCint_871_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&dmtpc::analysis::MCTruth::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DmtpcAnalysisCint_871_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&dmtpc::analysis::MCTruth::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DmtpcAnalysisCint_871_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&dmtpc::analysis::MCTruth::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__DmtpcAnalysisCint_871_0_15, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__DmtpcAnalysisCint_871_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__DmtpcAnalysisCint_871_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DmtpcAnalysisCint_871_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DmtpcAnalysisCint_871_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&dmtpc::analysis::MCTruth::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DmtpcAnalysisCint_871_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&dmtpc::analysis::MCTruth::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DmtpcAnalysisCint_871_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&dmtpc::analysis::MCTruth::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DmtpcAnalysisCint_871_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&dmtpc::analysis::MCTruth::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MCTruth", 679, G__DmtpcAnalysisCint_871_0_23, (int) ('i'), G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLMCTruth), -1, 0, 1, 1, 1, 0, "u 'dmtpc::analysis::MCTruth' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MCTruth", 805, G__DmtpcAnalysisCint_871_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DmtpcAnalysisCint_871_0_25, (int) ('u'), G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLMCTruth), -1, 1, 1, 1, 1, 0, "u 'dmtpc::analysis::MCTruth' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncdmtpccLcLanalysiscLcLMCTPCDataset(void) {
   /* dmtpc::analysis::MCTPCDataset */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLMCTPCDataset));
   G__memfunc_setup("MCTPCDataset",1085,G__DmtpcAnalysisCint_880_0_1, 105, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLMCTPCDataset), -1, 0, 1, 1, 1, 0, "C - - 10 '0' file", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("open",434,G__DmtpcAnalysisCint_880_0_2, 103, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - file", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("close",534,G__DmtpcAnalysisCint_880_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEvent",834,G__DmtpcAnalysisCint_880_0_4, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLMCTruth), -1, 0, 1, 1, 1, 0, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("truth",567,G__DmtpcAnalysisCint_880_0_5, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLMCTruth), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTree",720,G__DmtpcAnalysisCint_880_0_6, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TTree), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTruthImage",1338,G__DmtpcAnalysisCint_880_0_7, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TH2), -1, 0, 1, 1, 1, 0, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("MCTPCDataset", 1085, G__DmtpcAnalysisCint_880_0_8, (int) ('i'), G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLMCTPCDataset), -1, 0, 1, 1, 1, 0, "u 'dmtpc::analysis::MCTPCDataset' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MCTPCDataset", 1211, G__DmtpcAnalysisCint_880_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DmtpcAnalysisCint_880_0_10, (int) ('u'), G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLMCTPCDataset), -1, 1, 1, 1, 1, 0, "u 'dmtpc::analysis::MCTPCDataset' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncdmtpccLcLanalysiscLcLtruthalgo(void) {
   /* dmtpc::analysis::truthalgo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLtruthalgo));
   G__memfunc_setup("maincam",726,G__DmtpcAnalysisCint_884_0_1, 105, -1, -1, 0, 1, 1, 1, 0, "U 'dmtpc::analysis::MCTruth' - 10 - truth", (char*)NULL, (void*) G__func2void( (int (*)(const dmtpc::analysis::MCTruth*))(&dmtpc::analysis::truthalgo::maincam) ), 0);
   G__memfunc_setup("edge",405,G__DmtpcAnalysisCint_884_0_2, 103, -1, -1, 0, 2, 1, 1, 0, 
"U 'dmtpc::analysis::MCTruth' - 10 - truth i - - 0 - cam", (char*)NULL, (void*) G__func2void( (bool (*)(const dmtpc::analysis::MCTruth*, int))(&dmtpc::analysis::truthalgo::edge) ), 0);
   G__memfunc_setup("getGain",703,G__DmtpcAnalysisCint_884_0_3, 100, -1, -1, 0, 5, 1, 1, 0, 
"U 'dmtpc::analysis::MCTPCDataset' - 0 - d i - - 0 - cam "
"C - - 10 '\"\"' cut U 'dmtpc::analysis::GainMap' - 0 '0' gm "
"d - - 0 '2' mindist", (char*)NULL, (void*) G__func2void( (double (*)(dmtpc::analysis::MCTPCDataset*, int, const char*, dmtpc::analysis::GainMap*, double))(&dmtpc::analysis::truthalgo::getGain) ), 0);
   G__memfunc_setup("pca_electrons",1378,G__DmtpcAnalysisCint_884_0_4, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLmathcLcLPrincipalComponentFinder), -1, 0, 3, 1, 1, 0, 
"U 'dmtpc::analysis::MCTruth' - 10 - truth U 'dmtpc::math::PrincipalComponentFinder' - 0 '0' pca "
"g - - 0 'false' diffused", (char*)NULL, (void*) G__func2void( (dmtpc::math::PrincipalComponentFinder* (*)(const dmtpc::analysis::MCTruth*, dmtpc::math::PrincipalComponentFinder*, bool))(&dmtpc::analysis::truthalgo::pca_electrons) ), 0);
   G__memfunc_setup("pca_electrons_flat",1896,G__DmtpcAnalysisCint_884_0_5, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLmathcLcLPrincipalComponentFinder), -1, 0, 3, 1, 1, 0, 
"U 'dmtpc::analysis::MCTruth' - 10 - truth U 'dmtpc::math::PrincipalComponentFinder' - 0 '0' pca "
"g - - 0 'false' diffused", (char*)NULL, (void*) G__func2void( (dmtpc::math::PrincipalComponentFinder* (*)(const dmtpc::analysis::MCTruth*, dmtpc::math::PrincipalComponentFinder*, bool))(&dmtpc::analysis::truthalgo::pca_electrons_flat) ), 0);
   G__memfunc_setup("pca_hist",843,G__DmtpcAnalysisCint_884_0_6, 100, -1, -1, 0, 3, 1, 1, 0, 
"U 'TH2' - 10 - hist D - - 0 '0' xmean "
"D - - 0 '0' ymean", (char*)NULL, (void*) G__func2void( (double (*)(const TH2*, double*, double*))(&dmtpc::analysis::truthalgo::pca_hist) ), 0);
   G__memfunc_setup("electron_asymmetry",1958,G__DmtpcAnalysisCint_884_0_7, 100, -1, -1, 0, 9, 1, 1, 0, 
"U 'dmtpc::analysis::MCTruth' - 10 - truth U 'TVector3' - 10 - axis "
"g - - 0 'false' diffuse g - - 0 'false' flat "
"i - - 0 '0' npercentile D - - 0 '0' percentile "
"I - - 0 '0' asymmetries U 'TF1' - 0 '0' debug "
"U 'TH1' - 0 '0' debugh", (char*)NULL, (void*) G__func2void( (double (*)(const dmtpc::analysis::MCTruth*, const TVector3*, bool, bool, int, double*, int*, TF1*, TH1*))(&dmtpc::analysis::truthalgo::electron_asymmetry) ), 0);
   G__memfunc_setup("hist_asymmetry",1538,G__DmtpcAnalysisCint_884_0_8, 100, -1, -1, 0, 9, 1, 1, 0, 
"U 'TH2' - 10 - hist d - - 0 - phi "
"i - - 0 '0' npercentile D - - 0 '0' percentile "
"I - - 0 '0' asymmetries U 'TRandom' - 0 '0' rand "
"d - - 0 '1' acceptance U 'TF1' - 0 '0' debug "
"U 'TH1' - 0 '0' debug_h", (char*)NULL, (void*) G__func2void( (double (*)(const TH2*, double, int, double*, int*, TRandom*, double, TF1*, TH1*))(&dmtpc::analysis::truthalgo::hist_asymmetry) ), 0);
   G__memfunc_setup("max_displacement",1694,G__DmtpcAnalysisCint_884_0_9, 100, -1, -1, 0, 2, 1, 1, 0, 
"U 'dmtpc::analysis::MCTruth' - 10 - truth g - - 0 'true' flat", (char*)NULL, (void*) G__func2void( (double (*)(const dmtpc::analysis::MCTruth*, bool))(&dmtpc::analysis::truthalgo::max_displacement) ), 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncdmtpccLcLanalysiscLcLPlaylist(void) {
   /* dmtpc::analysis::Playlist */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLPlaylist));
   G__memfunc_setup("Playlist",850,G__DmtpcAnalysisCint_885_0_1, 105, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLPlaylist), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Playlist",850,G__DmtpcAnalysisCint_885_0_2, 105, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLPlaylist), -1, 0, 1, 1, 1, 0, "C - - 10 - file", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDataset",1030,G__DmtpcAnalysisCint_885_0_3, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLSkimDataset), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRawDataset",1328,G__DmtpcAnalysisCint_885_0_4, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLcorecLcLDataset), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEvent",834,G__DmtpcAnalysisCint_885_0_5, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLSkimEvent), -1, 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRawEvent",1132,G__DmtpcAnalysisCint_885_0_6, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLcorecLcLEvent), -1, 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCam",593,G__DmtpcAnalysisCint_885_0_7, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrack",821,G__DmtpcAnalysisCint_885_0_8, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getType",738,G__DmtpcAnalysisCint_885_0_9, 105, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLPlaylistcLcLTYPE), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDataDir",985,G__DmtpcAnalysisCint_885_0_10, 67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("next",447,G__DmtpcAnalysisCint_885_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("previous",893,G__DmtpcAnalysisCint_885_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("index",536,G__DmtpcAnalysisCint_885_0_13, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("go",214,G__DmtpcAnalysisCint_885_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("n",110,G__DmtpcAnalysisCint_885_0_15, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDataDir",997,G__DmtpcAnalysisCint_885_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - datadir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setType",750,G__DmtpcAnalysisCint_885_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "i 'dmtpc::analysis::Playlist::TYPE' - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("add",297,G__DmtpcAnalysisCint_885_0_18, 121, -1, -1, 0, 5, 1, 1, 0, 
"C - - 10 - det_tag i - - 0 - run "
"i - - 0 - ev i - - 0 - cam "
"i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("save",431,G__DmtpcAnalysisCint_885_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - file", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("open",434,G__DmtpcAnalysisCint_885_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - file", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DmtpcAnalysisCint_885_0_21, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&dmtpc::analysis::Playlist::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DmtpcAnalysisCint_885_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&dmtpc::analysis::Playlist::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DmtpcAnalysisCint_885_0_23, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&dmtpc::analysis::Playlist::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DmtpcAnalysisCint_885_0_24, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&dmtpc::analysis::Playlist::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__DmtpcAnalysisCint_885_0_25, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__DmtpcAnalysisCint_885_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__DmtpcAnalysisCint_885_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DmtpcAnalysisCint_885_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DmtpcAnalysisCint_885_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&dmtpc::analysis::Playlist::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DmtpcAnalysisCint_885_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&dmtpc::analysis::Playlist::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DmtpcAnalysisCint_885_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&dmtpc::analysis::Playlist::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DmtpcAnalysisCint_885_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&dmtpc::analysis::Playlist::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Playlist", 850, G__DmtpcAnalysisCint_885_0_33, (int) ('i'), G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLPlaylist), -1, 0, 1, 1, 1, 0, "u 'dmtpc::analysis::Playlist' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Playlist", 976, G__DmtpcAnalysisCint_885_0_34, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DmtpcAnalysisCint_885_0_35, (int) ('u'), G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLPlaylist), -1, 1, 1, 1, 1, 0, "u 'dmtpc::analysis::Playlist' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncdmtpccLcLanalysiscLcLTrackFitter(void) {
   /* dmtpc::analysis::TrackFitter */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLTrackFitter));
   G__memfunc_setup("TrackFitter",1123,G__DmtpcAnalysisCint_1005_0_1, 105, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLTrackFitter), -1, 0, 7, 1, 1, 0, 
"U 'dmtpc::physics::SRIMTable' - 0 - sr d - - 0 '0.16' rangecal "
"d - - 0 '18' gain U 'TH2' - 10 '0' gainmap "
"d - - 0 '0.2' min_gain d - - 0 '10' read_noise "
"d - - 0 '1.' conversion_gain", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fit",323,G__DmtpcAnalysisCint_1005_0_2, 105, -1, -1, 0, 5, 1, 1, 0, 
"U 'TH2' - 10 - img U 'vector<int,allocator<int> >' 'vector<int>' 10 - pix "
"d - - 0 'DBL_MAX' phi_guess d - - 0 'DBL_MAX' range_guess "
"d - - 0 'DBL_MAX' sigma_guess", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fit",323,G__DmtpcAnalysisCint_1005_0_3, 105, -1, -1, 0, 3, 1, 1, 0, 
"U 'dmtpc::analysis::SkimEvent' - 10 - ev i - - 0 - c "
"i - - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMinimizationMaxCalls",2393,G__DmtpcAnalysisCint_1005_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - ncalls", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setIntegrationAbsTol",2069,G__DmtpcAnalysisCint_1005_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setIntegrationRelTol",2082,G__DmtpcAnalysisCint_1005_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setIntegrationNCalls",2061,G__DmtpcAnalysisCint_1005_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("enableCauchy",1220,G__DmtpcAnalysisCint_1005_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 - enable", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("enableSecondGaus",1619,G__DmtpcAnalysisCint_1005_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 - enable", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("enableLikelihoodFlip",2038,G__DmtpcAnalysisCint_1005_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 - enable", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setUseGainMapError",1824,G__DmtpcAnalysisCint_1005_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setClusterPadding",1765,G__DmtpcAnalysisCint_1005_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setZeroOutsideCluster",2219,G__DmtpcAnalysisCint_1005_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDraw",730,G__DmtpcAnalysisCint_1005_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'true' val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setVerbose",1058,G__DmtpcAnalysisCint_1005_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'true' val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDoIntegral",1333,G__DmtpcAnalysisCint_1005_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'true' val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDoLikelihood",1539,G__DmtpcAnalysisCint_1005_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'true' val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAlwaysDoMinos",1654,G__DmtpcAnalysisCint_1005_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'true' val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMinosThresh",1472,G__DmtpcAnalysisCint_1005_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setForceDecreasing",1840,G__DmtpcAnalysisCint_1005_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'true' force", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setIntegraNSigma",1621,G__DmtpcAnalysisCint_1005_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getResult",959,G__DmtpcAnalysisCint_1005_0_22, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLTrackFittercLcLResult), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setQuickEval",1233,G__DmtpcAnalysisCint_1005_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 - q", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCanvas",924,G__DmtpcAnalysisCint_1005_0_24, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TCanvas), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SRIMLineFit2DFn",1296,G__DmtpcAnalysisCint_1005_0_25, 100, -1, -1, 0, 1, 1, 1, 8, "D - - 10 - xx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMinimizer",1268,G__DmtpcAnalysisCint_1005_0_26, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_ROOTcLcLMathcLcLMinimizer), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillResultParams",1674,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "g - - 0 'false' from_alt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DmtpcAnalysisCint_1005_0_28, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&dmtpc::analysis::TrackFitter::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DmtpcAnalysisCint_1005_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&dmtpc::analysis::TrackFitter::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DmtpcAnalysisCint_1005_0_30, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&dmtpc::analysis::TrackFitter::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DmtpcAnalysisCint_1005_0_31, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&dmtpc::analysis::TrackFitter::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__DmtpcAnalysisCint_1005_0_32, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__DmtpcAnalysisCint_1005_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__DmtpcAnalysisCint_1005_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DmtpcAnalysisCint_1005_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DmtpcAnalysisCint_1005_0_36, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&dmtpc::analysis::TrackFitter::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DmtpcAnalysisCint_1005_0_37, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&dmtpc::analysis::TrackFitter::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DmtpcAnalysisCint_1005_0_38, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&dmtpc::analysis::TrackFitter::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DmtpcAnalysisCint_1005_0_39, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&dmtpc::analysis::TrackFitter::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TrackFitter", 1123, G__DmtpcAnalysisCint_1005_0_40, (int) ('i'), G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLTrackFitter), -1, 0, 1, 1, 1, 0, "u 'dmtpc::analysis::TrackFitter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TrackFitter", 1249, G__DmtpcAnalysisCint_1005_0_41, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncdmtpccLcLanalysiscLcLTrackFittercLcLParam(void) {
   /* dmtpc::analysis::TrackFitter::Param */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLTrackFittercLcLParam));
   G__memfunc_setup("Param",497,G__DmtpcAnalysisCint_1007_0_1, 105, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLTrackFittercLcLParam), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("zeroErr",745,G__DmtpcAnalysisCint_1007_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fixErr",624,G__DmtpcAnalysisCint_1007_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DmtpcAnalysisCint_1007_0_4, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&dmtpc::analysis::TrackFitter::Param::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DmtpcAnalysisCint_1007_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&dmtpc::analysis::TrackFitter::Param::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DmtpcAnalysisCint_1007_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&dmtpc::analysis::TrackFitter::Param::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DmtpcAnalysisCint_1007_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&dmtpc::analysis::TrackFitter::Param::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__DmtpcAnalysisCint_1007_0_8, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ShowMembers",1132,G__DmtpcAnalysisCint_1007_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Streamer",835,G__DmtpcAnalysisCint_1007_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StreamerNVirtual",1656,G__DmtpcAnalysisCint_1007_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DmtpcAnalysisCint_1007_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&dmtpc::analysis::TrackFitter::Param::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DmtpcAnalysisCint_1007_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&dmtpc::analysis::TrackFitter::Param::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DmtpcAnalysisCint_1007_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&dmtpc::analysis::TrackFitter::Param::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DmtpcAnalysisCint_1007_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&dmtpc::analysis::TrackFitter::Param::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Param", 497, G__DmtpcAnalysisCint_1007_0_16, (int) ('i'), G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLTrackFittercLcLParam), -1, 0, 1, 1, 1, 0, "u 'dmtpc::analysis::TrackFitter::Param' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Param", 623, G__DmtpcAnalysisCint_1007_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DmtpcAnalysisCint_1007_0_18, (int) ('u'), G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLTrackFittercLcLParam), -1, 1, 1, 1, 1, 0, "u 'dmtpc::analysis::TrackFitter::Param' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncdmtpccLcLanalysiscLcLTrackFittercLcLResult(void) {
   /* dmtpc::analysis::TrackFitter::Result */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLTrackFittercLcLResult));
   G__memfunc_setup("Result",639,G__DmtpcAnalysisCint_1008_0_1, 105, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLTrackFittercLcLResult), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DmtpcAnalysisCint_1008_0_2, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&dmtpc::analysis::TrackFitter::Result::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DmtpcAnalysisCint_1008_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&dmtpc::analysis::TrackFitter::Result::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DmtpcAnalysisCint_1008_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&dmtpc::analysis::TrackFitter::Result::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DmtpcAnalysisCint_1008_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&dmtpc::analysis::TrackFitter::Result::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__DmtpcAnalysisCint_1008_0_6, 85, G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ShowMembers",1132,G__DmtpcAnalysisCint_1008_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Streamer",835,G__DmtpcAnalysisCint_1008_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StreamerNVirtual",1656,G__DmtpcAnalysisCint_1008_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DmtpcAnalysisCint_1008_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&dmtpc::analysis::TrackFitter::Result::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DmtpcAnalysisCint_1008_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&dmtpc::analysis::TrackFitter::Result::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DmtpcAnalysisCint_1008_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&dmtpc::analysis::TrackFitter::Result::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DmtpcAnalysisCint_1008_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&dmtpc::analysis::TrackFitter::Result::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Result", 639, G__DmtpcAnalysisCint_1008_0_14, (int) ('i'), G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLTrackFittercLcLResult), -1, 0, 1, 1, 1, 0, "u 'dmtpc::analysis::TrackFitter::Result' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Result", 765, G__DmtpcAnalysisCint_1008_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DmtpcAnalysisCint_1008_0_16, (int) ('u'), G__get_linked_tagnum(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLTrackFittercLcLResult), -1, 1, 1, 1, 1, 0, "u 'dmtpc::analysis::TrackFitter::Result' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncDmtpcAnalysisCint() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {
}

static void G__cpp_setup_global4() {
}

static void G__cpp_setup_global5() {
}

static void G__cpp_setup_global6() {
}

static void G__cpp_setup_global7() {
}

static void G__cpp_setup_global8() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalDmtpcAnalysisCint() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
  G__cpp_setup_global4();
  G__cpp_setup_global5();
  G__cpp_setup_global6();
  G__cpp_setup_global7();
  G__cpp_setup_global8();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {
}

static void G__cpp_setup_func25() {
}

static void G__cpp_setup_func26() {
}

static void G__cpp_setup_func27() {
}

static void G__cpp_setup_func28() {
}

static void G__cpp_setup_func29() {
}

static void G__cpp_setup_func30() {
}

static void G__cpp_setup_func31() {
}

static void G__cpp_setup_func32() {
}

static void G__cpp_setup_func33() {
}

static void G__cpp_setup_func34() {
}

static void G__cpp_setup_func35() {
}

static void G__cpp_setup_func36() {
}

static void G__cpp_setup_func37() {
}

static void G__cpp_setup_func38() {
}

static void G__cpp_setup_func39() {
}

static void G__cpp_setup_func40() {
}

static void G__cpp_setup_func41() {
}

static void G__cpp_setup_func42() {
}

static void G__cpp_setup_func43() {
}

static void G__cpp_setup_func44() {
}

static void G__cpp_setup_func45() {
}

static void G__cpp_setup_func46() {
}

static void G__cpp_setup_func47() {
}

static void G__cpp_setup_func48() {
}

static void G__cpp_setup_func49() {
}

static void G__cpp_setup_func50() {
}

static void G__cpp_setup_func51() {
}

static void G__cpp_setup_func52() {
}

static void G__cpp_setup_func53() {
}

static void G__cpp_setup_func54() {
}

static void G__cpp_setup_func55() {
}

static void G__cpp_setup_func56() {
}

static void G__cpp_setup_func57() {
}

static void G__cpp_setup_func58() {
}

static void G__cpp_setup_func59() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcDmtpcAnalysisCint() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
  G__cpp_setup_func25();
  G__cpp_setup_func26();
  G__cpp_setup_func27();
  G__cpp_setup_func28();
  G__cpp_setup_func29();
  G__cpp_setup_func30();
  G__cpp_setup_func31();
  G__cpp_setup_func32();
  G__cpp_setup_func33();
  G__cpp_setup_func34();
  G__cpp_setup_func35();
  G__cpp_setup_func36();
  G__cpp_setup_func37();
  G__cpp_setup_func38();
  G__cpp_setup_func39();
  G__cpp_setup_func40();
  G__cpp_setup_func41();
  G__cpp_setup_func42();
  G__cpp_setup_func43();
  G__cpp_setup_func44();
  G__cpp_setup_func45();
  G__cpp_setup_func46();
  G__cpp_setup_func47();
  G__cpp_setup_func48();
  G__cpp_setup_func49();
  G__cpp_setup_func50();
  G__cpp_setup_func51();
  G__cpp_setup_func52();
  G__cpp_setup_func53();
  G__cpp_setup_func54();
  G__cpp_setup_func55();
  G__cpp_setup_func56();
  G__cpp_setup_func57();
  G__cpp_setup_func58();
  G__cpp_setup_func59();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__DmtpcAnalysisCintLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_ROOT = { "ROOT" , 110 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR = { "vector<unsigned int,allocator<unsigned int> >" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR = { "vector<double,allocator<double> >" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_vectorlEboolcOallocatorlEboolgRsPgR = { "vector<bool,allocator<bool> >" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR = { "basic_ostream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_TObjArray = { "TObjArray" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_dmtpc = { "dmtpc" , 110 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_dmtpccLcLcore = { "dmtpc::core" , 110 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_dmtpccLcLcorecLcLConfig = { "dmtpc::core::Config" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_vectorlEconstsPcharmUcOallocatorlEconstsPcharmUgRsPgR = { "vector<const char*,allocator<const char*> >" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEconstsPcharmUcOallocatorlEconstsPcharmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<const char*,allocator<const char*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_dmtpccLcLanalysis = { "dmtpc::analysis" , 110 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLAnalysisConfig = { "dmtpc::analysis::AnalysisConfig" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLcleanskim = { "dmtpc::analysis::cleanskim" , 110 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLcleanskimcLcLbias_clean_method_t = { "dmtpc::analysis::cleanskim::bias_clean_method_t" , 101 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLcleanskimcLcLimage_clean_method_t = { "dmtpc::analysis::cleanskim::image_clean_method_t" , 101 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLcleanskimcLcLimage_ratio_method_t = { "dmtpc::analysis::cleanskim::image_ratio_method_t" , 101 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLcleanskimcLcLhist_save_type_t = { "dmtpc::analysis::cleanskim::hist_save_type_t" , 101 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLcleanskimcLcLConfig = { "dmtpc::analysis::cleanskim::Config" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_TH2 = { "TH2" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_TH2F = { "TH2F" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_TTree = { "TTree" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_TTimeStamp = { "TTimeStamp" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLCluster = { "dmtpc::analysis::Cluster" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLClusterImage = { "dmtpc::analysis::ClusterImage" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLanalysiscLcLClustercOallocatorlEdmtpccLcLanalysiscLcLClustergRsPgR = { "vector<dmtpc::analysis::Cluster,allocator<dmtpc::analysis::Cluster> >" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLanalysiscLcLClustercOallocatorlEdmtpccLcLanalysiscLcLClustergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<dmtpc::analysis::Cluster,allocator<dmtpc::analysis::Cluster> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_dmtpccLcLwaveform = { "dmtpc::waveform" , 110 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLPulsecOallocatorlEdmtpccLcLwaveformcLcLPulsegRsPgR = { "vector<dmtpc::waveform::Pulse,allocator<dmtpc::waveform::Pulse> >" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLwaveformcLcLPulsecOallocatorlEdmtpccLcLwaveformcLcLPulsegRsPgRcLcLiteratorgR = { "reverse_iterator<vector<dmtpc::waveform::Pulse,allocator<dmtpc::waveform::Pulse> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLSkimWaveformcOallocatorlEdmtpccLcLwaveformcLcLSkimWaveformgRsPgR = { "vector<dmtpc::waveform::SkimWaveform,allocator<dmtpc::waveform::SkimWaveform> >" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLwaveformcLcLSkimWaveformcOallocatorlEdmtpccLcLwaveformcLcLSkimWaveformgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<dmtpc::waveform::SkimWaveform,allocator<dmtpc::waveform::SkimWaveform> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_dmtpccLcLwaveformcLcLCspPulse = { "dmtpc::waveform::CspPulse" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_dmtpccLcLwaveformcLcLCspWaveform = { "dmtpc::waveform::CspWaveform" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLCspPulsecOallocatorlEdmtpccLcLwaveformcLcLCspPulsegRsPgR = { "vector<dmtpc::waveform::CspPulse,allocator<dmtpc::waveform::CspPulse> >" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLwaveformcLcLCspPulsecOallocatorlEdmtpccLcLwaveformcLcLCspPulsegRsPgRcLcLiteratorgR = { "reverse_iterator<vector<dmtpc::waveform::CspPulse,allocator<dmtpc::waveform::CspPulse> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLCspWaveformcOallocatorlEdmtpccLcLwaveformcLcLCspWaveformgRsPgR = { "vector<dmtpc::waveform::CspWaveform,allocator<dmtpc::waveform::CspWaveform> >" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLwaveformcLcLCspWaveformcOallocatorlEdmtpccLcLwaveformcLcLCspWaveformgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<dmtpc::waveform::CspWaveform,allocator<dmtpc::waveform::CspWaveform> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLFastPulsecOallocatorlEdmtpccLcLwaveformcLcLFastPulsegRsPgR = { "vector<dmtpc::waveform::FastPulse,allocator<dmtpc::waveform::FastPulse> >" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLwaveformcLcLFastPulsecOallocatorlEdmtpccLcLwaveformcLcLFastPulsegRsPgRcLcLiteratorgR = { "reverse_iterator<vector<dmtpc::waveform::FastPulse,allocator<dmtpc::waveform::FastPulse> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLFastWaveformcOallocatorlEdmtpccLcLwaveformcLcLFastWaveformgRsPgR = { "vector<dmtpc::waveform::FastWaveform,allocator<dmtpc::waveform::FastWaveform> >" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLwaveformcLcLFastWaveformcOallocatorlEdmtpccLcLwaveformcLcLFastWaveformgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<dmtpc::waveform::FastWaveform,allocator<dmtpc::waveform::FastWaveform> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLPMTPulsecOallocatorlEdmtpccLcLwaveformcLcLPMTPulsegRsPgR = { "vector<dmtpc::waveform::PMTPulse,allocator<dmtpc::waveform::PMTPulse> >" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLwaveformcLcLPMTPulsecOallocatorlEdmtpccLcLwaveformcLcLPMTPulsegRsPgRcLcLiteratorgR = { "reverse_iterator<vector<dmtpc::waveform::PMTPulse,allocator<dmtpc::waveform::PMTPulse> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLPMTWaveformcOallocatorlEdmtpccLcLwaveformcLcLPMTWaveformgRsPgR = { "vector<dmtpc::waveform::PMTWaveform,allocator<dmtpc::waveform::PMTWaveform> >" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLwaveformcLcLPMTWaveformcOallocatorlEdmtpccLcLwaveformcLcLPMTWaveformgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<dmtpc::waveform::PMTWaveform,allocator<dmtpc::waveform::PMTWaveform> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_dmtpccLcLcorecLcLEvent = { "dmtpc::core::Event" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_dmtpccLcLcorecLcLDataset = { "dmtpc::core::Dataset" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLSkimDataset = { "dmtpc::analysis::SkimDataset" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLGainMap = { "dmtpc::analysis::GainMap" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLStitcher = { "dmtpc::analysis::Stitcher" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLSkimEvent = { "dmtpc::analysis::SkimEvent" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLanalysiscLcLClusterImagemUcOallocatorlEdmtpccLcLanalysiscLcLClusterImagemUgRsPgR = { "vector<dmtpc::analysis::ClusterImage*,allocator<dmtpc::analysis::ClusterImage*> >" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLanalysiscLcLClusterImagemUcOallocatorlEdmtpccLcLanalysiscLcLClusterImagemUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<dmtpc::analysis::ClusterImage*,allocator<dmtpc::analysis::ClusterImage*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLWaveformVectormUcOallocatorlEdmtpccLcLwaveformcLcLWaveformVectormUgRsPgR = { "vector<dmtpc::waveform::WaveformVector*,allocator<dmtpc::waveform::WaveformVector*> >" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLwaveformcLcLWaveformVectormUcOallocatorlEdmtpccLcLwaveformcLcLWaveformVectormUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<dmtpc::waveform::WaveformVector*,allocator<dmtpc::waveform::WaveformVector*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLCspWfVectormUcOallocatorlEdmtpccLcLwaveformcLcLCspWfVectormUgRsPgR = { "vector<dmtpc::waveform::CspWfVector*,allocator<dmtpc::waveform::CspWfVector*> >" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLwaveformcLcLCspWfVectormUcOallocatorlEdmtpccLcLwaveformcLcLCspWfVectormUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<dmtpc::waveform::CspWfVector*,allocator<dmtpc::waveform::CspWfVector*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLFastWfVectormUcOallocatorlEdmtpccLcLwaveformcLcLFastWfVectormUgRsPgR = { "vector<dmtpc::waveform::FastWfVector*,allocator<dmtpc::waveform::FastWfVector*> >" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLwaveformcLcLFastWfVectormUcOallocatorlEdmtpccLcLwaveformcLcLFastWfVectormUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<dmtpc::waveform::FastWfVector*,allocator<dmtpc::waveform::FastWfVector*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLPMTWfVectormUcOallocatorlEdmtpccLcLwaveformcLcLPMTWfVectormUgRsPgR = { "vector<dmtpc::waveform::PMTWfVector*,allocator<dmtpc::waveform::PMTWfVector*> >" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLwaveformcLcLPMTWfVectormUcOallocatorlEdmtpccLcLwaveformcLcLPMTWfVectormUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<dmtpc::waveform::PMTWfVector*,allocator<dmtpc::waveform::PMTWfVector*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_vectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgR = { "vector<vector<unsigned int,allocator<unsigned int> >,allocator<vector<unsigned int,allocator<unsigned int> > > >" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<unsigned int,allocator<unsigned int> >,allocator<vector<unsigned int,allocator<unsigned int> > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_vectorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRsPgRsPgR = { "vector<vector<vector<unsigned int,allocator<unsigned int> >,allocator<vector<unsigned int,allocator<unsigned int> > > >,allocator<vector<vector<unsigned int,allocator<unsigned int> >,allocator<vector<unsigned int,allocator<unsigned int> > > > > >" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<vector<unsigned int,allocator<unsigned int> >,allocator<vector<unsigned int,allocator<unsigned int> > > >,allocator<vector<vector<unsigned int,allocator<unsigned int> >,allocator<vector<unsigned int,allocator<unsigned int> > > > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_vectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgR = { "vector<pair<int,int>,allocator<pair<int,int> > >" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<pair<int,int>,allocator<pair<int,int> > >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR = { "vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR = { "vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_vectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgR = { "vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR = { "vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_vectorlETStringcOallocatorlETStringgRsPgR = { "vector<TString,allocator<TString> >" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TString,allocator<TString> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_pairlEdoublecOdoublegR = { "pair<double,double>" , 115 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_TFile = { "TFile" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_TObjString = { "TObjString" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR = { "map<string,TObjArray*,less<string>,allocator<pair<const string,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_TH1 = { "TH1" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_TChain = { "TChain" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_TCanvas = { "TCanvas" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLcorecLcLImagemUcOallocatorlEdmtpccLcLcorecLcLImagemUgRsPgR = { "vector<dmtpc::core::Image*,allocator<dmtpc::core::Image*> >" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLcorecLcLImagemUcOallocatorlEdmtpccLcLcorecLcLImagemUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<dmtpc::core::Image*,allocator<dmtpc::core::Image*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_vectorlETH2mUcOallocatorlETH2mUgRsPgR = { "vector<TH2*,allocator<TH2*> >" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlETH2mUcOallocatorlETH2mUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TH2*,allocator<TH2*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_TF1 = { "TF1" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_TH1D = { "TH1D" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_TH1I = { "TH1I" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_TH2I = { "TH2I" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_ROOTcLcLMath = { "ROOT::Math" , 110 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_TVector3 = { "TVector3" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR = { "map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_listlEvectorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRsPgRsPgRmUcOallocatorlEvectorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRsPgRsPgRmUgRsPgR = { "list<vector<vector<vector<unsigned int,allocator<unsigned int> >,allocator<vector<unsigned int,allocator<unsigned int> > > >,allocator<vector<vector<unsigned int,allocator<unsigned int> >,allocator<vector<unsigned int,allocator<unsigned int> > > > > >*,allocator<vector<vector<vector<unsigned int,allocator<unsigned int> >,allocator<vector<unsigned int,allocator<unsigned int> > > >,allocator<vector<vector<unsigned int,allocator<unsigned int> >,allocator<vector<unsigned int,allocator<unsigned int> > > > > >*> >" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_listlEvectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgRmUcOallocatorlEvectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgRmUgRsPgR = { "list<vector<pair<int,int>,allocator<pair<int,int> > >*,allocator<vector<pair<int,int>,allocator<pair<int,int> > >*> >" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_vectorlETChainmUcOallocatorlETChainmUgRsPgR = { "vector<TChain*,allocator<TChain*> >" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlETChainmUcOallocatorlETChainmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TChain*,allocator<TChain*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLanalysiscLcLSkimEventmUcOallocatorlEdmtpccLcLanalysiscLcLSkimEventmUgRsPgR = { "vector<dmtpc::analysis::SkimEvent*,allocator<dmtpc::analysis::SkimEvent*> >" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLanalysiscLcLSkimEventmUcOallocatorlEdmtpccLcLanalysiscLcLSkimEventmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<dmtpc::analysis::SkimEvent*,allocator<dmtpc::analysis::SkimEvent*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_dmtpccLcLimage = { "dmtpc::image" , 110 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_dmtpccLcLimagecLcLStitchInfo = { "dmtpc::image::StitchInfo" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_vectorlEstringcOallocatorlEstringgRsPgR = { "vector<string,allocator<string> >" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<string,allocator<string> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_vectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgR = { "vector<pair<double,double>,allocator<pair<double,double> > >" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<pair<double,double>,allocator<pair<double,double> > >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_vectorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRcOallocatorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRsPgRsPgR = { "vector<vector<pair<double,double>,allocator<pair<double,double> > >,allocator<vector<pair<double,double>,allocator<pair<double,double> > > > >" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRcOallocatorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<pair<double,double>,allocator<pair<double,double> > >,allocator<vector<pair<double,double>,allocator<pair<double,double> > > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_listlEvectorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRcOallocatorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRcOallocatorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRsPgRsPgRsPgRsPgR = { "list<vector<vector<pair<double,double>,allocator<pair<double,double> > >,allocator<vector<pair<double,double>,allocator<pair<double,double> > > > >,allocator<vector<vector<pair<double,double>,allocator<pair<double,double> > >,allocator<vector<pair<double,double>,allocator<pair<double,double> > > > > > >" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLclusteralgo = { "dmtpc::analysis::clusteralgo" , 110 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_listlETGraphcOallocatorlETGraphgRsPgR = { "list<TGraph,allocator<TGraph> >" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLGainTree = { "dmtpc::analysis::GainTree" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR = { "vector<TH1*,allocator<TH1*> >" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlETH1mUcOallocatorlETH1mUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TH1*,allocator<TH1*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLHVLog = { "dmtpc::analysis::HVLog" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLMCTruth = { "dmtpc::analysis::MCTruth" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_vectorlETH2ImUcOallocatorlETH2ImUgRsPgR = { "vector<TH2I*,allocator<TH2I*> >" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlETH2ImUcOallocatorlETH2ImUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TH2I*,allocator<TH2I*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_vectorlETH1SmUcOallocatorlETH1SmUgRsPgR = { "vector<TH1S*,allocator<TH1S*> >" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlETH1SmUcOallocatorlETH1SmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TH1S*,allocator<TH1S*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLMCTPCDataset = { "dmtpc::analysis::MCTPCDataset" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_TRandom = { "TRandom" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_dmtpccLcLmath = { "dmtpc::math" , 110 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_dmtpccLcLmathcLcLPrincipalComponentFinder = { "dmtpc::math::PrincipalComponentFinder" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLtruthalgo = { "dmtpc::analysis::truthalgo" , 110 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLPlaylist = { "dmtpc::analysis::Playlist" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLPlaylistcLcLTYPE = { "dmtpc::analysis::Playlist::TYPE" , 101 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_dmtpccLcLimagecLcLLensCorrection = { "dmtpc::image::LensCorrection" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_vectorlETH2FmUcOallocatorlETH2FmUgRsPgR = { "vector<TH2F*,allocator<TH2F*> >" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlETH2FmUcOallocatorlETH2FmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TH2F*,allocator<TH2F*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_vectorlEconstsPTH2mUcOallocatorlEconstsPTH2mUgRsPgR = { "vector<const TH2*,allocator<const TH2*> >" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEconstsPTH2mUcOallocatorlEconstsPTH2mUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<const TH2*,allocator<const TH2*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLStitchercLcLSCALE_METHOD = { "dmtpc::analysis::Stitcher::SCALE_METHOD" , 101 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_vectorlETH2CmUcOallocatorlETH2CmUgRsPgR = { "vector<TH2C*,allocator<TH2C*> >" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlETH2CmUcOallocatorlETH2CmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TH2C*,allocator<TH2C*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_vectorlETH2DmUcOallocatorlETH2DmUgRsPgR = { "vector<TH2D*,allocator<TH2D*> >" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlETH2DmUcOallocatorlETH2DmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TH2D*,allocator<TH2D*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_vectorlETObjStringcOallocatorlETObjStringgRsPgR = { "vector<TObjString,allocator<TObjString> >" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlETObjStringcOallocatorlETObjStringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TObjString,allocator<TObjString> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_TF2 = { "TF2" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_pairlEunsignedsPintcOintgR = { "pair<unsigned int,int>" , 115 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR = { "vector<pair<unsigned int,int>,allocator<pair<unsigned int,int> > >" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<pair<unsigned int,int>,allocator<pair<unsigned int,int> > >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_TArrow = { "TArrow" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_ROOTcLcLMathcLcLMinimizer = { "ROOT::Math::Minimizer" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_ROOTcLcLMathcLcLFunctor = { "ROOT::Math::Functor" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_ROOTcLcLMathcLcLAdaptiveIntegratorMultiDim = { "ROOT::Math::AdaptiveIntegratorMultiDim" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_dmtpccLcLphysics = { "dmtpc::physics" , 110 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_dmtpccLcLphysicscLcLSRIMTable = { "dmtpc::physics::SRIMTable" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLTrackFitter = { "dmtpc::analysis::TrackFitter" , 99 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLTrackFittercLcLPARTICLE = { "dmtpc::analysis::TrackFitter::PARTICLE" , 101 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLTrackFittercLcLParam = { "dmtpc::analysis::TrackFitter::Param" , 115 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLTrackFittercLcLResult = { "dmtpc::analysis::TrackFitter::Result" , 115 , -1 };
G__linked_taginfo G__DmtpcAnalysisCintLN_ROOTcLcLMathcLcLWrappedMultiFunctionlETF2aNgR = { "ROOT::Math::WrappedMultiFunction<TF2&>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableDmtpcAnalysisCint() {
  G__DmtpcAnalysisCintLN_TClass.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_TBuffer.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_TMemberInspector.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_TObject.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_TNamed.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_TString.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_ROOT.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_vectorlEboolcOallocatorlEboolgRsPgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_string.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_TObjArray.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_dmtpc.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_dmtpccLcLcore.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_dmtpccLcLcorecLcLConfig.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_vectorlEconstsPcharmUcOallocatorlEconstsPcharmUgRsPgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEconstsPcharmUcOallocatorlEconstsPcharmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_dmtpccLcLanalysis.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLAnalysisConfig.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLcleanskim.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLcleanskimcLcLbias_clean_method_t.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLcleanskimcLcLimage_clean_method_t.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLcleanskimcLcLimage_ratio_method_t.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLcleanskimcLcLhist_save_type_t.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLcleanskimcLcLConfig.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_TH2.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_TH2F.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_TTree.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_TTimeStamp.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLCluster.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLClusterImage.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLanalysiscLcLClustercOallocatorlEdmtpccLcLanalysiscLcLClustergRsPgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLanalysiscLcLClustercOallocatorlEdmtpccLcLanalysiscLcLClustergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_dmtpccLcLwaveform.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLPulsecOallocatorlEdmtpccLcLwaveformcLcLPulsegRsPgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLwaveformcLcLPulsecOallocatorlEdmtpccLcLwaveformcLcLPulsegRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLSkimWaveformcOallocatorlEdmtpccLcLwaveformcLcLSkimWaveformgRsPgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLwaveformcLcLSkimWaveformcOallocatorlEdmtpccLcLwaveformcLcLSkimWaveformgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_dmtpccLcLwaveformcLcLCspPulse.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_dmtpccLcLwaveformcLcLCspWaveform.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLCspPulsecOallocatorlEdmtpccLcLwaveformcLcLCspPulsegRsPgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLwaveformcLcLCspPulsecOallocatorlEdmtpccLcLwaveformcLcLCspPulsegRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLCspWaveformcOallocatorlEdmtpccLcLwaveformcLcLCspWaveformgRsPgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLwaveformcLcLCspWaveformcOallocatorlEdmtpccLcLwaveformcLcLCspWaveformgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLFastPulsecOallocatorlEdmtpccLcLwaveformcLcLFastPulsegRsPgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLwaveformcLcLFastPulsecOallocatorlEdmtpccLcLwaveformcLcLFastPulsegRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLFastWaveformcOallocatorlEdmtpccLcLwaveformcLcLFastWaveformgRsPgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLwaveformcLcLFastWaveformcOallocatorlEdmtpccLcLwaveformcLcLFastWaveformgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLPMTPulsecOallocatorlEdmtpccLcLwaveformcLcLPMTPulsegRsPgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLwaveformcLcLPMTPulsecOallocatorlEdmtpccLcLwaveformcLcLPMTPulsegRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLPMTWaveformcOallocatorlEdmtpccLcLwaveformcLcLPMTWaveformgRsPgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLwaveformcLcLPMTWaveformcOallocatorlEdmtpccLcLwaveformcLcLPMTWaveformgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_dmtpccLcLcorecLcLEvent.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_dmtpccLcLcorecLcLDataset.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLSkimDataset.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLGainMap.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLStitcher.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLSkimEvent.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLanalysiscLcLClusterImagemUcOallocatorlEdmtpccLcLanalysiscLcLClusterImagemUgRsPgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLanalysiscLcLClusterImagemUcOallocatorlEdmtpccLcLanalysiscLcLClusterImagemUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLWaveformVectormUcOallocatorlEdmtpccLcLwaveformcLcLWaveformVectormUgRsPgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLwaveformcLcLWaveformVectormUcOallocatorlEdmtpccLcLwaveformcLcLWaveformVectormUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLCspWfVectormUcOallocatorlEdmtpccLcLwaveformcLcLCspWfVectormUgRsPgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLwaveformcLcLCspWfVectormUcOallocatorlEdmtpccLcLwaveformcLcLCspWfVectormUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLFastWfVectormUcOallocatorlEdmtpccLcLwaveformcLcLFastWfVectormUgRsPgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLwaveformcLcLFastWfVectormUcOallocatorlEdmtpccLcLwaveformcLcLFastWfVectormUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLPMTWfVectormUcOallocatorlEdmtpccLcLwaveformcLcLPMTWfVectormUgRsPgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLwaveformcLcLPMTWfVectormUcOallocatorlEdmtpccLcLwaveformcLcLPMTWfVectormUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_vectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_vectorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_vectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_vectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_vectorlETStringcOallocatorlETStringgRsPgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_pairlEdoublecOdoublegR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_TFile.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_TObjString.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_TH1.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_TChain.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_TCanvas.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLcorecLcLImagemUcOallocatorlEdmtpccLcLcorecLcLImagemUgRsPgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLcorecLcLImagemUcOallocatorlEdmtpccLcLcorecLcLImagemUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_vectorlETH2mUcOallocatorlETH2mUgRsPgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlETH2mUcOallocatorlETH2mUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_TF1.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_TH1D.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_TH1I.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_TH2I.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_ROOTcLcLMath.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_TVector3.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_listlEvectorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRsPgRsPgRmUcOallocatorlEvectorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRsPgRsPgRmUgRsPgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_listlEvectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgRmUcOallocatorlEvectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgRmUgRsPgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_vectorlETChainmUcOallocatorlETChainmUgRsPgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlETChainmUcOallocatorlETChainmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLanalysiscLcLSkimEventmUcOallocatorlEdmtpccLcLanalysiscLcLSkimEventmUgRsPgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLanalysiscLcLSkimEventmUcOallocatorlEdmtpccLcLanalysiscLcLSkimEventmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_dmtpccLcLimage.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_dmtpccLcLimagecLcLStitchInfo.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_vectorlEstringcOallocatorlEstringgRsPgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_vectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_vectorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRcOallocatorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRcOallocatorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_listlEvectorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRcOallocatorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRcOallocatorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLclusteralgo.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_listlETGraphcOallocatorlETGraphgRsPgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLGainTree.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlETH1mUcOallocatorlETH1mUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLHVLog.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLMCTruth.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_vectorlETH2ImUcOallocatorlETH2ImUgRsPgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlETH2ImUcOallocatorlETH2ImUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_vectorlETH1SmUcOallocatorlETH1SmUgRsPgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlETH1SmUcOallocatorlETH1SmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLMCTPCDataset.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_TRandom.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_dmtpccLcLmath.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_dmtpccLcLmathcLcLPrincipalComponentFinder.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLtruthalgo.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLPlaylist.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLPlaylistcLcLTYPE.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_dmtpccLcLimagecLcLLensCorrection.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_vectorlETH2FmUcOallocatorlETH2FmUgRsPgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlETH2FmUcOallocatorlETH2FmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_vectorlEconstsPTH2mUcOallocatorlEconstsPTH2mUgRsPgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEconstsPTH2mUcOallocatorlEconstsPTH2mUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLStitchercLcLSCALE_METHOD.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_vectorlETH2CmUcOallocatorlETH2CmUgRsPgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlETH2CmUcOallocatorlETH2CmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_vectorlETH2DmUcOallocatorlETH2DmUgRsPgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlETH2DmUcOallocatorlETH2DmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_vectorlETObjStringcOallocatorlETObjStringgRsPgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlETObjStringcOallocatorlETObjStringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_TF2.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_pairlEunsignedsPintcOintgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_TArrow.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_ROOTcLcLMathcLcLMinimizer.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_ROOTcLcLMathcLcLFunctor.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_ROOTcLcLMathcLcLAdaptiveIntegratorMultiDim.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_dmtpccLcLphysics.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_dmtpccLcLphysicscLcLSRIMTable.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLTrackFitter.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLTrackFittercLcLPARTICLE.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLTrackFittercLcLParam.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLTrackFittercLcLResult.tagnum = -1 ;
  G__DmtpcAnalysisCintLN_ROOTcLcLMathcLcLWrappedMultiFunctionlETF2aNgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableDmtpcAnalysisCint() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_TClass);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_TObject);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_TNamed);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_TString);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_ROOT);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_vectorlEboolcOallocatorlEboolgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_string);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_TObjArray);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_dmtpc),0,-1,0,(char*)NULL,G__setup_memvardmtpc,G__setup_memfuncdmtpc);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_dmtpccLcLcore);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_dmtpccLcLcorecLcLConfig);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_vectorlEconstsPcharmUcOallocatorlEconstsPcharmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEconstsPcharmUcOallocatorlEconstsPcharmUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysis),0,-1,0,(char*)NULL,G__setup_memvardmtpccLcLanalysis,G__setup_memfuncdmtpccLcLanalysis);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLAnalysisConfig),sizeof(dmtpc::analysis::AnalysisConfig),-1,1280,(char*)NULL,G__setup_memvardmtpccLcLanalysiscLcLAnalysisConfig,G__setup_memfuncdmtpccLcLanalysiscLcLAnalysisConfig);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLcleanskim),0,-1,0,(char*)NULL,G__setup_memvardmtpccLcLanalysiscLcLcleanskim,G__setup_memfuncdmtpccLcLanalysiscLcLcleanskim);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLcleanskimcLcLbias_clean_method_t);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLcleanskimcLcLimage_clean_method_t);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLcleanskimcLcLimage_ratio_method_t);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLcleanskimcLcLhist_save_type_t);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLcleanskimcLcLConfig),sizeof(dmtpc::analysis::cleanskim::Config),-1,33024,(char*)NULL,G__setup_memvardmtpccLcLanalysiscLcLcleanskimcLcLConfig,G__setup_memfuncdmtpccLcLanalysiscLcLcleanskimcLcLConfig);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_TH2);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_TH2F);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_TTree);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_TTimeStamp);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLCluster),sizeof(dmtpc::analysis::Cluster),-1,290816,(char*)NULL,G__setup_memvardmtpccLcLanalysiscLcLCluster,G__setup_memfuncdmtpccLcLanalysiscLcLCluster);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLClusterImage),sizeof(dmtpc::analysis::ClusterImage),-1,324864,(char*)NULL,G__setup_memvardmtpccLcLanalysiscLcLClusterImage,G__setup_memfuncdmtpccLcLanalysiscLcLClusterImage);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLanalysiscLcLClustercOallocatorlEdmtpccLcLanalysiscLcLClustergRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLanalysiscLcLClustercOallocatorlEdmtpccLcLanalysiscLcLClustergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_dmtpccLcLwaveform);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLPulsecOallocatorlEdmtpccLcLwaveformcLcLPulsegRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLwaveformcLcLPulsecOallocatorlEdmtpccLcLwaveformcLcLPulsegRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLSkimWaveformcOallocatorlEdmtpccLcLwaveformcLcLSkimWaveformgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLwaveformcLcLSkimWaveformcOallocatorlEdmtpccLcLwaveformcLcLSkimWaveformgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_dmtpccLcLwaveformcLcLCspPulse);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_dmtpccLcLwaveformcLcLCspWaveform);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLCspPulsecOallocatorlEdmtpccLcLwaveformcLcLCspPulsegRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLwaveformcLcLCspPulsecOallocatorlEdmtpccLcLwaveformcLcLCspPulsegRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLCspWaveformcOallocatorlEdmtpccLcLwaveformcLcLCspWaveformgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLwaveformcLcLCspWaveformcOallocatorlEdmtpccLcLwaveformcLcLCspWaveformgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLFastPulsecOallocatorlEdmtpccLcLwaveformcLcLFastPulsegRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLwaveformcLcLFastPulsecOallocatorlEdmtpccLcLwaveformcLcLFastPulsegRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLFastWaveformcOallocatorlEdmtpccLcLwaveformcLcLFastWaveformgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLwaveformcLcLFastWaveformcOallocatorlEdmtpccLcLwaveformcLcLFastWaveformgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLPMTPulsecOallocatorlEdmtpccLcLwaveformcLcLPMTPulsegRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLwaveformcLcLPMTPulsecOallocatorlEdmtpccLcLwaveformcLcLPMTPulsegRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLPMTWaveformcOallocatorlEdmtpccLcLwaveformcLcLPMTWaveformgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLwaveformcLcLPMTWaveformcOallocatorlEdmtpccLcLwaveformcLcLPMTWaveformgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_dmtpccLcLcorecLcLEvent);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_dmtpccLcLcorecLcLDataset);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLSkimDataset),sizeof(dmtpc::analysis::SkimDataset),-1,1792,(char*)NULL,G__setup_memvardmtpccLcLanalysiscLcLSkimDataset,G__setup_memfuncdmtpccLcLanalysiscLcLSkimDataset);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLGainMap),sizeof(dmtpc::analysis::GainMap),-1,62720,(char*)NULL,G__setup_memvardmtpccLcLanalysiscLcLGainMap,G__setup_memfuncdmtpccLcLanalysiscLcLGainMap);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLStitcher),sizeof(dmtpc::analysis::Stitcher),-1,62720,(char*)NULL,G__setup_memvardmtpccLcLanalysiscLcLStitcher,G__setup_memfuncdmtpccLcLanalysiscLcLStitcher);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLSkimEvent),sizeof(dmtpc::analysis::SkimEvent),-1,30464,(char*)NULL,G__setup_memvardmtpccLcLanalysiscLcLSkimEvent,G__setup_memfuncdmtpccLcLanalysiscLcLSkimEvent);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLanalysiscLcLClusterImagemUcOallocatorlEdmtpccLcLanalysiscLcLClusterImagemUgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLanalysiscLcLClusterImagemUcOallocatorlEdmtpccLcLanalysiscLcLClusterImagemUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLWaveformVectormUcOallocatorlEdmtpccLcLwaveformcLcLWaveformVectormUgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLwaveformcLcLWaveformVectormUcOallocatorlEdmtpccLcLwaveformcLcLWaveformVectormUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLCspWfVectormUcOallocatorlEdmtpccLcLwaveformcLcLCspWfVectormUgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLwaveformcLcLCspWfVectormUcOallocatorlEdmtpccLcLwaveformcLcLCspWfVectormUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLFastWfVectormUcOallocatorlEdmtpccLcLwaveformcLcLFastWfVectormUgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLwaveformcLcLFastWfVectormUcOallocatorlEdmtpccLcLwaveformcLcLFastWfVectormUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLwaveformcLcLPMTWfVectormUcOallocatorlEdmtpccLcLwaveformcLcLPMTWfVectormUgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLwaveformcLcLPMTWfVectormUcOallocatorlEdmtpccLcLwaveformcLcLPMTWfVectormUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_vectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_vectorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_vectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_vectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_vectorlETStringcOallocatorlETStringgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_pairlEdoublecOdoublegR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_TFile);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_TObjString);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_TH1);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_TChain);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_TCanvas);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLcorecLcLImagemUcOallocatorlEdmtpccLcLcorecLcLImagemUgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLcorecLcLImagemUcOallocatorlEdmtpccLcLcorecLcLImagemUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_vectorlETH2mUcOallocatorlETH2mUgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlETH2mUcOallocatorlETH2mUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_TF1);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_TH1D);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_TH1I);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_TH2I);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_ROOTcLcLMath);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_TVector3);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_listlEvectorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRsPgRsPgRmUcOallocatorlEvectorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRsPgRsPgRmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_listlEvectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgRmUcOallocatorlEvectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgRmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_vectorlETChainmUcOallocatorlETChainmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlETChainmUcOallocatorlETChainmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_vectorlEdmtpccLcLanalysiscLcLSkimEventmUcOallocatorlEdmtpccLcLanalysiscLcLSkimEventmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEdmtpccLcLanalysiscLcLSkimEventmUcOallocatorlEdmtpccLcLanalysiscLcLSkimEventmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_dmtpccLcLimage);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_dmtpccLcLimagecLcLStitchInfo);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_vectorlEstringcOallocatorlEstringgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_vectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_vectorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRcOallocatorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRcOallocatorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_listlEvectorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRcOallocatorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRcOallocatorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRsPgRsPgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLclusteralgo),0,-1,0,(char*)NULL,G__setup_memvardmtpccLcLanalysiscLcLclusteralgo,G__setup_memfuncdmtpccLcLanalysiscLcLclusteralgo);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_listlETGraphcOallocatorlETGraphgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLGainTree),sizeof(dmtpc::analysis::GainTree),-1,1280,(char*)NULL,G__setup_memvardmtpccLcLanalysiscLcLGainTree,G__setup_memfuncdmtpccLcLanalysiscLcLGainTree);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlETH1mUcOallocatorlETH1mUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLHVLog),sizeof(dmtpc::analysis::HVLog),-1,32768,(char*)NULL,G__setup_memvardmtpccLcLanalysiscLcLHVLog,G__setup_memfuncdmtpccLcLanalysiscLcLHVLog);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLMCTruth),sizeof(dmtpc::analysis::MCTruth),-1,263424,(char*)NULL,G__setup_memvardmtpccLcLanalysiscLcLMCTruth,G__setup_memfuncdmtpccLcLanalysiscLcLMCTruth);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_vectorlETH2ImUcOallocatorlETH2ImUgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlETH2ImUcOallocatorlETH2ImUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_vectorlETH1SmUcOallocatorlETH1SmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlETH1SmUcOallocatorlETH1SmUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLMCTPCDataset),sizeof(dmtpc::analysis::MCTPCDataset),-1,1280,(char*)NULL,G__setup_memvardmtpccLcLanalysiscLcLMCTPCDataset,G__setup_memfuncdmtpccLcLanalysiscLcLMCTPCDataset);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_TRandom);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_dmtpccLcLmath);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_dmtpccLcLmathcLcLPrincipalComponentFinder);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLtruthalgo),0,-1,0,(char*)NULL,G__setup_memvardmtpccLcLanalysiscLcLtruthalgo,G__setup_memfuncdmtpccLcLanalysiscLcLtruthalgo);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLPlaylist),sizeof(dmtpc::analysis::Playlist),-1,34048,(char*)NULL,G__setup_memvardmtpccLcLanalysiscLcLPlaylist,G__setup_memfuncdmtpccLcLanalysiscLcLPlaylist);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLPlaylistcLcLTYPE);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_dmtpccLcLimagecLcLLensCorrection);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_vectorlETH2FmUcOallocatorlETH2FmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlETH2FmUcOallocatorlETH2FmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_vectorlEconstsPTH2mUcOallocatorlEconstsPTH2mUgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEconstsPTH2mUcOallocatorlEconstsPTH2mUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLStitchercLcLSCALE_METHOD);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_vectorlETH2CmUcOallocatorlETH2CmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlETH2CmUcOallocatorlETH2CmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_vectorlETH2DmUcOallocatorlETH2DmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlETH2DmUcOallocatorlETH2DmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_vectorlETObjStringcOallocatorlETObjStringgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlETObjStringcOallocatorlETObjStringgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_TF2);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_pairlEunsignedsPintcOintgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_TArrow);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_ROOTcLcLMathcLcLMinimizer);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_ROOTcLcLMathcLcLFunctor);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_ROOTcLcLMathcLcLAdaptiveIntegratorMultiDim);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_dmtpccLcLphysics);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_dmtpccLcLphysicscLcLSRIMTable);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLTrackFitter),sizeof(dmtpc::analysis::TrackFitter),-1,33792,(char*)NULL,G__setup_memvardmtpccLcLanalysiscLcLTrackFitter,G__setup_memfuncdmtpccLcLanalysiscLcLTrackFitter);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLTrackFittercLcLPARTICLE);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLTrackFittercLcLParam),sizeof(dmtpc::analysis::TrackFitter::Param),-1,256,(char*)NULL,G__setup_memvardmtpccLcLanalysiscLcLTrackFittercLcLParam,G__setup_memfuncdmtpccLcLanalysiscLcLTrackFittercLcLParam);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_dmtpccLcLanalysiscLcLTrackFittercLcLResult),sizeof(dmtpc::analysis::TrackFitter::Result),-1,256,(char*)NULL,G__setup_memvardmtpccLcLanalysiscLcLTrackFittercLcLResult,G__setup_memfuncdmtpccLcLanalysiscLcLTrackFittercLcLResult);
   G__get_linked_tagnum_fwd(&G__DmtpcAnalysisCintLN_ROOTcLcLMathcLcLWrappedMultiFunctionlETF2aNgR);
}
extern "C" void G__cpp_setupDmtpcAnalysisCint(void) {
  G__check_setup_version(30051515,"G__cpp_setupDmtpcAnalysisCint()");
  G__set_cpp_environmentDmtpcAnalysisCint();
  G__cpp_setup_tagtableDmtpcAnalysisCint();

  G__cpp_setup_inheritanceDmtpcAnalysisCint();

  G__cpp_setup_typetableDmtpcAnalysisCint();

  G__cpp_setup_memvarDmtpcAnalysisCint();

  G__cpp_setup_memfuncDmtpcAnalysisCint();
  G__cpp_setup_globalDmtpcAnalysisCint();
  G__cpp_setup_funcDmtpcAnalysisCint();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncDmtpcAnalysisCint();
  return;
}
class G__cpp_setup_initDmtpcAnalysisCint {
  public:
    G__cpp_setup_initDmtpcAnalysisCint() { G__add_setup_func("DmtpcAnalysisCint",(G__incsetup)(&G__cpp_setupDmtpcAnalysisCint)); G__call_setup_funcs(); }
   ~G__cpp_setup_initDmtpcAnalysisCint() { G__remove_setup_func("DmtpcAnalysisCint"); }
};
G__cpp_setup_initDmtpcAnalysisCint G__cpp_setup_initializerDmtpcAnalysisCint;

